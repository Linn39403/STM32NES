; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal_flash.o --depend=stm32nes\stm32f4xx_hal_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal_flash.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_Byte||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Byte PROC
;;;705      */
;;;706    static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
000000  4a07              LDR      r2,|L1.32|
;;;707    {
;;;708      /* Check the parameters */
;;;709      assert_param(IS_FLASH_ADDRESS(Address));
;;;710      
;;;711      /* If the previous operation is completed, proceed to program the new data */
;;;712      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b05              LDR      r3,|L1.32|
00000a  601a              STR      r2,[r3,#0]
;;;713      FLASH->CR |= FLASH_PSIZE_BYTE;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  601a              STR      r2,[r3,#0]
;;;714      FLASH->CR |= FLASH_CR_PG;
000012  461a              MOV      r2,r3
000014  6812              LDR      r2,[r2,#0]
000016  f0420201          ORR      r2,r2,#1
00001a  601a              STR      r2,[r3,#0]
;;;715    
;;;716      *(__IO uint8_t*)Address = Data;
00001c  7001              STRB     r1,[r0,#0]
;;;717    }
00001e  4770              BX       lr
;;;718    
                          ENDP

                  |L1.32|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_DoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_DoubleWord PROC
;;;627      */
;;;628    static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
000000  b510              PUSH     {r4,lr}
;;;629    {
;;;630      /* Check the parameters */
;;;631      assert_param(IS_FLASH_ADDRESS(Address));
;;;632      
;;;633      /* If the previous operation is completed, proceed to program the new data */
;;;634      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  4909              LDR      r1,|L2.40|
000004  6809              LDR      r1,[r1,#0]
000006  f4217140          BIC      r1,r1,#0x300
00000a  4c07              LDR      r4,|L2.40|
00000c  6021              STR      r1,[r4,#0]
;;;635      FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
00000e  4621              MOV      r1,r4
000010  6809              LDR      r1,[r1,#0]
000012  f4417140          ORR      r1,r1,#0x300
000016  6021              STR      r1,[r4,#0]
;;;636      FLASH->CR |= FLASH_CR_PG;
000018  4621              MOV      r1,r4
00001a  6809              LDR      r1,[r1,#0]
00001c  f0410101          ORR      r1,r1,#1
000020  6021              STR      r1,[r4,#0]
;;;637    
;;;638      /* Program the double-word */
;;;639      *(__IO uint32_t*)Address = (uint32_t)Data;
000022  6002              STR      r2,[r0,#0]
;;;640      *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
000024  6043              STR      r3,[r0,#4]
;;;641    }
000026  bd10              POP      {r4,pc}
;;;642    
                          ENDP

                  |L2.40|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_HalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_HalfWord PROC
;;;680      */
;;;681    static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
000000  4a08              LDR      r2,|L3.36|
;;;682    {
;;;683      /* Check the parameters */
;;;684      assert_param(IS_FLASH_ADDRESS(Address));
;;;685      
;;;686      /* If the previous operation is completed, proceed to program the new data */
;;;687      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L3.36|
00000a  601a              STR      r2,[r3,#0]
;;;688      FLASH->CR |= FLASH_PSIZE_HALF_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427280          ORR      r2,r2,#0x100
000014  601a              STR      r2,[r3,#0]
;;;689      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;690    
;;;691      *(__IO uint16_t*)Address = Data;
000020  8001              STRH     r1,[r0,#0]
;;;692    }
000022  4770              BX       lr
;;;693    
                          ENDP

                  |L3.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_Program_Word||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Word PROC
;;;655      */
;;;656    static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
000000  4a08              LDR      r2,|L4.36|
;;;657    {
;;;658      /* Check the parameters */
;;;659      assert_param(IS_FLASH_ADDRESS(Address));
;;;660      
;;;661      /* If the previous operation is completed, proceed to program the new data */
;;;662      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000002  6812              LDR      r2,[r2,#0]
000004  f4227240          BIC      r2,r2,#0x300
000008  4b06              LDR      r3,|L4.36|
00000a  601a              STR      r2,[r3,#0]
;;;663      FLASH->CR |= FLASH_PSIZE_WORD;
00000c  461a              MOV      r2,r3
00000e  6812              LDR      r2,[r2,#0]
000010  f4427200          ORR      r2,r2,#0x200
000014  601a              STR      r2,[r3,#0]
;;;664      FLASH->CR |= FLASH_CR_PG;
000016  461a              MOV      r2,r3
000018  6812              LDR      r2,[r2,#0]
00001a  f0420201          ORR      r2,r2,#1
00001e  601a              STR      r2,[r3,#0]
;;;665    
;;;666      *(__IO uint32_t*)Address = Data;
000020  6001              STR      r1,[r0,#0]
;;;667    }
000022  4770              BX       lr
;;;668    
                          ENDP

                  |L4.36|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;722      */
;;;723    static void FLASH_SetErrorCode(void)
000000  482a              LDR      r0,|L5.172|
;;;724    { 
;;;725      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000010          AND      r0,r0,#0x10
000008  b140              CBZ      r0,|L5.28|
;;;726      {
;;;727       pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
00000a  4829              LDR      r0,|L5.176|
00000c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00000e  f0400010          ORR      r0,r0,#0x10
000012  4927              LDR      r1,|L5.176|
000014  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;728       
;;;729       /* Clear FLASH write protection error pending bit */
;;;730       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
000016  2010              MOVS     r0,#0x10
000018  4924              LDR      r1,|L5.172|
00001a  6008              STR      r0,[r1,#0]
                  |L5.28|
;;;731      }
;;;732      
;;;733      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
00001c  4823              LDR      r0,|L5.172|
00001e  6800              LDR      r0,[r0,#0]
000020  f0000020          AND      r0,r0,#0x20
000024  b140              CBZ      r0,|L5.56|
;;;734      {
;;;735       pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
000026  4822              LDR      r0,|L5.176|
000028  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00002a  f0400008          ORR      r0,r0,#8
00002e  4920              LDR      r1,|L5.176|
000030  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;736       
;;;737       /* Clear FLASH Programming alignment error pending bit */
;;;738       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
000032  2020              MOVS     r0,#0x20
000034  491d              LDR      r1,|L5.172|
000036  6008              STR      r0,[r1,#0]
                  |L5.56|
;;;739      }
;;;740      
;;;741      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
000038  481c              LDR      r0,|L5.172|
00003a  6800              LDR      r0,[r0,#0]
00003c  f0000040          AND      r0,r0,#0x40
000040  b140              CBZ      r0,|L5.84|
;;;742      {
;;;743        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
000042  481b              LDR      r0,|L5.176|
000044  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000046  f0400004          ORR      r0,r0,#4
00004a  4919              LDR      r1,|L5.176|
00004c  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;744        
;;;745        /* Clear FLASH Programming parallelism error pending bit */
;;;746        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
00004e  2040              MOVS     r0,#0x40
000050  4916              LDR      r1,|L5.172|
000052  6008              STR      r0,[r1,#0]
                  |L5.84|
;;;747      }
;;;748      
;;;749      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
000054  4815              LDR      r0,|L5.172|
000056  6800              LDR      r0,[r0,#0]
000058  f0000080          AND      r0,r0,#0x80
00005c  b140              CBZ      r0,|L5.112|
;;;750      {
;;;751        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
00005e  4814              LDR      r0,|L5.176|
000060  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
000062  f0400002          ORR      r0,r0,#2
000066  4912              LDR      r1,|L5.176|
000068  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;752        
;;;753        /* Clear FLASH Programming sequence error pending bit */
;;;754        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
00006a  2080              MOVS     r0,#0x80
00006c  490f              LDR      r1,|L5.172|
00006e  6008              STR      r0,[r1,#0]
                  |L5.112|
;;;755      }
;;;756    #if defined(FLASH_SR_RDERR) 
;;;757      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
000070  480e              LDR      r0,|L5.172|
000072  6800              LDR      r0,[r0,#0]
000074  f4007080          AND      r0,r0,#0x100
000078  b148              CBZ      r0,|L5.142|
;;;758      {
;;;759        pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
00007a  480d              LDR      r0,|L5.176|
00007c  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00007e  f0400001          ORR      r0,r0,#1
000082  490b              LDR      r1,|L5.176|
000084  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;760        
;;;761        /* Clear FLASH Proprietary readout protection error pending bit */
;;;762        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
000086  f44f7080          MOV      r0,#0x100
00008a  4908              LDR      r1,|L5.172|
00008c  6008              STR      r0,[r1,#0]
                  |L5.142|
;;;763      }
;;;764    #endif /* FLASH_SR_RDERR */  
;;;765      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
00008e  4807              LDR      r0,|L5.172|
000090  6800              LDR      r0,[r0,#0]
000092  f0000002          AND      r0,r0,#2
000096  b140              CBZ      r0,|L5.170|
;;;766      {
;;;767        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
000098  4805              LDR      r0,|L5.176|
00009a  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
00009c  f0400020          ORR      r0,r0,#0x20
0000a0  4903              LDR      r1,|L5.176|
0000a2  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;768        
;;;769        /* Clear FLASH Operation error pending bit */
;;;770        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
0000a4  2002              MOVS     r0,#2
0000a6  4901              LDR      r1,|L5.172|
0000a8  6008              STR      r0,[r1,#0]
                  |L5.170|
;;;771      }
;;;772    }
0000aa  4770              BX       lr
;;;773    
                          ENDP

                  |L5.172|
                          DCD      0x40023c0c
                  |L5.176|
                          DCD      pFlash

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;567      */
;;;568    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;569    { 
000002  4604              MOV      r4,r0
;;;570      uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;571      
;;;572      /* Clear Error Code */
;;;573      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000006  2000              MOVS     r0,#0
000008  4914              LDR      r1,|L6.92|
00000a  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;574      
;;;575      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;576         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;577         flag will be set */
;;;578      /* Get tick */
;;;579      tickstart = HAL_GetTick();
00000c  f7fffffe          BL       HAL_GetTick
000010  4605              MOV      r5,r0
;;;580    
;;;581      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
000012  e009              B        |L6.40|
                  |L6.20|
;;;582      { 
;;;583        if(Timeout != HAL_MAX_DELAY)
000014  1c60              ADDS     r0,r4,#1
000016  b138              CBZ      r0,|L6.40|
;;;584        {
;;;585          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
000018  b124              CBZ      r4,|L6.36|
00001a  f7fffffe          BL       HAL_GetTick
00001e  1b40              SUBS     r0,r0,r5
000020  42a0              CMP      r0,r4
000022  d901              BLS      |L6.40|
                  |L6.36|
;;;586          {
;;;587            return HAL_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L6.38|
;;;588          }
;;;589        } 
;;;590      }
;;;591    
;;;592      /* Check FLASH End of Operation flag  */
;;;593      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
;;;594      {
;;;595        /* Clear FLASH End of Operation pending bit */
;;;596        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;597      }
;;;598    #if defined(FLASH_SR_RDERR)  
;;;599      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;600                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;601    #else
;;;602      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;603                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;604    #endif /* FLASH_SR_RDERR */
;;;605      {
;;;606        /*Save the error code*/
;;;607        FLASH_SetErrorCode();
;;;608        return HAL_ERROR;
;;;609      }
;;;610    
;;;611      /* If there is no error flag set */
;;;612      return HAL_OK;
;;;613      
;;;614    }  
000026  bd70              POP      {r4-r6,pc}
                  |L6.40|
000028  480d              LDR      r0,|L6.96|
00002a  6800              LDR      r0,[r0,#0]            ;581
00002c  f4003080          AND      r0,r0,#0x10000        ;581
000030  2800              CMP      r0,#0                 ;581
000032  d1ef              BNE      |L6.20|
000034  480a              LDR      r0,|L6.96|
000036  6800              LDR      r0,[r0,#0]            ;593
000038  f0000001          AND      r0,r0,#1              ;593
00003c  b110              CBZ      r0,|L6.68|
00003e  2001              MOVS     r0,#1                 ;596
000040  4907              LDR      r1,|L6.96|
000042  6008              STR      r0,[r1,#0]            ;596
                  |L6.68|
000044  4806              LDR      r0,|L6.96|
000046  6800              LDR      r0,[r0,#0]            ;599
000048  f40070f9          AND      r0,r0,#0x1f2          ;599
00004c  b118              CBZ      r0,|L6.86|
00004e  f7fffffe          BL       FLASH_SetErrorCode
000052  2001              MOVS     r0,#1                 ;608
000054  e7e7              B        |L6.38|
                  |L6.86|
000056  2000              MOVS     r0,#0                 ;612
000058  e7e5              B        |L6.38|
;;;615    
                          ENDP

00005a  0000              DCW      0x0000
                  |L6.92|
                          DCD      pFlash
                  |L6.96|
                          DCD      0x40023c0c

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;399      */
;;;400    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;401    {
;;;402      /* Prevent unused argument(s) compilation warning */
;;;403      UNUSED(ReturnValue);
;;;404      /* NOTE : This function Should not be modified, when the callback is needed,
;;;405                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;406       */ 
;;;407    }
;;;408    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;553      */
;;;554    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L8.8|
;;;555    { 
;;;556       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;557    }  
000004  4770              BX       lr
;;;558      
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;276      */
;;;277    void HAL_FLASH_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;278    {
;;;279      uint32_t addresstmp = 0U;
000002  2400              MOVS     r4,#0
;;;280      
;;;281      /* Check FLASH operation error flags */
;;;282    #if defined(FLASH_SR_RDERR) 
;;;283      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
000004  4840              LDR      r0,|L9.264|
000006  6800              LDR      r0,[r0,#0]
000008  f40070f9          AND      r0,r0,#0x1f2
00000c  b1d8              CBZ      r0,|L9.70|
;;;284        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;285    #else
;;;286      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;287        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;288    #endif /* FLASH_SR_RDERR */
;;;289      {
;;;290        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
00000e  483f              LDR      r0,|L9.268|
000010  7800              LDRB     r0,[r0,#0]  ; pFlash
000012  2801              CMP      r0,#1
000014  d106              BNE      |L9.36|
;;;291        {
;;;292          /*return the faulty sector*/
;;;293          addresstmp = pFlash.Sector;
000016  483d              LDR      r0,|L9.268|
000018  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;294          pFlash.Sector = 0xFFFFFFFFU;
00001a  f04f30ff          MOV      r0,#0xffffffff
00001e  493b              LDR      r1,|L9.268|
000020  60c8              STR      r0,[r1,#0xc]  ; pFlash
000022  e008              B        |L9.54|
                  |L9.36|
;;;295        }
;;;296        else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
000024  4839              LDR      r0,|L9.268|
000026  7800              LDRB     r0,[r0,#0]  ; pFlash
000028  2802              CMP      r0,#2
00002a  d102              BNE      |L9.50|
;;;297        {
;;;298          /*return the faulty bank*/
;;;299          addresstmp = pFlash.Bank;
00002c  4837              LDR      r0,|L9.268|
00002e  6904              LDR      r4,[r0,#0x10]  ; pFlash
000030  e001              B        |L9.54|
                  |L9.50|
;;;300        }
;;;301        else
;;;302        {
;;;303          /*return the faulty address*/
;;;304          addresstmp = pFlash.Address;
000032  4836              LDR      r0,|L9.268|
000034  6944              LDR      r4,[r0,#0x14]  ; pFlash
                  |L9.54|
;;;305        }
;;;306        
;;;307        /*Save the Error code*/
;;;308        FLASH_SetErrorCode();
000036  f7fffffe          BL       FLASH_SetErrorCode
;;;309        
;;;310        /* FLASH error interrupt user callback */
;;;311        HAL_FLASH_OperationErrorCallback(addresstmp);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;312        
;;;313        /*Stop the procedure ongoing*/
;;;314        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000040  2000              MOVS     r0,#0
000042  4932              LDR      r1,|L9.268|
000044  7008              STRB     r0,[r1,#0]
                  |L9.70|
;;;315      }
;;;316      
;;;317      /* Check FLASH End of Operation flag  */
;;;318      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
000046  4830              LDR      r0,|L9.264|
000048  6800              LDR      r0,[r0,#0]
00004a  f0000001          AND      r0,r0,#1
00004e  2800              CMP      r0,#0
000050  d03e              BEQ      |L9.208|
;;;319      {
;;;320        /* Clear FLASH End of Operation pending bit */
;;;321        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000052  2001              MOVS     r0,#1
000054  492c              LDR      r1,|L9.264|
000056  6008              STR      r0,[r1,#0]
;;;322        
;;;323        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000058  482c              LDR      r0,|L9.268|
00005a  7800              LDRB     r0,[r0,#0]  ; pFlash
00005c  2801              CMP      r0,#1
00005e  d125              BNE      |L9.172|
;;;324        {
;;;325          /*Nb of sector to erased can be decreased*/
;;;326          pFlash.NbSectorsToErase--;
000060  482a              LDR      r0,|L9.268|
000062  6840              LDR      r0,[r0,#4]  ; pFlash
000064  1e40              SUBS     r0,r0,#1
000066  4929              LDR      r1,|L9.268|
000068  6048              STR      r0,[r1,#4]  ; pFlash
;;;327          
;;;328          /* Check if there are still sectors to erase*/
;;;329          if(pFlash.NbSectorsToErase != 0U)
00006a  4608              MOV      r0,r1
00006c  6840              LDR      r0,[r0,#4]  ; pFlash
00006e  b180              CBZ      r0,|L9.146|
;;;330          {
;;;331            addresstmp = pFlash.Sector;
000070  4608              MOV      r0,r1
000072  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;332            /*Indicate user which sector has been erased*/
;;;333            HAL_FLASH_EndOfOperationCallback(addresstmp);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;334            
;;;335            /*Increment sector number*/
;;;336            pFlash.Sector++;
00007a  4824              LDR      r0,|L9.268|
00007c  68c0              LDR      r0,[r0,#0xc]  ; pFlash
00007e  1c40              ADDS     r0,r0,#1
000080  4922              LDR      r1,|L9.268|
000082  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;337            addresstmp = pFlash.Sector;
000084  4608              MOV      r0,r1
000086  68c4              LDR      r4,[r0,#0xc]  ; pFlash
;;;338            FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
000088  7a01              LDRB     r1,[r0,#8]  ; pFlash
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       FLASH_Erase_Sector
000090  e01e              B        |L9.208|
                  |L9.146|
;;;339          }
;;;340          else
;;;341          {
;;;342            /*No more sectors to Erase, user callback can be called.*/
;;;343            /*Reset Sector and stop Erase sectors procedure*/
;;;344            pFlash.Sector = addresstmp = 0xFFFFFFFFU;
000092  f04f30ff          MOV      r0,#0xffffffff
000096  4604              MOV      r4,r0
000098  491c              LDR      r1,|L9.268|
00009a  60c8              STR      r0,[r1,#0xc]  ; pFlash
;;;345            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00009c  2000              MOVS     r0,#0
00009e  7008              STRB     r0,[r1,#0]
;;;346            
;;;347            /* Flush the caches to be sure of the data consistency */
;;;348            FLASH_FlushCaches() ;
0000a0  f7fffffe          BL       FLASH_FlushCaches
;;;349                    
;;;350            /* FLASH EOP interrupt user callback */
;;;351            HAL_FLASH_EndOfOperationCallback(addresstmp);
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000aa  e011              B        |L9.208|
                  |L9.172|
;;;352          }
;;;353        }
;;;354        else 
;;;355        {
;;;356          if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
0000ac  4817              LDR      r0,|L9.268|
0000ae  7800              LDRB     r0,[r0,#0]  ; pFlash
0000b0  2802              CMP      r0,#2
0000b2  d106              BNE      |L9.194|
;;;357          {
;;;358            /* MassErase ended. Return the selected bank */
;;;359            /* Flush the caches to be sure of the data consistency */
;;;360            FLASH_FlushCaches() ;
0000b4  f7fffffe          BL       FLASH_FlushCaches
;;;361    
;;;362            /* FLASH EOP interrupt user callback */
;;;363            HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
0000b8  4914              LDR      r1,|L9.268|
0000ba  6908              LDR      r0,[r1,#0x10]  ; pFlash
0000bc  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000c0  e003              B        |L9.202|
                  |L9.194|
;;;364          }
;;;365          else
;;;366          {
;;;367            /*Program ended. Return the selected address*/
;;;368            /* FLASH EOP interrupt user callback */
;;;369            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
0000c2  4912              LDR      r1,|L9.268|
0000c4  6948              LDR      r0,[r1,#0x14]  ; pFlash
0000c6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L9.202|
;;;370          }
;;;371          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000ca  2000              MOVS     r0,#0
0000cc  490f              LDR      r1,|L9.268|
0000ce  7008              STRB     r0,[r1,#0]
                  |L9.208|
;;;372        }
;;;373      }
;;;374      
;;;375      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000d0  480e              LDR      r0,|L9.268|
0000d2  7800              LDRB     r0,[r0,#0]  ; pFlash
0000d4  b9b8              CBNZ     r0,|L9.262|
;;;376      {
;;;377        /* Operation is completed, disable the PG, SER, SNB and MER Bits */
;;;378        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
0000d6  480c              LDR      r0,|L9.264|
0000d8  1d00              ADDS     r0,r0,#4
0000da  6800              LDR      r0,[r0,#0]
0000dc  f24801ff          MOV      r1,#0x80ff
0000e0  4388              BICS     r0,r0,r1
0000e2  4909              LDR      r1,|L9.264|
0000e4  1d09              ADDS     r1,r1,#4
0000e6  6008              STR      r0,[r1,#0]
;;;379    
;;;380        /* Disable End of FLASH Operation interrupt */
;;;381        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
0000e8  4608              MOV      r0,r1
0000ea  6800              LDR      r0,[r0,#0]
0000ec  f0207080          BIC      r0,r0,#0x1000000
0000f0  6008              STR      r0,[r1,#0]
;;;382        
;;;383        /* Disable Error source interrupt */
;;;384        __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
0000f2  4608              MOV      r0,r1
0000f4  6800              LDR      r0,[r0,#0]
0000f6  f0207000          BIC      r0,r0,#0x2000000
0000fa  6008              STR      r0,[r1,#0]
;;;385        
;;;386        /* Process Unlocked */
;;;387        __HAL_UNLOCK(&pFlash);
0000fc  bf00              NOP      
0000fe  2000              MOVS     r0,#0
000100  4902              LDR      r1,|L9.268|
000102  7608              STRB     r0,[r1,#0x18]
000104  bf00              NOP      
                  |L9.262|
;;;388      }
;;;389    }
000106  bd10              POP      {r4,pc}
;;;390    
                          ENDP

                  |L9.264|
                          DCD      0x40023c0c
                  |L9.268|
                          DCD      pFlash

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;472      */
;;;473    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L10.16|
;;;474    {
;;;475      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;476      FLASH->CR |= FLASH_CR_LOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0404000          ORR      r0,r0,#0x80000000
000008  4901              LDR      r1,|L10.16|
00000a  6008              STR      r0,[r1,#0]
;;;477      
;;;478      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;479    }
00000e  4770              BX       lr
;;;480    
                          ENDP

                  |L10.16|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;516      */
;;;517    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  b510              PUSH     {r4,lr}
;;;518    {
;;;519      /* Set the OPTSTRT bit in OPTCR register */
;;;520      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000002  4805              LDR      r0,|L11.24|
000004  7800              LDRB     r0,[r0,#0]
000006  f0400002          ORR      r0,r0,#2
00000a  4903              LDR      r1,|L11.24|
00000c  7008              STRB     r0,[r1,#0]
;;;521    
;;;522      /* Wait for last operation to be completed */
;;;523      return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
00000e  f24c3050          MOV      r0,#0xc350
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;524    }
000016  bd10              POP      {r4,pc}
;;;525    
                          ENDP

                  |L11.24|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;504      */
;;;505    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L12.16|
;;;506    {
;;;507      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;508      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;509      
;;;510      return HAL_OK;  
00000c  2000              MOVS     r0,#0
;;;511    }
00000e  4770              BX       lr
;;;512    
                          ENDP

                  |L12.16|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;484      */
;;;485    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4807              LDR      r0,|L13.32|
;;;486    {
;;;487      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b130              CBZ      r0,|L13.24|
;;;488      {
;;;489        /* Authorizes the Option Byte register programming */
;;;490        FLASH->OPTKEYR = FLASH_OPT_KEY1;
00000a  4806              LDR      r0,|L13.36|
00000c  4904              LDR      r1,|L13.32|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;491        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000012  4805              LDR      r0,|L13.40|
000014  6008              STR      r0,[r1,#0]
000016  e001              B        |L13.28|
                  |L13.24|
;;;492      }
;;;493      else
;;;494      {
;;;495        return HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L13.26|
;;;496      }  
;;;497      
;;;498      return HAL_OK;  
;;;499    }
00001a  4770              BX       lr
                  |L13.28|
00001c  2000              MOVS     r0,#0                 ;498
00001e  e7fc              B        |L13.26|
;;;500    
                          ENDP

                  |L13.32|
                          DCD      0x40023c14
                  |L13.36|
                          DCD      0x08192a3b
                  |L13.40|
                          DCD      0x4c5d6e7f

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;416      */
;;;417    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;418    {
;;;419      /* Prevent unused argument(s) compilation warning */
;;;420      UNUSED(ReturnValue);
;;;421      /* NOTE : This function Should not be modified, when the callback is needed,
;;;422                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;423       */ 
;;;424    }
;;;425    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;171      */
;;;172    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;173    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;174      HAL_StatusTypeDef status = HAL_ERROR;
00000c  f04f0801          MOV      r8,#1
;;;175      
;;;176      /* Process Locked */
;;;177      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481f              LDR      r0,|L15.144|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L15.32|
00001a  2002              MOVS     r0,#2
                  |L15.28|
;;;178      
;;;179      /* Check the parameters */
;;;180      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;181      
;;;182      /* Wait for last operation to be completed */
;;;183      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;184      
;;;185      if(status == HAL_OK)
;;;186      {
;;;187        if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;188        {
;;;189          /*Program byte (8-bit) at a specified address.*/
;;;190          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;191        }
;;;192        else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;193        {
;;;194          /*Program halfword (16-bit) at a specified address.*/
;;;195          FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;196        }
;;;197        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;198        {
;;;199          /*Program word (32-bit) at a specified address.*/
;;;200          FLASH_Program_Word(Address, (uint32_t) Data);
;;;201        }
;;;202        else
;;;203        {
;;;204          /*Program double word (64-bit) at a specified address.*/
;;;205          FLASH_Program_DoubleWord(Address, Data);
;;;206        }
;;;207        
;;;208        /* Wait for last operation to be completed */
;;;209        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;210        
;;;211        /* If the program operation is completed, disable the PG Bit */
;;;212        FLASH->CR &= (~FLASH_CR_PG);  
;;;213      }
;;;214      
;;;215      /* Process Unlocked */
;;;216      __HAL_UNLOCK(&pFlash);
;;;217      
;;;218      return status;
;;;219    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L15.32|
000020  2001              MOVS     r0,#1                 ;177
000022  491b              LDR      r1,|L15.144|
000024  7608              STRB     r0,[r1,#0x18]         ;177
000026  bf00              NOP                            ;177
000028  f24c3050          MOV      r0,#0xc350            ;183
00002c  f7fffffe          BL       FLASH_WaitForLastOperation
000030  4680              MOV      r8,r0                 ;183
000032  f1b80f00          CMP      r8,#0                 ;185
000036  d123              BNE      |L15.128|
000038  b926              CBNZ     r6,|L15.68|
00003a  b2e1              UXTB     r1,r4                 ;190
00003c  4638              MOV      r0,r7                 ;190
00003e  f7fffffe          BL       FLASH_Program_Byte
000042  e012              B        |L15.106|
                  |L15.68|
000044  2e01              CMP      r6,#1                 ;192
000046  d104              BNE      |L15.82|
000048  b2a1              UXTH     r1,r4                 ;195
00004a  4638              MOV      r0,r7                 ;195
00004c  f7fffffe          BL       FLASH_Program_HalfWord
000050  e00b              B        |L15.106|
                  |L15.82|
000052  2e02              CMP      r6,#2                 ;197
000054  d104              BNE      |L15.96|
000056  4621              MOV      r1,r4                 ;200
000058  4638              MOV      r0,r7                 ;200
00005a  f7fffffe          BL       FLASH_Program_Word
00005e  e004              B        |L15.106|
                  |L15.96|
000060  4622              MOV      r2,r4                 ;205
000062  462b              MOV      r3,r5                 ;205
000064  4638              MOV      r0,r7                 ;205
000066  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L15.106|
00006a  f24c3050          MOV      r0,#0xc350            ;209
00006e  f7fffffe          BL       FLASH_WaitForLastOperation
000072  4680              MOV      r8,r0                 ;209
000074  4807              LDR      r0,|L15.148|
000076  6800              LDR      r0,[r0,#0]            ;212
000078  f0200001          BIC      r0,r0,#1              ;212
00007c  4905              LDR      r1,|L15.148|
00007e  6008              STR      r0,[r1,#0]            ;212
                  |L15.128|
000080  bf00              NOP                            ;216
000082  2000              MOVS     r0,#0                 ;216
000084  4902              LDR      r1,|L15.144|
000086  7608              STRB     r0,[r1,#0x18]         ;216
000088  bf00              NOP                            ;216
00008a  4640              MOV      r0,r8                 ;218
00008c  e7c6              B        |L15.28|
;;;220    
                          ENDP

00008e  0000              DCW      0x0000
                  |L15.144|
                          DCD      pFlash
                  |L15.148|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;229      */
;;;230    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;231    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;232      HAL_StatusTypeDef status = HAL_OK;
00000c  f04f0800          MOV      r8,#0
;;;233      
;;;234      /* Process Locked */
;;;235      __HAL_LOCK(&pFlash);
000010  bf00              NOP      
000012  481b              LDR      r0,|L16.128|
000014  7e00              LDRB     r0,[r0,#0x18]  ; pFlash
000016  2801              CMP      r0,#1
000018  d102              BNE      |L16.32|
00001a  2002              MOVS     r0,#2
                  |L16.28|
;;;236    
;;;237      /* Check the parameters */
;;;238      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;239    
;;;240      /* Enable End of FLASH Operation interrupt */
;;;241      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;242      
;;;243      /* Enable Error source interrupt */
;;;244      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;245    
;;;246      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
;;;247      pFlash.Address = Address;
;;;248    
;;;249      if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;250      {
;;;251        /*Program byte (8-bit) at a specified address.*/
;;;252          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;253      }
;;;254      else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;255      {
;;;256        /*Program halfword (16-bit) at a specified address.*/
;;;257        FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;258      }
;;;259      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;260      {
;;;261        /*Program word (32-bit) at a specified address.*/
;;;262        FLASH_Program_Word(Address, (uint32_t) Data);
;;;263      }
;;;264      else
;;;265      {
;;;266        /*Program double word (64-bit) at a specified address.*/
;;;267        FLASH_Program_DoubleWord(Address, Data);
;;;268      }
;;;269    
;;;270      return status;
;;;271    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L16.32|
000020  2001              MOVS     r0,#1                 ;235
000022  4917              LDR      r1,|L16.128|
000024  7608              STRB     r0,[r1,#0x18]         ;235
000026  bf00              NOP                            ;235
000028  4816              LDR      r0,|L16.132|
00002a  6800              LDR      r0,[r0,#0]            ;241
00002c  f0407080          ORR      r0,r0,#0x1000000      ;241
000030  4914              LDR      r1,|L16.132|
000032  6008              STR      r0,[r1,#0]            ;241
000034  4608              MOV      r0,r1                 ;244
000036  6800              LDR      r0,[r0,#0]            ;244
000038  f0407000          ORR      r0,r0,#0x2000000      ;244
00003c  6008              STR      r0,[r1,#0]            ;244
00003e  2003              MOVS     r0,#3                 ;246
000040  490f              LDR      r1,|L16.128|
000042  7008              STRB     r0,[r1,#0]            ;246
000044  4608              MOV      r0,r1                 ;247
000046  6147              STR      r7,[r0,#0x14]         ;247  ; pFlash
000048  b926              CBNZ     r6,|L16.84|
00004a  b2e1              UXTB     r1,r4                 ;252
00004c  4638              MOV      r0,r7                 ;252
00004e  f7fffffe          BL       FLASH_Program_Byte
000052  e012              B        |L16.122|
                  |L16.84|
000054  2e01              CMP      r6,#1                 ;254
000056  d104              BNE      |L16.98|
000058  b2a1              UXTH     r1,r4                 ;257
00005a  4638              MOV      r0,r7                 ;257
00005c  f7fffffe          BL       FLASH_Program_HalfWord
000060  e00b              B        |L16.122|
                  |L16.98|
000062  2e02              CMP      r6,#2                 ;259
000064  d104              BNE      |L16.112|
000066  4621              MOV      r1,r4                 ;262
000068  4638              MOV      r0,r7                 ;262
00006a  f7fffffe          BL       FLASH_Program_Word
00006e  e004              B        |L16.122|
                  |L16.112|
000070  4622              MOV      r2,r4                 ;267
000072  462b              MOV      r3,r5                 ;267
000074  4638              MOV      r0,r7                 ;267
000076  f7fffffe          BL       FLASH_Program_DoubleWord
                  |L16.122|
00007a  4640              MOV      r0,r8                 ;270
00007c  e7ce              B        |L16.28|
;;;272    
                          ENDP

00007e  0000              DCW      0x0000
                  |L16.128|
                          DCD      pFlash
                  |L16.132|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;448      */
;;;449    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  2000              MOVS     r0,#0
;;;450    {
;;;451      HAL_StatusTypeDef status = HAL_OK;
;;;452    
;;;453      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000002  4909              LDR      r1,|L17.40|
000004  6809              LDR      r1,[r1,#0]
000006  f0014100          AND      r1,r1,#0x80000000
00000a  b159              CBZ      r1,|L17.36|
;;;454      {
;;;455        /* Authorize the FLASH Registers access */
;;;456        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000c  4907              LDR      r1,|L17.44|
00000e  4a06              LDR      r2,|L17.40|
000010  3a0c              SUBS     r2,r2,#0xc
000012  6011              STR      r1,[r2,#0]
;;;457        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
000014  4906              LDR      r1,|L17.48|
000016  6011              STR      r1,[r2,#0]
;;;458    
;;;459        /* Verify Flash is unlocked */
;;;460        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000018  4903              LDR      r1,|L17.40|
00001a  6809              LDR      r1,[r1,#0]
00001c  f0014100          AND      r1,r1,#0x80000000
000020  b101              CBZ      r1,|L17.36|
;;;461        {
;;;462          status = HAL_ERROR;
000022  2001              MOVS     r0,#1
                  |L17.36|
;;;463        }
;;;464      }
;;;465    
;;;466      return status;
;;;467    }
000024  4770              BX       lr
;;;468    
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
                          DCD      0x40023c10
                  |L17.44|
                          DCD      0x45670123
                  |L17.48|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
