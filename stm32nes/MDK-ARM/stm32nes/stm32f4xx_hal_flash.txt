; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal_flash.o --depend=stm32nes\stm32f4xx_hal_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal_flash.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_SetErrorCode||, CODE, READONLY, ALIGN=2

                  FLASH_SetErrorCode PROC
;;;722      */
;;;723    static void FLASH_SetErrorCode(void)
000000  4920              LDR      r1,|L1.132|
;;;724    { 
;;;725      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
000002  6808              LDR      r0,[r1,#0]
000004  f0100f10          TST      r0,#0x10
;;;726      {
;;;727       pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
000008  481f              LDR      r0,|L1.136|
00000a  d005              BEQ      |L1.24|
00000c  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00000e  f0420210          ORR      r2,r2,#0x10
000012  61c2              STR      r2,[r0,#0x1c]  ; pFlash
;;;728       
;;;729       /* Clear FLASH write protection error pending bit */
;;;730       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
000014  2210              MOVS     r2,#0x10
000016  600a              STR      r2,[r1,#0]
                  |L1.24|
;;;731      }
;;;732      
;;;733      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
000018  680a              LDR      r2,[r1,#0]
00001a  f0120f20          TST      r2,#0x20
00001e  d005              BEQ      |L1.44|
;;;734      {
;;;735       pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
000020  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
000022  f0420208          ORR      r2,r2,#8
000026  61c2              STR      r2,[r0,#0x1c]  ; pFlash
;;;736       
;;;737       /* Clear FLASH Programming alignment error pending bit */
;;;738       __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
000028  2220              MOVS     r2,#0x20
00002a  600a              STR      r2,[r1,#0]
                  |L1.44|
;;;739      }
;;;740      
;;;741      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
00002c  680a              LDR      r2,[r1,#0]
00002e  f0120f40          TST      r2,#0x40
000032  d005              BEQ      |L1.64|
;;;742      {
;;;743        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
000034  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
000036  f0420204          ORR      r2,r2,#4
00003a  61c2              STR      r2,[r0,#0x1c]  ; pFlash
;;;744        
;;;745        /* Clear FLASH Programming parallelism error pending bit */
;;;746        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
00003c  2240              MOVS     r2,#0x40
00003e  600a              STR      r2,[r1,#0]
                  |L1.64|
;;;747      }
;;;748      
;;;749      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
000040  680a              LDR      r2,[r1,#0]
000042  f0120f80          TST      r2,#0x80
000046  d005              BEQ      |L1.84|
;;;750      {
;;;751        pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
000048  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00004a  f0420202          ORR      r2,r2,#2
00004e  61c2              STR      r2,[r0,#0x1c]  ; pFlash
;;;752        
;;;753        /* Clear FLASH Programming sequence error pending bit */
;;;754        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
000050  2280              MOVS     r2,#0x80
000052  600a              STR      r2,[r1,#0]
                  |L1.84|
;;;755      }
;;;756    #if defined(FLASH_SR_RDERR) 
;;;757      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
000054  680a              LDR      r2,[r1,#0]
000056  f4127f80          TST      r2,#0x100
00005a  d006              BEQ      |L1.106|
;;;758      {
;;;759        pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
00005c  69c2              LDR      r2,[r0,#0x1c]  ; pFlash
00005e  f0420201          ORR      r2,r2,#1
000062  61c2              STR      r2,[r0,#0x1c]  ; pFlash
;;;760        
;;;761        /* Clear FLASH Proprietary readout protection error pending bit */
;;;762        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
000064  f44f7280          MOV      r2,#0x100
000068  600a              STR      r2,[r1,#0]
                  |L1.106|
;;;763      }
;;;764    #endif /* FLASH_SR_RDERR */  
;;;765      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
00006a  680a              LDR      r2,[r1,#0]
00006c  f0120f02          TST      r2,#2
;;;766      {
;;;767        pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
;;;768        
;;;769        /* Clear FLASH Operation error pending bit */
;;;770        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
;;;771      }
;;;772    }
000070  bf08              IT       EQ
000072  4770              BXEQ     lr
000074  69c2              LDR      r2,[r0,#0x1c]         ;767  ; pFlash
000076  f0420220          ORR      r2,r2,#0x20           ;767
00007a  61c2              STR      r2,[r0,#0x1c]         ;767  ; pFlash
00007c  2002              MOVS     r0,#2                 ;770
00007e  6008              STR      r0,[r1,#0]            ;770
000080  4770              BX       lr
;;;773    
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      0x40023c0c
                  |L1.136|
                          DCD      ||.bss||

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;567      */
;;;568    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;569    { 
;;;570      uint32_t tickstart = 0U;
;;;571      
;;;572      /* Clear Error Code */
;;;573      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000002  4915              LDR      r1,|L2.88|
000004  4604              MOV      r4,r0                 ;569
000006  2000              MOVS     r0,#0
000008  61c8              STR      r0,[r1,#0x1c]  ; pFlash
;;;574      
;;;575      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;576         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;577         flag will be set */
;;;578      /* Get tick */
;;;579      tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
;;;580    
;;;581      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
00000e  4d13              LDR      r5,|L2.92|
000010  4606              MOV      r6,r0                 ;579
000012  6828              LDR      r0,[r5,#0]
000014  f4103f80          TST      r0,#0x10000
000018  d00f              BEQ      |L2.58|
;;;582      { 
;;;583        if(Timeout != HAL_MAX_DELAY)
00001a  bf00              NOP      
                  |L2.28|
00001c  f1b43fff          CMP      r4,#0xffffffff
000020  d007              BEQ      |L2.50|
;;;584        {
;;;585          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
000022  b124              CBZ      r4,|L2.46|
000024  f7fffffe          BL       HAL_GetTick
000028  1b80              SUBS     r0,r0,r6
00002a  42a0              CMP      r0,r4
00002c  d901              BLS      |L2.50|
                  |L2.46|
;;;586          {
;;;587            return HAL_TIMEOUT;
00002e  2003              MOVS     r0,#3
;;;588          }
;;;589        } 
;;;590      }
;;;591    
;;;592      /* Check FLASH End of Operation flag  */
;;;593      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
;;;594      {
;;;595        /* Clear FLASH End of Operation pending bit */
;;;596        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;597      }
;;;598    #if defined(FLASH_SR_RDERR)  
;;;599      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;600                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;601    #else
;;;602      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;603                               FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;604    #endif /* FLASH_SR_RDERR */
;;;605      {
;;;606        /*Save the error code*/
;;;607        FLASH_SetErrorCode();
;;;608        return HAL_ERROR;
;;;609      }
;;;610    
;;;611      /* If there is no error flag set */
;;;612      return HAL_OK;
;;;613      
;;;614    }  
000030  bd70              POP      {r4-r6,pc}
                  |L2.50|
000032  6828              LDR      r0,[r5,#0]            ;581
000034  f4103f80          TST      r0,#0x10000           ;581
000038  d1f0              BNE      |L2.28|
                  |L2.58|
00003a  6828              LDR      r0,[r5,#0]            ;593
00003c  f0100f01          TST      r0,#1                 ;593
000040  bf1c              ITT      NE                    ;596
000042  2001              MOVNE    r0,#1                 ;596
000044  6028              STRNE    r0,[r5,#0]            ;596
000046  6828              LDR      r0,[r5,#0]            ;599
000048  f41070f9          ANDS     r0,r0,#0x1f2          ;599
00004c  bf08              IT       EQ
00004e  bd70              POPEQ    {r4-r6,pc}
000050  f7fffffe          BL       FLASH_SetErrorCode
000054  2001              MOVS     r0,#1                 ;608
000056  bd70              POP      {r4-r6,pc}
;;;615    
                          ENDP

                  |L2.88|
                          DCD      ||.bss||
                  |L2.92|
                          DCD      0x40023c0c

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;399      */
;;;400    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;401    {
;;;402      /* Prevent unused argument(s) compilation warning */
;;;403      UNUSED(ReturnValue);
;;;404      /* NOTE : This function Should not be modified, when the callback is needed,
;;;405                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;406       */ 
;;;407    }
;;;408    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;553      */
;;;554    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L4.8|
;;;555    { 
;;;556       return pFlash.ErrorCode;
000002  69c0              LDR      r0,[r0,#0x1c]  ; pFlash
;;;557    }  
000004  4770              BX       lr
;;;558      
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      ||.bss||

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;276      */
;;;277    void HAL_FLASH_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;278    {
;;;279      uint32_t addresstmp = 0U;
;;;280      
;;;281      /* Check FLASH operation error flags */
;;;282    #if defined(FLASH_SR_RDERR) 
;;;283      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
000004  4f30              LDR      r7,|L5.200|
000006  6838              LDR      r0,[r7,#0]
;;;284        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
;;;285    #else
;;;286      if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
;;;287        FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
;;;288    #endif /* FLASH_SR_RDERR */
;;;289      {
;;;290        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
000008  4c30              LDR      r4,|L5.204|
00000a  f4107ff9          TST      r0,#0x1f2             ;283
00000e  f04f0500          MOV      r5,#0                 ;283
000012  d00d              BEQ      |L5.48|
000014  7820              LDRB     r0,[r4,#0]  ; pFlash
000016  2801              CMP      r0,#1
000018  d032              BEQ      |L5.128|
;;;291        {
;;;292          /*return the faulty sector*/
;;;293          addresstmp = pFlash.Sector;
;;;294          pFlash.Sector = 0xFFFFFFFFU;
;;;295        }
;;;296        else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
00001a  7820              LDRB     r0,[r4,#0]  ; pFlash
00001c  2802              CMP      r0,#2
;;;297        {
;;;298          /*return the faulty bank*/
;;;299          addresstmp = pFlash.Bank;
00001e  bf0c              ITE      EQ
000020  6926              LDREQ    r6,[r4,#0x10]  ; pFlash
;;;300        }
;;;301        else
;;;302        {
;;;303          /*return the faulty address*/
;;;304          addresstmp = pFlash.Address;
000022  6966              LDRNE    r6,[r4,#0x14]  ; pFlash
                  |L5.36|
;;;305        }
;;;306        
;;;307        /*Save the Error code*/
;;;308        FLASH_SetErrorCode();
000024  f7fffffe          BL       FLASH_SetErrorCode
;;;309        
;;;310        /* FLASH error interrupt user callback */
;;;311        HAL_FLASH_OperationErrorCallback(addresstmp);
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
;;;312        
;;;313        /*Stop the procedure ongoing*/
;;;314        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00002e  7025              STRB     r5,[r4,#0]
                  |L5.48|
;;;315      }
;;;316      
;;;317      /* Check FLASH End of Operation flag  */
;;;318      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
000030  6838              LDR      r0,[r7,#0]
000032  f0100f01          TST      r0,#1
000036  d00c              BEQ      |L5.82|
;;;319      {
;;;320        /* Clear FLASH End of Operation pending bit */
;;;321        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000038  2001              MOVS     r0,#1
00003a  6038              STR      r0,[r7,#0]
;;;322        
;;;323        if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
00003c  7820              LDRB     r0,[r4,#0]  ; pFlash
00003e  2801              CMP      r0,#1
000040  d023              BEQ      |L5.138|
;;;324        {
;;;325          /*Nb of sector to erased can be decreased*/
;;;326          pFlash.NbSectorsToErase--;
;;;327          
;;;328          /* Check if there are still sectors to erase*/
;;;329          if(pFlash.NbSectorsToErase != 0U)
;;;330          {
;;;331            addresstmp = pFlash.Sector;
;;;332            /*Indicate user which sector has been erased*/
;;;333            HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;334            
;;;335            /*Increment sector number*/
;;;336            pFlash.Sector++;
;;;337            addresstmp = pFlash.Sector;
;;;338            FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
;;;339          }
;;;340          else
;;;341          {
;;;342            /*No more sectors to Erase, user callback can be called.*/
;;;343            /*Reset Sector and stop Erase sectors procedure*/
;;;344            pFlash.Sector = addresstmp = 0xFFFFFFFFU;
;;;345            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;346            
;;;347            /* Flush the caches to be sure of the data consistency */
;;;348            FLASH_FlushCaches() ;
;;;349                    
;;;350            /* FLASH EOP interrupt user callback */
;;;351            HAL_FLASH_EndOfOperationCallback(addresstmp);
;;;352          }
;;;353        }
;;;354        else 
;;;355        {
;;;356          if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
000042  7820              LDRB     r0,[r4,#0]  ; pFlash
000044  2802              CMP      r0,#2
;;;357          {
;;;358            /* MassErase ended. Return the selected bank */
;;;359            /* Flush the caches to be sure of the data consistency */
;;;360            FLASH_FlushCaches() ;
;;;361    
;;;362            /* FLASH EOP interrupt user callback */
;;;363            HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
;;;364          }
;;;365          else
;;;366          {
;;;367            /*Program ended. Return the selected address*/
;;;368            /* FLASH EOP interrupt user callback */
;;;369            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
000046  bf18              IT       NE
000048  6960              LDRNE    r0,[r4,#0x14]  ; pFlash
00004a  d038              BEQ      |L5.190|
                  |L5.76|
00004c  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
;;;370          }
;;;371          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
000050  7025              STRB     r5,[r4,#0]
                  |L5.82|
;;;372        }
;;;373      }
;;;374      
;;;375      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
000052  7820              LDRB     r0,[r4,#0]  ; pFlash
000054  2800              CMP      r0,#0
;;;376      {
;;;377        /* Operation is completed, disable the PG, SER, SNB and MER Bits */
;;;378        CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
;;;379    
;;;380        /* Disable End of FLASH Operation interrupt */
;;;381        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
;;;382        
;;;383        /* Disable Error source interrupt */
;;;384        __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
;;;385        
;;;386        /* Process Unlocked */
;;;387        __HAL_UNLOCK(&pFlash);
;;;388      }
;;;389    }
000056  bf18              IT       NE
000058  e8bd81f0          POPNE    {r4-r8,pc}
00005c  481c              LDR      r0,|L5.208|
00005e  6801              LDR      r1,[r0,#0]            ;378
000060  f02101ff          BIC      r1,r1,#0xff           ;378
000064  f4214100          BIC      r1,r1,#0x8000         ;378
000068  6001              STR      r1,[r0,#0]            ;378
00006a  6801              LDR      r1,[r0,#0]            ;381
00006c  f0217180          BIC      r1,r1,#0x1000000      ;381
000070  6001              STR      r1,[r0,#0]            ;381
000072  6801              LDR      r1,[r0,#0]            ;384
000074  f0217100          BIC      r1,r1,#0x2000000      ;384
000078  6001              STR      r1,[r0,#0]            ;384
00007a  7625              STRB     r5,[r4,#0x18]         ;387
00007c  e8bd81f0          POP      {r4-r8,pc}
                  |L5.128|
000080  68e6              LDR      r6,[r4,#0xc]          ;293  ; pFlash
000082  f04f30ff          MOV      r0,#0xffffffff        ;294
000086  60e0              STR      r0,[r4,#0xc]          ;294  ; pFlash
000088  e7cc              B        |L5.36|
                  |L5.138|
00008a  6860              LDR      r0,[r4,#4]            ;326  ; pFlash
00008c  1e40              SUBS     r0,r0,#1              ;326
00008e  6060              STR      r0,[r4,#4]            ;326  ; pFlash
000090  6860              LDR      r0,[r4,#4]            ;329  ; pFlash
000092  b150              CBZ      r0,|L5.170|
000094  68e0              LDR      r0,[r4,#0xc]          ;331  ; pFlash
000096  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
00009a  68e0              LDR      r0,[r4,#0xc]          ;336  ; pFlash
00009c  1c40              ADDS     r0,r0,#1              ;336
00009e  60e0              STR      r0,[r4,#0xc]          ;336  ; pFlash
0000a0  68e0              LDR      r0,[r4,#0xc]          ;337  ; pFlash
0000a2  7a21              LDRB     r1,[r4,#8]            ;338  ; pFlash
0000a4  f7fffffe          BL       FLASH_Erase_Sector
0000a8  e7d3              B        |L5.82|
                  |L5.170|
0000aa  f04f36ff          MOV      r6,#0xffffffff        ;344
0000ae  60e6              STR      r6,[r4,#0xc]          ;344  ; pFlash
0000b0  7025              STRB     r5,[r4,#0]            ;345
0000b2  f7fffffe          BL       FLASH_FlushCaches
0000b6  4630              MOV      r0,r6                 ;351
0000b8  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000bc  e7c9              B        |L5.82|
                  |L5.190|
0000be  f7fffffe          BL       FLASH_FlushCaches
0000c2  6920              LDR      r0,[r4,#0x10]         ;363  ; pFlash
0000c4  e7c2              B        |L5.76|
;;;390    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L5.200|
                          DCD      0x40023c0c
                  |L5.204|
                          DCD      ||.bss||
                  |L5.208|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;472      */
;;;473    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L6.16|
;;;474    {
;;;475      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;476      FLASH->CR |= FLASH_CR_LOCK;
000002  6801              LDR      r1,[r0,#0]
000004  f0414100          ORR      r1,r1,#0x80000000
000008  6001              STR      r1,[r0,#0]
;;;477      
;;;478      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;479    }
00000c  4770              BX       lr
;;;480    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;516      */
;;;517    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  4804              LDR      r0,|L7.20|
;;;518    {
;;;519      /* Set the OPTSTRT bit in OPTCR register */
;;;520      *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000002  7801              LDRB     r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  7001              STRB     r1,[r0,#0]
;;;521    
;;;522      /* Wait for last operation to be completed */
;;;523      return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
00000a  f24c3050          MOV      r0,#0xc350
00000e  f7ffbffe          B.W      FLASH_WaitForLastOperation
;;;524    }
;;;525    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;504      */
;;;505    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L8.16|
;;;506    {
;;;507      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;508      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;509      
;;;510      return HAL_OK;  
00000a  2000              MOVS     r0,#0
;;;511    }
00000c  4770              BX       lr
;;;512    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;484      */
;;;485    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4806              LDR      r0,|L9.28|
;;;486    {
;;;487      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0100f01          TST      r0,#1
;;;488      {
;;;489        /* Authorizes the Option Byte register programming */
;;;490        FLASH->OPTKEYR = FLASH_OPT_KEY1;
;;;491        FLASH->OPTKEYR = FLASH_OPT_KEY2;
;;;492      }
;;;493      else
;;;494      {
;;;495        return HAL_ERROR;
000008  bf04              ITT      EQ
00000a  2001              MOVEQ    r0,#1
;;;496      }  
;;;497      
;;;498      return HAL_OK;  
;;;499    }
00000c  4770              BXEQ     lr
00000e  4904              LDR      r1,|L9.32|
000010  4804              LDR      r0,|L9.36|
000012  6001              STR      r1,[r0,#0]            ;490
000014  4904              LDR      r1,|L9.40|
000016  6001              STR      r1,[r0,#0]            ;491
000018  2000              MOVS     r0,#0                 ;498
00001a  4770              BX       lr
;;;500    
                          ENDP

                  |L9.28|
                          DCD      0x40023c14
                  |L9.32|
                          DCD      0x08192a3b
                  |L9.36|
                          DCD      0x40023c08
                  |L9.40|
                          DCD      0x4c5d6e7f

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;416      */
;;;417    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;418    {
;;;419      /* Prevent unused argument(s) compilation warning */
;;;420      UNUSED(ReturnValue);
;;;421      /* NOTE : This function Should not be modified, when the callback is needed,
;;;422                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;423       */ 
;;;424    }
;;;425    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;171      */
;;;172    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;173    {
;;;174      HAL_StatusTypeDef status = HAL_ERROR;
;;;175      
;;;176      /* Process Locked */
;;;177      __HAL_LOCK(&pFlash);
000004  4f2d              LDR      r7,|L11.188|
000006  4681              MOV      r9,r0                 ;173
000008  4615              MOV      r5,r2                 ;173
00000a  7e38              LDRB     r0,[r7,#0x18]  ; pFlash
00000c  4698              MOV      r8,r3                 ;173
00000e  460e              MOV      r6,r1                 ;173
000010  2801              CMP      r0,#1
000012  bf04              ITT      EQ
000014  2002              MOVEQ    r0,#2
;;;178      
;;;179      /* Check the parameters */
;;;180      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;181      
;;;182      /* Wait for last operation to be completed */
;;;183      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;184      
;;;185      if(status == HAL_OK)
;;;186      {
;;;187        if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;188        {
;;;189          /*Program byte (8-bit) at a specified address.*/
;;;190          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;191        }
;;;192        else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;193        {
;;;194          /*Program halfword (16-bit) at a specified address.*/
;;;195          FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;196        }
;;;197        else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;198        {
;;;199          /*Program word (32-bit) at a specified address.*/
;;;200          FLASH_Program_Word(Address, (uint32_t) Data);
;;;201        }
;;;202        else
;;;203        {
;;;204          /*Program double word (64-bit) at a specified address.*/
;;;205          FLASH_Program_DoubleWord(Address, Data);
;;;206        }
;;;207        
;;;208        /* Wait for last operation to be completed */
;;;209        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;210        
;;;211        /* If the program operation is completed, disable the PG Bit */
;;;212        FLASH->CR &= (~FLASH_CR_PG);  
;;;213      }
;;;214      
;;;215      /* Process Unlocked */
;;;216      __HAL_UNLOCK(&pFlash);
;;;217      
;;;218      return status;
;;;219    }
000016  e8bd87f0          POPEQ    {r4-r10,pc}
00001a  2001              MOVS     r0,#1                 ;177
00001c  7638              STRB     r0,[r7,#0x18]         ;177
00001e  f24c3050          MOV      r0,#0xc350            ;183
000022  f7fffffe          BL       FLASH_WaitForLastOperation
000026  bb08              CBNZ     r0,|L11.108|
000028  4c25              LDR      r4,|L11.192|
00002a  f1b90f00          CMP      r9,#0                 ;187
00002e  d021              BEQ      |L11.116|
000030  f1b90f01          CMP      r9,#1                 ;192
000034  d02a              BEQ      |L11.140|
000036  6820              LDR      r0,[r4,#0]            ;192
000038  f1b90f02          CMP      r9,#2                 ;197
00003c  f4207040          BIC      r0,r0,#0x300          ;197
000040  6020              STR      r0,[r4,#0]            ;197
000042  6820              LDR      r0,[r4,#0]            ;197
000044  d030              BEQ      |L11.168|
000046  f4407040          ORR      r0,r0,#0x300          ;197
00004a  6020              STR      r0,[r4,#0]            ;197
00004c  6820              LDR      r0,[r4,#0]            ;197
00004e  f0400001          ORR      r0,r0,#1              ;197
000052  6020              STR      r0,[r4,#0]            ;197
000054  6035              STR      r5,[r6,#0]            ;197
000056  f8c68004          STR      r8,[r6,#4]            ;197
00005a  bf00              NOP                            ;209
                  |L11.92|
00005c  f24c3050          MOV      r0,#0xc350            ;209
000060  f7fffffe          BL       FLASH_WaitForLastOperation
000064  6821              LDR      r1,[r4,#0]            ;212
000066  f0210101          BIC      r1,r1,#1              ;212
00006a  6021              STR      r1,[r4,#0]            ;212
                  |L11.108|
00006c  2100              MOVS     r1,#0                 ;216
00006e  7639              STRB     r1,[r7,#0x18]         ;216
000070  e8bd87f0          POP      {r4-r10,pc}
                  |L11.116|
000074  6820              LDR      r0,[r4,#0]
000076  f4207040          BIC      r0,r0,#0x300
00007a  6020              STR      r0,[r4,#0]
00007c  6820              LDR      r0,[r4,#0]
00007e  6020              STR      r0,[r4,#0]
000080  6820              LDR      r0,[r4,#0]
000082  f0400001          ORR      r0,r0,#1
000086  6020              STR      r0,[r4,#0]
000088  7035              STRB     r5,[r6,#0]
00008a  e7e7              B        |L11.92|
                  |L11.140|
00008c  6820              LDR      r0,[r4,#0]            ;190
00008e  f4207040          BIC      r0,r0,#0x300          ;190
000092  6020              STR      r0,[r4,#0]            ;190
000094  6820              LDR      r0,[r4,#0]            ;190
000096  f4407080          ORR      r0,r0,#0x100          ;190
00009a  6020              STR      r0,[r4,#0]            ;190
00009c  6820              LDR      r0,[r4,#0]            ;190
00009e  f0400001          ORR      r0,r0,#1              ;190
0000a2  6020              STR      r0,[r4,#0]            ;190
0000a4  8035              STRH     r5,[r6,#0]            ;190
0000a6  e7d9              B        |L11.92|
                  |L11.168|
0000a8  f4407000          ORR      r0,r0,#0x200          ;195
0000ac  6020              STR      r0,[r4,#0]            ;195
0000ae  6820              LDR      r0,[r4,#0]            ;195
0000b0  f0400001          ORR      r0,r0,#1              ;195
0000b4  6020              STR      r0,[r4,#0]            ;195
0000b6  6035              STR      r5,[r6,#0]            ;195
0000b8  e7d0              B        |L11.92|
;;;220    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L11.188|
                          DCD      ||.bss||
                  |L11.192|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;229      */
;;;230    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  b470              PUSH     {r4-r6}
;;;231    {
;;;232      HAL_StatusTypeDef status = HAL_OK;
;;;233      
;;;234      /* Process Locked */
;;;235      __HAL_LOCK(&pFlash);
000002  4c3c              LDR      r4,|L12.244|
000004  4605              MOV      r5,r0                 ;231
000006  2000              MOVS     r0,#0                 ;232
000008  f894c018          LDRB     r12,[r4,#0x18]  ; pFlash
00000c  f1bc0f01          CMP      r12,#1
000010  bf02              ITTT     EQ
000012  2002              MOVEQ    r0,#2
;;;236    
;;;237      /* Check the parameters */
;;;238      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;239    
;;;240      /* Enable End of FLASH Operation interrupt */
;;;241      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;242      
;;;243      /* Enable Error source interrupt */
;;;244      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;245    
;;;246      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
;;;247      pFlash.Address = Address;
;;;248    
;;;249      if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
;;;250      {
;;;251        /*Program byte (8-bit) at a specified address.*/
;;;252          FLASH_Program_Byte(Address, (uint8_t) Data);
;;;253      }
;;;254      else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
;;;255      {
;;;256        /*Program halfword (16-bit) at a specified address.*/
;;;257        FLASH_Program_HalfWord(Address, (uint16_t) Data);
;;;258      }
;;;259      else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
;;;260      {
;;;261        /*Program word (32-bit) at a specified address.*/
;;;262        FLASH_Program_Word(Address, (uint32_t) Data);
;;;263      }
;;;264      else
;;;265      {
;;;266        /*Program double word (64-bit) at a specified address.*/
;;;267        FLASH_Program_DoubleWord(Address, Data);
;;;268      }
;;;269    
;;;270      return status;
;;;271    }
000014  bc70              POPEQ    {r4-r6}
000016  4770              BXEQ     lr
000018  f04f0c01          MOV      r12,#1                ;235
00001c  f884c018          STRB     r12,[r4,#0x18]        ;235
000020  f8dfc0d4          LDR      r12,|L12.248|
000024  f8dc6000          LDR      r6,[r12,#0]           ;241
000028  f0467680          ORR      r6,r6,#0x1000000      ;241
00002c  f8cc6000          STR      r6,[r12,#0]           ;241
000030  f8dc6000          LDR      r6,[r12,#0]           ;244
000034  f0467600          ORR      r6,r6,#0x2000000      ;244
000038  f8cc6000          STR      r6,[r12,#0]           ;244
00003c  2603              MOVS     r6,#3                 ;246
00003e  7026              STRB     r6,[r4,#0]            ;246
000040  6161              STR      r1,[r4,#0x14]         ;247  ; pFlash
000042  b1cd              CBZ      r5,|L12.120|
000044  2d01              CMP      r5,#1                 ;254
000046  d02a              BEQ      |L12.158|
000048  2d02              CMP      r5,#2                 ;259
00004a  d03d              BEQ      |L12.200|
00004c  f8dc4000          LDR      r4,[r12,#0]           ;259
000050  f4247440          BIC      r4,r4,#0x300          ;259
000054  f8cc4000          STR      r4,[r12,#0]           ;259
000058  f8dc4000          LDR      r4,[r12,#0]           ;259
00005c  f4447440          ORR      r4,r4,#0x300          ;259
000060  f8cc4000          STR      r4,[r12,#0]           ;259
000064  f8dc4000          LDR      r4,[r12,#0]           ;259
000068  f0440401          ORR      r4,r4,#1              ;259
00006c  f8cc4000          STR      r4,[r12,#0]           ;259
000070  600a              STR      r2,[r1,#0]            ;259
000072  604b              STR      r3,[r1,#4]            ;259
000074  bc70              POP      {r4-r6}
000076  4770              BX       lr
                  |L12.120|
000078  f8dc3000          LDR      r3,[r12,#0]
00007c  f4237340          BIC      r3,r3,#0x300
000080  f8cc3000          STR      r3,[r12,#0]
000084  f8dc3000          LDR      r3,[r12,#0]
000088  f8cc3000          STR      r3,[r12,#0]
00008c  f8dc3000          LDR      r3,[r12,#0]
000090  f0430301          ORR      r3,r3,#1
000094  f8cc3000          STR      r3,[r12,#0]
000098  700a              STRB     r2,[r1,#0]
00009a  bc70              POP      {r4-r6}
00009c  4770              BX       lr
                  |L12.158|
00009e  f8dc3000          LDR      r3,[r12,#0]
0000a2  f4237340          BIC      r3,r3,#0x300
0000a6  f8cc3000          STR      r3,[r12,#0]
0000aa  f8dc3000          LDR      r3,[r12,#0]
0000ae  f4437380          ORR      r3,r3,#0x100
0000b2  f8cc3000          STR      r3,[r12,#0]
0000b6  f8dc3000          LDR      r3,[r12,#0]
0000ba  f0430301          ORR      r3,r3,#1
0000be  f8cc3000          STR      r3,[r12,#0]
0000c2  800a              STRH     r2,[r1,#0]
0000c4  bc70              POP      {r4-r6}
0000c6  4770              BX       lr
                  |L12.200|
0000c8  f8dc3000          LDR      r3,[r12,#0]
0000cc  f4237340          BIC      r3,r3,#0x300
0000d0  f8cc3000          STR      r3,[r12,#0]
0000d4  f8dc3000          LDR      r3,[r12,#0]
0000d8  f4437300          ORR      r3,r3,#0x200
0000dc  f8cc3000          STR      r3,[r12,#0]
0000e0  f8dc3000          LDR      r3,[r12,#0]
0000e4  f0430301          ORR      r3,r3,#1
0000e8  f8cc3000          STR      r3,[r12,#0]
0000ec  600a              STR      r2,[r1,#0]
0000ee  bc70              POP      {r4-r6}
0000f0  4770              BX       lr
;;;272    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L12.244|
                          DCD      ||.bss||
                  |L12.248|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;448      */
;;;449    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  4908              LDR      r1,|L13.36|
;;;450    {
;;;451      HAL_StatusTypeDef status = HAL_OK;
000002  2000              MOVS     r0,#0
;;;452    
;;;453      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
000004  680a              LDR      r2,[r1,#0]
000006  f0124f00          TST      r2,#0x80000000
;;;454      {
;;;455        /* Authorize the FLASH Registers access */
;;;456        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
;;;457        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
;;;458    
;;;459        /* Verify Flash is unlocked */
;;;460        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
;;;461        {
;;;462          status = HAL_ERROR;
;;;463        }
;;;464      }
;;;465    
;;;466      return status;
;;;467    }
00000a  bf08              IT       EQ
00000c  4770              BXEQ     lr
00000e  4b06              LDR      r3,|L13.40|
000010  4a06              LDR      r2,|L13.44|
000012  6013              STR      r3,[r2,#0]            ;456
000014  4b06              LDR      r3,|L13.48|
000016  6013              STR      r3,[r2,#0]            ;457
000018  6809              LDR      r1,[r1,#0]            ;460
00001a  f0114f00          TST      r1,#0x80000000        ;460
00001e  bf18              IT       NE                    ;462
000020  2001              MOVNE    r0,#1                 ;462
000022  4770              BX       lr
;;;468    
                          ENDP

                  |L13.36|
                          DCD      0x40023c10
                  |L13.40|
                          DCD      0x45670123
                  |L13.44|
                          DCD      0x40023c04
                  |L13.48|
                          DCD      0xcdef89ab

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pFlash
                          %        32

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH|
#line 402
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX|
#line 587
|__asm___21_stm32f4xx_hal_flash_c_48aa8f3e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
