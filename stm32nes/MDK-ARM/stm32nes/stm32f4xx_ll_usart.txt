; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_usart.o --depend=stm32nes\stm32f4xx_ll_usart.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_usart.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usart.c]
                          THUMB

                          AREA ||i.LL_APB1_GRP1_ForceReset||, CODE, READONLY, ALIGN=2

                  LL_APB1_GRP1_ForceReset PROC
;;;1426   */
;;;1427   __STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
000000  4902              LDR      r1,|L1.12|
;;;1428   {
;;;1429     SET_BIT(RCC->APB1RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L1.12|
000008  6011              STR      r1,[r2,#0]
;;;1430   }
00000a  4770              BX       lr
;;;1431   
                          ENDP

                  |L1.12|
                          DCD      0x40023820

                          AREA ||i.LL_APB1_GRP1_ReleaseReset||, CODE, READONLY, ALIGN=2

                  LL_APB1_GRP1_ReleaseReset PROC
;;;1498   */
;;;1499   __STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
000000  4902              LDR      r1,|L2.12|
;;;1500   {
;;;1501     CLEAR_BIT(RCC->APB1RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  6011              STR      r1,[r2,#0]
;;;1502   }
00000a  4770              BX       lr
;;;1503   
                          ENDP

                  |L2.12|
                          DCD      0x40023820

                          AREA ||i.LL_APB2_GRP1_ForceReset||, CODE, READONLY, ALIGN=2

                  LL_APB2_GRP1_ForceReset PROC
;;;1906   */
;;;1907   __STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
000000  4902              LDR      r1,|L3.12|
;;;1908   {
;;;1909     SET_BIT(RCC->APB2RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L3.12|
000008  6011              STR      r1,[r2,#0]
;;;1910   }
00000a  4770              BX       lr
;;;1911   
                          ENDP

                  |L3.12|
                          DCD      0x40023824

                          AREA ||i.LL_APB2_GRP1_ReleaseReset||, CODE, READONLY, ALIGN=2

                  LL_APB2_GRP1_ReleaseReset PROC
;;;1964   */
;;;1965   __STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
000000  4902              LDR      r1,|L4.12|
;;;1966   {
;;;1967     CLEAR_BIT(RCC->APB2RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L4.12|
000008  6011              STR      r1,[r2,#0]
;;;1968   }
00000a  4770              BX       lr
;;;1969   
                          ENDP

                  |L4.12|
                          DCD      0x40023824

                          AREA ||i.LL_USART_ClockInit||, CODE, READONLY, ALIGN=1

                  LL_USART_ClockInit PROC
;;;433      */
;;;434    ErrorStatus LL_USART_ClockInit(USART_TypeDef *USARTx, LL_USART_ClockInitTypeDef *USART_ClockInitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;435    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;436      ErrorStatus status = SUCCESS;
000006  2601              MOVS     r6,#1
;;;437    
;;;438      /* Check USART Instance and Clock signal output parameters */
;;;439      assert_param(IS_UART_INSTANCE(USARTx));
;;;440      assert_param(IS_LL_USART_CLOCKOUTPUT(USART_ClockInitStruct->ClockOutput));
;;;441    
;;;442      /* USART needs to be in disabled state, in order to be able to configure some bits in
;;;443         CRx registers */
;;;444      if (LL_USART_IsEnabled(USARTx) == 0U)
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LL_USART_IsEnabled
00000e  b9a8              CBNZ     r0,|L5.60|
;;;445      {
;;;446        /*---------------------------- USART CR2 Configuration -----------------------*/
;;;447        /* If Clock signal has to be output */
;;;448        if (USART_ClockInitStruct->ClockOutput == LL_USART_CLOCK_DISABLE)
000010  6828              LDR      r0,[r5,#0]
000012  b930              CBNZ     r0,|L5.34|
;;;449        {
;;;450          /* Deactivate Clock signal delivery :
;;;451           * - Disable Clock Output:        USART_CR2_CLKEN cleared
;;;452           */
;;;453          LL_USART_DisableSCLKOutput(USARTx);
000014  bf00              NOP      
000016  6920              LDR      r0,[r4,#0x10]
000018  f4206000          BIC      r0,r0,#0x800
00001c  6120              STR      r0,[r4,#0x10]
00001e  bf00              NOP      
000020  e00d              B        |L5.62|
                  |L5.34|
;;;454        }
;;;455        else
;;;456        {
;;;457          /* Ensure USART instance is USART capable */
;;;458          assert_param(IS_USART_INSTANCE(USARTx));
;;;459    
;;;460          /* Check clock related parameters */
;;;461          assert_param(IS_LL_USART_CLOCKPOLARITY(USART_ClockInitStruct->ClockPolarity));
;;;462          assert_param(IS_LL_USART_CLOCKPHASE(USART_ClockInitStruct->ClockPhase));
;;;463          assert_param(IS_LL_USART_LASTBITCLKOUTPUT(USART_ClockInitStruct->LastBitClockPulse));
;;;464    
;;;465          /*---------------------------- USART CR2 Configuration -----------------------
;;;466           * Configure USARTx CR2 (Clock signal related bits) with parameters:
;;;467           * - Enable Clock Output:         USART_CR2_CLKEN set
;;;468           * - Clock Polarity:              USART_CR2_CPOL bit according to USART_ClockInitStruct->ClockPolarity value
;;;469           * - Clock Phase:                 USART_CR2_CPHA bit according to USART_ClockInitStruct->ClockPhase value
;;;470           * - Last Bit Clock Pulse Output: USART_CR2_LBCL bit according to USART_ClockInitStruct->LastBitClockPulse value.
;;;471           */
;;;472          MODIFY_REG(USARTx->CR2,
000022  6868              LDR      r0,[r5,#4]
000024  f4406000          ORR      r0,r0,#0x800
000028  68a9              LDR      r1,[r5,#8]
00002a  4308              ORRS     r0,r0,r1
00002c  68e9              LDR      r1,[r5,#0xc]
00002e  4308              ORRS     r0,r0,r1
000030  6921              LDR      r1,[r4,#0x10]
000032  f4216170          BIC      r1,r1,#0xf00
000036  4308              ORRS     r0,r0,r1
000038  6120              STR      r0,[r4,#0x10]
00003a  e000              B        |L5.62|
                  |L5.60|
;;;473                     USART_CR2_CLKEN | USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL,
;;;474                     USART_CR2_CLKEN | USART_ClockInitStruct->ClockPolarity |
;;;475                     USART_ClockInitStruct->ClockPhase | USART_ClockInitStruct->LastBitClockPulse);
;;;476        }
;;;477      }
;;;478      /* Else (USART not in Disabled state => return ERROR */
;;;479      else
;;;480      {
;;;481        status = ERROR;
00003c  2600              MOVS     r6,#0
                  |L5.62|
;;;482      }
;;;483    
;;;484      return (status);
00003e  4630              MOV      r0,r6
;;;485    }
000040  bd70              POP      {r4-r6,pc}
;;;486    
                          ENDP


                          AREA ||i.LL_USART_ClockStructInit||, CODE, READONLY, ALIGN=1

                  LL_USART_ClockStructInit PROC
;;;492      */
;;;493    void LL_USART_ClockStructInit(LL_USART_ClockInitTypeDef *USART_ClockInitStruct)
000000  2100              MOVS     r1,#0
;;;494    {
;;;495      /* Set LL_USART_ClockInitStruct fields with default values */
;;;496      USART_ClockInitStruct->ClockOutput       = LL_USART_CLOCK_DISABLE;
000002  6001              STR      r1,[r0,#0]
;;;497      USART_ClockInitStruct->ClockPolarity     = LL_USART_POLARITY_LOW;            /* Not relevant when ClockOutput = LL_USART_CLOCK_DISABLE */
000004  6041              STR      r1,[r0,#4]
;;;498      USART_ClockInitStruct->ClockPhase        = LL_USART_PHASE_1EDGE;             /* Not relevant when ClockOutput = LL_USART_CLOCK_DISABLE */
000006  6081              STR      r1,[r0,#8]
;;;499      USART_ClockInitStruct->LastBitClockPulse = LL_USART_LASTCLKPULSE_NO_OUTPUT;  /* Not relevant when ClockOutput = LL_USART_CLOCK_DISABLE */
000008  60c1              STR      r1,[r0,#0xc]
;;;500    }
00000a  4770              BX       lr
;;;501    
                          ENDP


                          AREA ||i.LL_USART_DeInit||, CODE, READONLY, ALIGN=2

                  LL_USART_DeInit PROC
;;;142      */
;;;143    ErrorStatus LL_USART_DeInit(USART_TypeDef *USARTx)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
000002  4604              MOV      r4,r0
;;;145      ErrorStatus status = SUCCESS;
000004  2501              MOVS     r5,#1
;;;146    
;;;147      /* Check the parameters */
;;;148      assert_param(IS_UART_INSTANCE(USARTx));
;;;149    
;;;150      if (USARTx == USART1)
000006  482e              LDR      r0,|L7.192|
000008  4284              CMP      r4,r0
00000a  d106              BNE      |L7.26|
;;;151      {
;;;152        /* Force reset of USART clock */
;;;153        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       LL_APB2_GRP1_ForceReset
;;;154    
;;;155        /* Release reset of USART clock */
;;;156        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
000012  2010              MOVS     r0,#0x10
000014  f7fffffe          BL       LL_APB2_GRP1_ReleaseReset
000018  e050              B        |L7.188|
                  |L7.26|
;;;157      }
;;;158      else if (USARTx == USART2)
00001a  482a              LDR      r0,|L7.196|
00001c  4284              CMP      r4,r0
00001e  d108              BNE      |L7.50|
;;;159      {
;;;160        /* Force reset of USART clock */
;;;161        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART2);
000020  f44f3000          MOV      r0,#0x20000
000024  f7fffffe          BL       LL_APB1_GRP1_ForceReset
;;;162    
;;;163        /* Release reset of USART clock */
;;;164        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART2);
000028  f44f3000          MOV      r0,#0x20000
00002c  f7fffffe          BL       LL_APB1_GRP1_ReleaseReset
000030  e044              B        |L7.188|
                  |L7.50|
;;;165      }
;;;166    #if defined(USART3)
;;;167      else if (USARTx == USART3)
000032  4825              LDR      r0,|L7.200|
000034  4284              CMP      r4,r0
000036  d108              BNE      |L7.74|
;;;168      {
;;;169        /* Force reset of USART clock */
;;;170        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART3);
000038  f44f2080          MOV      r0,#0x40000
00003c  f7fffffe          BL       LL_APB1_GRP1_ForceReset
;;;171    
;;;172        /* Release reset of USART clock */
;;;173        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART3);
000040  f44f2080          MOV      r0,#0x40000
000044  f7fffffe          BL       LL_APB1_GRP1_ReleaseReset
000048  e038              B        |L7.188|
                  |L7.74|
;;;174      }
;;;175    #endif /* USART3 */
;;;176    #if defined(USART6)
;;;177      else if (USARTx == USART6)
00004a  4820              LDR      r0,|L7.204|
00004c  4284              CMP      r4,r0
00004e  d106              BNE      |L7.94|
;;;178      {
;;;179        /* Force reset of USART clock */
;;;180        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART6);
000050  2020              MOVS     r0,#0x20
000052  f7fffffe          BL       LL_APB2_GRP1_ForceReset
;;;181    
;;;182        /* Release reset of USART clock */
;;;183        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART6);
000056  2020              MOVS     r0,#0x20
000058  f7fffffe          BL       LL_APB2_GRP1_ReleaseReset
00005c  e02e              B        |L7.188|
                  |L7.94|
;;;184      }
;;;185    #endif /* USART6 */
;;;186    #if defined(UART4)
;;;187      else if (USARTx == UART4)
00005e  481c              LDR      r0,|L7.208|
000060  4284              CMP      r4,r0
000062  d108              BNE      |L7.118|
;;;188      {
;;;189        /* Force reset of UART clock */
;;;190        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART4);
000064  f44f2000          MOV      r0,#0x80000
000068  f7fffffe          BL       LL_APB1_GRP1_ForceReset
;;;191    
;;;192        /* Release reset of UART clock */
;;;193        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART4);
00006c  f44f2000          MOV      r0,#0x80000
000070  f7fffffe          BL       LL_APB1_GRP1_ReleaseReset
000074  e022              B        |L7.188|
                  |L7.118|
;;;194      }
;;;195    #endif /* UART4 */
;;;196    #if defined(UART5)
;;;197      else if (USARTx == UART5)
000076  4817              LDR      r0,|L7.212|
000078  4284              CMP      r4,r0
00007a  d108              BNE      |L7.142|
;;;198      {
;;;199        /* Force reset of UART clock */
;;;200        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART5);
00007c  f44f1080          MOV      r0,#0x100000
000080  f7fffffe          BL       LL_APB1_GRP1_ForceReset
;;;201    
;;;202        /* Release reset of UART clock */
;;;203        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART5);
000084  f44f1080          MOV      r0,#0x100000
000088  f7fffffe          BL       LL_APB1_GRP1_ReleaseReset
00008c  e016              B        |L7.188|
                  |L7.142|
;;;204      }
;;;205    #endif /* UART5 */
;;;206    #if defined(UART7)
;;;207      else if (USARTx == UART7)
00008e  4812              LDR      r0,|L7.216|
000090  4284              CMP      r4,r0
000092  d108              BNE      |L7.166|
;;;208      {
;;;209        /* Force reset of UART clock */
;;;210        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART7);
000094  f04f4080          MOV      r0,#0x40000000
000098  f7fffffe          BL       LL_APB1_GRP1_ForceReset
;;;211    
;;;212        /* Release reset of UART clock */
;;;213        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART7);
00009c  f04f4080          MOV      r0,#0x40000000
0000a0  f7fffffe          BL       LL_APB1_GRP1_ReleaseReset
0000a4  e00a              B        |L7.188|
                  |L7.166|
;;;214      }
;;;215    #endif /* UART7 */
;;;216    #if defined(UART8)
;;;217      else if (USARTx == UART8)
0000a6  480d              LDR      r0,|L7.220|
0000a8  4284              CMP      r4,r0
0000aa  d106              BNE      |L7.186|
;;;218      {
;;;219        /* Force reset of UART clock */
;;;220        LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART8);
0000ac  0540              LSLS     r0,r0,#21
0000ae  f7fffffe          BL       LL_APB1_GRP1_ForceReset
;;;221    
;;;222        /* Release reset of UART clock */
;;;223        LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART8);
0000b2  0560              LSLS     r0,r4,#21
0000b4  f7fffffe          BL       LL_APB1_GRP1_ReleaseReset
0000b8  e000              B        |L7.188|
                  |L7.186|
;;;224      }
;;;225    #endif /* UART8 */
;;;226    #if defined(UART9)
;;;227      else if (USARTx == UART9)
;;;228      {
;;;229        /* Force reset of UART clock */
;;;230        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_UART9);
;;;231    
;;;232        /* Release reset of UART clock */
;;;233        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_UART9);
;;;234      }
;;;235    #endif /* UART9 */
;;;236    #if defined(UART10)
;;;237      else if (USARTx == UART10)
;;;238      {
;;;239        /* Force reset of UART clock */
;;;240        LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_UART10);
;;;241    
;;;242        /* Release reset of UART clock */
;;;243        LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_UART10);
;;;244      }
;;;245    #endif /* UART10 */
;;;246      else
;;;247      {
;;;248        status = ERROR;
0000ba  2500              MOVS     r5,#0
                  |L7.188|
;;;249      }
;;;250    
;;;251      return (status);
0000bc  4628              MOV      r0,r5
;;;252    }
0000be  bd70              POP      {r4-r6,pc}
;;;253    
                          ENDP

                  |L7.192|
                          DCD      0x40011000
                  |L7.196|
                          DCD      0x40004400
                  |L7.200|
                          DCD      0x40004800
                  |L7.204|
                          DCD      0x40011400
                  |L7.208|
                          DCD      0x40004c00
                  |L7.212|
                          DCD      0x40005000
                  |L7.216|
                          DCD      0x40007800
                  |L7.220|
                          DCD      0x40007c00

                          AREA ||i.LL_USART_Init||, CODE, READONLY, ALIGN=2

                  LL_USART_Init PROC
;;;266      */
;;;267    ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;268    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;269      ErrorStatus status = ERROR;
000008  2700              MOVS     r7,#0
;;;270      uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
00000a  2600              MOVS     r6,#0
;;;271      LL_RCC_ClocksTypeDef rcc_clocks;
;;;272    
;;;273      /* Check the parameters */
;;;274      assert_param(IS_UART_INSTANCE(USARTx));
;;;275      assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
;;;276      assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
;;;277      assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
;;;278      assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
;;;279      assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
;;;280      assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
;;;281      assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
;;;282    
;;;283      /* USART needs to be in disabled state, in order to be able to configure some bits in
;;;284         CRx registers */
;;;285      if (LL_USART_IsEnabled(USARTx) == 0U)
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LL_USART_IsEnabled
000012  2800              CMP      r0,#0
000014  d14f              BNE      |L8.182|
;;;286      {
;;;287        /*---------------------------- USART CR1 Configuration -----------------------
;;;288         * Configure USARTx CR1 (USART Word Length, Parity, Mode and Oversampling bits) with parameters:
;;;289         * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
;;;290         * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
;;;291         * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
;;;292         * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
;;;293         */
;;;294        MODIFY_REG(USARTx->CR1,
000016  68e9              LDR      r1,[r5,#0xc]
000018  6868              LDR      r0,[r5,#4]
00001a  4308              ORRS     r0,r0,r1
00001c  6929              LDR      r1,[r5,#0x10]
00001e  4308              ORRS     r0,r0,r1
000020  69a9              LDR      r1,[r5,#0x18]
000022  4308              ORRS     r0,r0,r1
000024  68e1              LDR      r1,[r4,#0xc]
000026  f249620c          MOV      r2,#0x960c
00002a  4391              BICS     r1,r1,r2
00002c  4308              ORRS     r0,r0,r1
00002e  60e0              STR      r0,[r4,#0xc]
;;;295                   (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
;;;296                    USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
;;;297                   (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
;;;298                    USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
;;;299    
;;;300        /*---------------------------- USART CR2 Configuration -----------------------
;;;301         * Configure USARTx CR2 (Stop bits) with parameters:
;;;302         * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
;;;303         * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
;;;304         */
;;;305        LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
000030  68a8              LDR      r0,[r5,#8]
000032  6921              LDR      r1,[r4,#0x10]
000034  f4215140          BIC      r1,r1,#0x3000
000038  4301              ORRS     r1,r1,r0
00003a  6121              STR      r1,[r4,#0x10]
00003c  bf00              NOP      
;;;306    
;;;307        /*---------------------------- USART CR3 Configuration -----------------------
;;;308         * Configure USARTx CR3 (Hardware Flow Control) with parameters:
;;;309         * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
;;;310         */
;;;311        LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
00003e  6968              LDR      r0,[r5,#0x14]
000040  6961              LDR      r1,[r4,#0x14]
000042  f4217140          BIC      r1,r1,#0x300
000046  4301              ORRS     r1,r1,r0
000048  6161              STR      r1,[r4,#0x14]
00004a  bf00              NOP      
;;;312    
;;;313        /*---------------------------- USART BRR Configuration -----------------------
;;;314         * Retrieve Clock frequency used for USART Peripheral
;;;315         */
;;;316        LL_RCC_GetSystemClocksFreq(&rcc_clocks);
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       LL_RCC_GetSystemClocksFreq
;;;317        if (USARTx == USART1)
000052  481b              LDR      r0,|L8.192|
000054  4284              CMP      r4,r0
000056  d101              BNE      |L8.92|
;;;318        {
;;;319          periphclk = rcc_clocks.PCLK2_Frequency;
000058  9e03              LDR      r6,[sp,#0xc]
00005a  e021              B        |L8.160|
                  |L8.92|
;;;320        }
;;;321        else if (USARTx == USART2)
00005c  4819              LDR      r0,|L8.196|
00005e  4284              CMP      r4,r0
000060  d101              BNE      |L8.102|
;;;322        {
;;;323          periphclk = rcc_clocks.PCLK1_Frequency;
000062  9e02              LDR      r6,[sp,#8]
000064  e01c              B        |L8.160|
                  |L8.102|
;;;324        }
;;;325    #if defined(USART3)
;;;326        else if (USARTx == USART3)
000066  4818              LDR      r0,|L8.200|
000068  4284              CMP      r4,r0
00006a  d101              BNE      |L8.112|
;;;327        {
;;;328          periphclk = rcc_clocks.PCLK1_Frequency;
00006c  9e02              LDR      r6,[sp,#8]
00006e  e017              B        |L8.160|
                  |L8.112|
;;;329        }
;;;330    #endif /* USART3 */
;;;331    #if defined(USART6)
;;;332        else if (USARTx == USART6)
000070  4816              LDR      r0,|L8.204|
000072  4284              CMP      r4,r0
000074  d101              BNE      |L8.122|
;;;333        {
;;;334          periphclk = rcc_clocks.PCLK2_Frequency;
000076  9e03              LDR      r6,[sp,#0xc]
000078  e012              B        |L8.160|
                  |L8.122|
;;;335        }
;;;336    #endif /* USART6 */
;;;337    #if defined(UART4)
;;;338        else if (USARTx == UART4)
00007a  4815              LDR      r0,|L8.208|
00007c  4284              CMP      r4,r0
00007e  d101              BNE      |L8.132|
;;;339        {
;;;340          periphclk = rcc_clocks.PCLK1_Frequency;
000080  9e02              LDR      r6,[sp,#8]
000082  e00d              B        |L8.160|
                  |L8.132|
;;;341        }
;;;342    #endif /* UART4 */
;;;343    #if defined(UART5)
;;;344        else if (USARTx == UART5)
000084  4813              LDR      r0,|L8.212|
000086  4284              CMP      r4,r0
000088  d101              BNE      |L8.142|
;;;345        {
;;;346          periphclk = rcc_clocks.PCLK1_Frequency;
00008a  9e02              LDR      r6,[sp,#8]
00008c  e008              B        |L8.160|
                  |L8.142|
;;;347        }
;;;348    #endif /* UART5 */
;;;349    #if defined(UART7)
;;;350        else if (USARTx == UART7)
00008e  4812              LDR      r0,|L8.216|
000090  4284              CMP      r4,r0
000092  d101              BNE      |L8.152|
;;;351        {
;;;352          periphclk = rcc_clocks.PCLK1_Frequency;
000094  9e02              LDR      r6,[sp,#8]
000096  e003              B        |L8.160|
                  |L8.152|
;;;353        }
;;;354    #endif /* UART7 */
;;;355    #if defined(UART8)
;;;356        else if (USARTx == UART8)
000098  4810              LDR      r0,|L8.220|
00009a  4284              CMP      r4,r0
00009c  d100              BNE      |L8.160|
;;;357        {
;;;358          periphclk = rcc_clocks.PCLK1_Frequency;
00009e  9e02              LDR      r6,[sp,#8]
                  |L8.160|
;;;359        }
;;;360    #endif /* UART8 */
;;;361    #if defined(UART9)
;;;362        else if (USARTx == UART9)
;;;363        {
;;;364          periphclk = rcc_clocks.PCLK1_Frequency;
;;;365        }
;;;366    #endif /* UART9 */
;;;367    #if defined(UART10)
;;;368        else if (USARTx == UART10)
;;;369        {
;;;370          periphclk = rcc_clocks.PCLK1_Frequency;
;;;371        }
;;;372    #endif /* UART10 */
;;;373        else
;;;374        {
;;;375          /* Nothing to do, as error code is already assigned to ERROR value */
;;;376        }
;;;377    
;;;378        /* Configure the USART Baud Rate :
;;;379           - valid baud rate value (different from 0) is required
;;;380           - Peripheral clock as returned by RCC service, should be valid (different from 0).
;;;381        */
;;;382        if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
0000a0  b14e              CBZ      r6,|L8.182|
;;;383            && (USART_InitStruct->BaudRate != 0U))
0000a2  6828              LDR      r0,[r5,#0]
0000a4  b138              CBZ      r0,|L8.182|
;;;384        {
;;;385          status = SUCCESS;
0000a6  2701              MOVS     r7,#1
;;;386          LL_USART_SetBaudRate(USARTx,
0000a8  4631              MOV      r1,r6
0000aa  4620              MOV      r0,r4
0000ac  682b              LDR      r3,[r5,#0]
0000ae  69aa              LDR      r2,[r5,#0x18]
0000b0  f7fffffe          BL       LL_USART_SetBaudRate
;;;387                               periphclk,
;;;388                               USART_InitStruct->OverSampling,
;;;389                               USART_InitStruct->BaudRate);
;;;390    
;;;391          /* Check BRR is greater than or equal to 16d */
;;;392          assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
;;;393    
;;;394          /* Check BRR is greater than or equal to 16d */
;;;395          assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
0000b4  bf00              NOP      
                  |L8.182|
;;;396        }
;;;397      }
;;;398      /* Endif (=> USART not in Disabled state => return ERROR) */
;;;399    
;;;400      return (status);
0000b6  4638              MOV      r0,r7
;;;401    }
0000b8  b004              ADD      sp,sp,#0x10
0000ba  e8bd81f0          POP      {r4-r8,pc}
;;;402    
                          ENDP

0000be  0000              DCW      0x0000
                  |L8.192|
                          DCD      0x40011000
                  |L8.196|
                          DCD      0x40004400
                  |L8.200|
                          DCD      0x40004800
                  |L8.204|
                          DCD      0x40011400
                  |L8.208|
                          DCD      0x40004c00
                  |L8.212|
                          DCD      0x40005000
                  |L8.216|
                          DCD      0x40007800
                  |L8.220|
                          DCD      0x40007c00

                          AREA ||i.LL_USART_IsEnabled||, CODE, READONLY, ALIGN=1

                  LL_USART_IsEnabled PROC
;;;449      */
;;;450    __STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
000000  4601              MOV      r1,r0
;;;451    {
;;;452      return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
000002  68c8              LDR      r0,[r1,#0xc]
000004  f3c03040          UBFX     r0,r0,#13,#1
;;;453    }
000008  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.LL_USART_SetBaudRate||, CODE, READONLY, ALIGN=1

                  LL_USART_SetBaudRate PROC
;;;1034     */
;;;1035   __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
000000  b5f0              PUSH     {r4-r7,lr}
;;;1036                                             uint32_t BaudRate)
;;;1037   {
;;;1038     if (OverSampling == LL_USART_OVERSAMPLING_8)
000002  f5b24f00          CMP      r2,#0x8000
000006  d14e              BNE      |L10.166|
;;;1039     {
;;;1040       USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
000008  eb0104c1          ADD      r4,r1,r1,LSL #3
00000c  eb041401          ADD      r4,r4,r1,LSL #4
000010  005d              LSLS     r5,r3,#1
000012  fbb4f4f5          UDIV     r4,r4,r5
000016  2564              MOVS     r5,#0x64
000018  fbb4f4f5          UDIV     r4,r4,r5
00001c  0125              LSLS     r5,r4,#4
00001e  eb0104c1          ADD      r4,r1,r1,LSL #3
000022  eb041401          ADD      r4,r4,r1,LSL #4
000026  005e              LSLS     r6,r3,#1
000028  fbb4f4f6          UDIV     r4,r4,r6
00002c  eb0106c1          ADD      r6,r1,r1,LSL #3
000030  eb061601          ADD      r6,r6,r1,LSL #4
000034  005f              LSLS     r7,r3,#1
000036  fbb6f6f7          UDIV     r6,r6,r7
00003a  2764              MOVS     r7,#0x64
00003c  fbb6f6f7          UDIV     r6,r6,r7
000040  eb0607c6          ADD      r7,r6,r6,LSL #3
000044  eb071606          ADD      r6,r7,r6,LSL #4
000048  eba40486          SUB      r4,r4,r6,LSL #2
00004c  2632              MOVS     r6,#0x32
00004e  eb0604c4          ADD      r4,r6,r4,LSL #3
000052  2664              MOVS     r6,#0x64
000054  fbb4f4f6          UDIV     r4,r4,r6
000058  f00404f8          AND      r4,r4,#0xf8
00005c  eb050544          ADD      r5,r5,r4,LSL #1
000060  eb0104c1          ADD      r4,r1,r1,LSL #3
000064  eb041401          ADD      r4,r4,r1,LSL #4
000068  005e              LSLS     r6,r3,#1
00006a  fbb4f4f6          UDIV     r4,r4,r6
00006e  eb0106c1          ADD      r6,r1,r1,LSL #3
000072  eb061601          ADD      r6,r6,r1,LSL #4
000076  005f              LSLS     r7,r3,#1
000078  fbb6f6f7          UDIV     r6,r6,r7
00007c  2764              MOVS     r7,#0x64
00007e  fbb6f6f7          UDIV     r6,r6,r7
000082  eb0607c6          ADD      r7,r6,r6,LSL #3
000086  eb071606          ADD      r6,r7,r6,LSL #4
00008a  eba40486          SUB      r4,r4,r6,LSL #2
00008e  2632              MOVS     r6,#0x32
000090  eb0604c4          ADD      r4,r6,r4,LSL #3
000094  2664              MOVS     r6,#0x64
000096  fbb4f4f6          UDIV     r4,r4,r6
00009a  f0040407          AND      r4,r4,#7
00009e  442c              ADD      r4,r4,r5
0000a0  b2a4              UXTH     r4,r4
0000a2  6084              STR      r4,[r0,#8]
0000a4  e04c              B        |L10.320|
                  |L10.166|
;;;1041     }
;;;1042     else
;;;1043     {
;;;1044       USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
0000a6  eb0104c1          ADD      r4,r1,r1,LSL #3
0000aa  eb041401          ADD      r4,r4,r1,LSL #4
0000ae  009d              LSLS     r5,r3,#2
0000b0  fbb4f4f5          UDIV     r4,r4,r5
0000b4  eb0105c1          ADD      r5,r1,r1,LSL #3
0000b8  eb051501          ADD      r5,r5,r1,LSL #4
0000bc  009e              LSLS     r6,r3,#2
0000be  fbb5f5f6          UDIV     r5,r5,r6
0000c2  2664              MOVS     r6,#0x64
0000c4  fbb5f5f6          UDIV     r5,r5,r6
0000c8  eb0506c5          ADD      r6,r5,r5,LSL #3
0000cc  eb061505          ADD      r5,r6,r5,LSL #4
0000d0  eba40485          SUB      r4,r4,r5,LSL #2
0000d4  2532              MOVS     r5,#0x32
0000d6  eb051404          ADD      r4,r5,r4,LSL #4
0000da  2564              MOVS     r5,#0x64
0000dc  fbb4f4f5          UDIV     r4,r4,r5
0000e0  f00404f0          AND      r4,r4,#0xf0
0000e4  eb0105c1          ADD      r5,r1,r1,LSL #3
0000e8  eb051501          ADD      r5,r5,r1,LSL #4
0000ec  009e              LSLS     r6,r3,#2
0000ee  fbb5f5f6          UDIV     r5,r5,r6
0000f2  2664              MOVS     r6,#0x64
0000f4  fbb5f5f6          UDIV     r5,r5,r6
0000f8  eb041505          ADD      r5,r4,r5,LSL #4
0000fc  eb0104c1          ADD      r4,r1,r1,LSL #3
000100  eb041401          ADD      r4,r4,r1,LSL #4
000104  009e              LSLS     r6,r3,#2
000106  fbb4f4f6          UDIV     r4,r4,r6
00010a  eb0106c1          ADD      r6,r1,r1,LSL #3
00010e  eb061601          ADD      r6,r6,r1,LSL #4
000112  009f              LSLS     r7,r3,#2
000114  fbb6f6f7          UDIV     r6,r6,r7
000118  2764              MOVS     r7,#0x64
00011a  fbb6f6f7          UDIV     r6,r6,r7
00011e  eb0607c6          ADD      r7,r6,r6,LSL #3
000122  eb071606          ADD      r6,r7,r6,LSL #4
000126  eba40486          SUB      r4,r4,r6,LSL #2
00012a  2632              MOVS     r6,#0x32
00012c  eb061404          ADD      r4,r6,r4,LSL #4
000130  2664              MOVS     r6,#0x64
000132  fbb4f4f6          UDIV     r4,r4,r6
000136  f004040f          AND      r4,r4,#0xf
00013a  442c              ADD      r4,r4,r5
00013c  b2a4              UXTH     r4,r4
00013e  6084              STR      r4,[r0,#8]
                  |L10.320|
;;;1045     }
;;;1046   }
000140  bdf0              POP      {r4-r7,pc}
;;;1047   
                          ENDP


                          AREA ||i.LL_USART_StructInit||, CODE, READONLY, ALIGN=1

                  LL_USART_StructInit PROC
;;;409    
;;;410    void LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;411    {
;;;412      /* Set USART_InitStruct fields to default values */
;;;413      USART_InitStruct->BaudRate            = 9600U;
000004  6001              STR      r1,[r0,#0]
;;;414      USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
000006  2100              MOVS     r1,#0
000008  6041              STR      r1,[r0,#4]
;;;415      USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
00000a  6081              STR      r1,[r0,#8]
;;;416      USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
00000c  60c1              STR      r1,[r0,#0xc]
;;;417      USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
00000e  210c              MOVS     r1,#0xc
000010  6101              STR      r1,[r0,#0x10]
;;;418      USART_InitStruct->HardwareFlowControl = LL_USART_HWCONTROL_NONE;
000012  2100              MOVS     r1,#0
000014  6141              STR      r1,[r0,#0x14]
;;;419      USART_InitStruct->OverSampling        = LL_USART_OVERSAMPLING_16;
000016  6181              STR      r1,[r0,#0x18]
;;;420    }
000018  4770              BX       lr
;;;421    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  aRCC_PLLSAIDIVRPrescTable
000000  02040810          DCB      0x02,0x04,0x08,0x10

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_usart_c_f3db86c2____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f4xx_ll_usart_c_f3db86c2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_usart_c_f3db86c2____REVSH|
#line 402
|__asm___20_stm32f4xx_ll_usart_c_f3db86c2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_usart_c_f3db86c2____RRX|
#line 587
|__asm___20_stm32f4xx_ll_usart_c_f3db86c2____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
