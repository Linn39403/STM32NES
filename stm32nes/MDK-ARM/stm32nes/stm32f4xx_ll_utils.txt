; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_utils.o --depend=stm32nes\stm32f4xx_ll_utils.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_utils.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_utils.c]
                          THUMB

                          AREA ||i.LL_Init1msTick||, CODE, READONLY, ALIGN=1

                  LL_Init1msTick PROC
;;;274      */
;;;275    void LL_Init1msTick(uint32_t HCLKFrequency)
000000  f44f717a          MOV      r1,#0x3e8
;;;276    {
;;;277      /* Use frequency provided in argument */
;;;278      LL_InitTick(HCLKFrequency, 1000U);
000004  fbb0f0f1          UDIV     r0,r0,r1
000008  1e41              SUBS     r1,r0,#1
00000a  f04f20e0          MOV      r0,#0xe000e000
00000e  6141              STR      r1,[r0,#0x14]
000010  2100              MOVS     r1,#0
000012  6181              STR      r1,[r0,#0x18]
000014  2105              MOVS     r1,#5
000016  6101              STR      r1,[r0,#0x10]
;;;279    }
000018  4770              BX       lr
;;;280    
                          ENDP


                          AREA ||i.LL_PLL_ConfigSystemClock_HSE||, CODE, READONLY, ALIGN=2

                  LL_PLL_ConfigSystemClock_HSE PROC
;;;419      */
;;;420    ErrorStatus LL_PLL_ConfigSystemClock_HSE(uint32_t HSEFrequency, uint32_t HSEBypass,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;421                                             LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
;;;422    {
000004  4c4b              LDR      r4,|L2.308|
000006  461e              MOV      r6,r3
000008  2301              MOVS     r3,#1
00000a  f8d4c000          LDR      r12,[r4,#0]
00000e  f01c7f00          TST      r12,#0x2000000
000012  bf18              IT       NE
000014  2300              MOVNE    r3,#0
000016  f8d4c000          LDR      r12,[r4,#0]
00001a  f01c5f00          TST      r12,#0x20000000
00001e  f8d4c000          LDR      r12,[r4,#0]
000022  bf08              IT       EQ
000024  f01c6f00          TSTEQ    r12,#0x8000000
000028  d17e              BNE      |L2.296|
;;;423      ErrorStatus status = SUCCESS;
;;;424      uint32_t pllfreq = 0U;
;;;425    
;;;426      /* Check the parameters */
;;;427      assert_param(IS_LL_UTILS_HSE_FREQUENCY(HSEFrequency));
;;;428      assert_param(IS_LL_UTILS_HSE_BYPASS(HSEBypass));
;;;429    
;;;430      /* Check if one of the PLL is enabled */
;;;431      if(UTILS_PLL_IsBusy() == SUCCESS)
00002a  2b00              CMP      r3,#0
00002c  d07f              BEQ      |L2.302|
00002e  7813              LDRB     r3,[r2,#0]
000030  f003033f          AND      r3,r3,#0x3f
000034  fbb0f0f3          UDIV     r0,r0,r3
000038  8893              LDRH     r3,[r2,#4]
00003a  f3c30308          UBFX     r3,r3,#0,#9
00003e  4358              MULS     r0,r3,r0
000040  6893              LDR      r3,[r2,#8]
000042  0c1b              LSRS     r3,r3,#16
000044  005b              LSLS     r3,r3,#1
000046  1c9b              ADDS     r3,r3,#2
000048  fbb0f3f3          UDIV     r3,r0,r3
;;;432      {
;;;433        /* Calculate the new PLL output frequency */
;;;434        pllfreq = UTILS_GetPLLOutputFrequency(HSEFrequency, UTILS_PLLInitStruct);
;;;435    
;;;436        /* Enable HSE if not enabled */
;;;437        if(LL_RCC_HSE_IsReady() != 1U)
00004c  6820              LDR      r0,[r4,#0]
00004e  f4103f00          TST      r0,#0x20000
000052  d10f              BNE      |L2.116|
000054  6820              LDR      r0,[r4,#0]
;;;438        {
;;;439          /* Check if need to enable HSE bypass feature or not */
;;;440          if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
000056  2901              CMP      r1,#1
000058  bf14              ITE      NE
00005a  f4202080          BICNE    r0,r0,#0x40000
00005e  f4402080          ORREQ    r0,r0,#0x40000
000062  6020              STR      r0,[r4,#0]
000064  6820              LDR      r0,[r4,#0]
000066  f4403080          ORR      r0,r0,#0x10000
00006a  6020              STR      r0,[r4,#0]
                  |L2.108|
00006c  6820              LDR      r0,[r4,#0]
00006e  f4103f00          TST      r0,#0x20000
000072  d0fb              BEQ      |L2.108|
                  |L2.116|
;;;441          {
;;;442            LL_RCC_HSE_EnableBypass();
;;;443          }
;;;444          else
;;;445          {
;;;446            LL_RCC_HSE_DisableBypass();
;;;447          }
;;;448    
;;;449          /* Enable HSE */
;;;450          LL_RCC_HSE_Enable();
;;;451          while (LL_RCC_HSE_IsReady() != 1U)
;;;452          {
;;;453            /* Wait for HSE ready */
;;;454          }
;;;455        }
;;;456    
;;;457        /* Configure PLL */
;;;458        LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
000074  e9d20101          LDRD     r0,r1,[r2,#4]
000078  f8d2c000          LDR      r12,[r2,#0]
00007c  f44c0280          ORR      r2,r12,#0x400000
000080  ea421280          ORR      r2,r2,r0,LSL #6
000084  482c              LDR      r0,|L2.312|
000086  f8d0c000          LDR      r12,[r0,#0]
00008a  4d2c              LDR      r5,|L2.316|
00008c  ea0c0c05          AND      r12,r12,r5
000090  ea42020c          ORR      r2,r2,r12
000094  6002              STR      r2,[r0,#0]
000096  6802              LDR      r2,[r0,#0]
000098  f4223240          BIC      r2,r2,#0x30000
00009c  4311              ORRS     r1,r1,r2
00009e  6001              STR      r1,[r0,#0]
0000a0  7830              LDRB     r0,[r6,#0]
0000a2  4927              LDR      r1,|L2.320|
0000a4  f3c01003          UBFX     r0,r0,#4,#4
0000a8  4f26              LDR      r7,|L2.324|
0000aa  5c08              LDRB     r0,[r1,r0]
0000ac  2201              MOVS     r2,#1
0000ae  fa23f500          LSR      r5,r3,r0
0000b2  6838              LDR      r0,[r7,#0]  ; SystemCoreClock
0000b4  4285              CMP      r5,r0
0000b6  d905              BLS      |L2.196|
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       UTILS_SetFlashLatency
0000be  4602              MOV      r2,r0
0000c0  2801              CMP      r0,#1
0000c2  d125              BNE      |L2.272|
                  |L2.196|
0000c4  6820              LDR      r0,[r4,#0]
0000c6  f0407080          ORR      r0,r0,#0x1000000
0000ca  6020              STR      r0,[r4,#0]
                  |L2.204|
0000cc  6820              LDR      r0,[r4,#0]
0000ce  f0107f00          TST      r0,#0x2000000
0000d2  d0fb              BEQ      |L2.204|
0000d4  491c              LDR      r1,|L2.328|
0000d6  6830              LDR      r0,[r6,#0]
0000d8  680b              LDR      r3,[r1,#0]
0000da  f02303f0          BIC      r3,r3,#0xf0
0000de  4318              ORRS     r0,r0,r3
0000e0  6008              STR      r0,[r1,#0]
0000e2  6808              LDR      r0,[r1,#0]
0000e4  f0200003          BIC      r0,r0,#3
0000e8  f0400002          ORR      r0,r0,#2
0000ec  6008              STR      r0,[r1,#0]
                  |L2.238|
0000ee  6808              LDR      r0,[r1,#0]
0000f0  f000000c          AND      r0,r0,#0xc
0000f4  2808              CMP      r0,#8
0000f6  d1fa              BNE      |L2.238|
0000f8  6870              LDR      r0,[r6,#4]
0000fa  680b              LDR      r3,[r1,#0]
0000fc  f42353e0          BIC      r3,r3,#0x1c00
000100  4318              ORRS     r0,r0,r3
000102  6008              STR      r0,[r1,#0]
000104  68b0              LDR      r0,[r6,#8]
000106  680b              LDR      r3,[r1,#0]
000108  f4234360          BIC      r3,r3,#0xe000
00010c  4318              ORRS     r0,r0,r3
00010e  6008              STR      r0,[r1,#0]
                  |L2.272|
000110  6838              LDR      r0,[r7,#0]  ; SystemCoreClock
000112  42a8              CMP      r0,r5
000114  d903              BLS      |L2.286|
000116  4628              MOV      r0,r5
000118  f7fffffe          BL       UTILS_SetFlashLatency
00011c  4602              MOV      r2,r0
                  |L2.286|
00011e  2a01              CMP      r2,#1
000120  bf08              IT       EQ
000122  603d              STREQ    r5,[r7,#0]  ; SystemCoreClock
000124  4610              MOV      r0,r2
;;;459                                    UTILS_PLLInitStruct->PLLP);
;;;460    
;;;461        /* Enable PLL and switch system clock to PLL */
;;;462        status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
;;;463      }
;;;464      else
;;;465      {
;;;466        /* Current PLL configuration cannot be modified */
;;;467        status = ERROR;
;;;468      }
;;;469    
;;;470      return status;
;;;471    }
000126  e000              B        |L2.298|
                  |L2.296|
000128  e001              B        |L2.302|
                  |L2.298|
00012a  e8bd81f0          POP      {r4-r8,pc}
                  |L2.302|
00012e  2000              MOVS     r0,#0                 ;467
000130  e8bd81f0          POP      {r4-r8,pc}
;;;472    
                          ENDP

                  |L2.308|
                          DCD      0x40023800
                  |L2.312|
                          DCD      0x40023804
                  |L2.316|
                          DCD      0xffbf8000
                  |L2.320|
                          DCD      AHBPrescTable
                  |L2.324|
                          DCD      SystemCoreClock
                  |L2.328|
                          DCD      0x40023808

                          AREA ||i.LL_PLL_ConfigSystemClock_HSI||, CODE, READONLY, ALIGN=2

                  LL_PLL_ConfigSystemClock_HSI PROC
;;;362      */
;;;363    ErrorStatus LL_PLL_ConfigSystemClock_HSI(LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;364                                             LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
;;;365    {
000004  4c43              LDR      r4,|L3.276|
000006  460e              MOV      r6,r1
000008  2101              MOVS     r1,#1
00000a  6822              LDR      r2,[r4,#0]
00000c  f0127f00          TST      r2,#0x2000000
000010  bf18              IT       NE
000012  2100              MOVNE    r1,#0
000014  6822              LDR      r2,[r4,#0]
000016  f0125f00          TST      r2,#0x20000000
00001a  6822              LDR      r2,[r4,#0]
00001c  bf08              IT       EQ
00001e  f0126f00          TSTEQ    r2,#0x8000000
000022  d173              BNE      |L3.268|
;;;366      ErrorStatus status = SUCCESS;
;;;367      uint32_t pllfreq = 0U;
;;;368    
;;;369      /* Check if one of the PLL is enabled */
;;;370      if(UTILS_PLL_IsBusy() == SUCCESS)
000024  2900              CMP      r1,#0
000026  d071              BEQ      |L3.268|
000028  7802              LDRB     r2,[r0,#0]
;;;371      {
;;;372        /* Calculate the new PLL output frequency */
;;;373        pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
00002a  493b              LDR      r1,|L3.280|
00002c  f002023f          AND      r2,r2,#0x3f
000030  fbb1f1f2          UDIV     r1,r1,r2
000034  8882              LDRH     r2,[r0,#4]
000036  f3c20208          UBFX     r2,r2,#0,#9
00003a  4351              MULS     r1,r2,r1
00003c  6882              LDR      r2,[r0,#8]
00003e  0c12              LSRS     r2,r2,#16
000040  0052              LSLS     r2,r2,#1
000042  1c92              ADDS     r2,r2,#2
000044  fbb1f2f2          UDIV     r2,r1,r2
;;;374    
;;;375        /* Enable HSI if not enabled */
;;;376        if(LL_RCC_HSI_IsReady() != 1U)
000048  6821              LDR      r1,[r4,#0]
00004a  f0110f02          TST      r1,#2
00004e  d107              BNE      |L3.96|
000050  6821              LDR      r1,[r4,#0]
000052  f0410101          ORR      r1,r1,#1
000056  6021              STR      r1,[r4,#0]
                  |L3.88|
000058  6821              LDR      r1,[r4,#0]
00005a  f0110f02          TST      r1,#2
00005e  d0fb              BEQ      |L3.88|
                  |L3.96|
;;;377        {
;;;378          LL_RCC_HSI_Enable();
;;;379          while (LL_RCC_HSI_IsReady() != 1U)
;;;380          {
;;;381            /* Wait for HSI ready */
;;;382          }
;;;383        }
;;;384    
;;;385        /* Configure PLL */
;;;386        LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
000060  e9d01c00          LDRD     r1,r12,[r0,#0]
000064  6883              LDR      r3,[r0,#8]
000066  482d              LDR      r0,|L3.284|
000068  ea41118c          ORR      r1,r1,r12,LSL #6
00006c  f8d0c000          LDR      r12,[r0,#0]
000070  4d2b              LDR      r5,|L3.288|
000072  ea0c0c05          AND      r12,r12,r5
000076  ea41010c          ORR      r1,r1,r12
00007a  6001              STR      r1,[r0,#0]
00007c  6801              LDR      r1,[r0,#0]
00007e  f4213140          BIC      r1,r1,#0x30000
000082  4319              ORRS     r1,r1,r3
000084  6001              STR      r1,[r0,#0]
000086  7831              LDRB     r1,[r6,#0]
000088  4b26              LDR      r3,|L3.292|
00008a  f3c11103          UBFX     r1,r1,#4,#4
00008e  4f26              LDR      r7,|L3.296|
000090  5c59              LDRB     r1,[r3,r1]
000092  2001              MOVS     r0,#1
000094  fa22f501          LSR      r5,r2,r1
000098  6839              LDR      r1,[r7,#0]  ; SystemCoreClock
00009a  428d              CMP      r5,r1
00009c  d904              BLS      |L3.168|
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       UTILS_SetFlashLatency
0000a4  2801              CMP      r0,#1
0000a6  d125              BNE      |L3.244|
                  |L3.168|
0000a8  6821              LDR      r1,[r4,#0]
0000aa  f0417180          ORR      r1,r1,#0x1000000
0000ae  6021              STR      r1,[r4,#0]
                  |L3.176|
0000b0  6821              LDR      r1,[r4,#0]
0000b2  f0117f00          TST      r1,#0x2000000
0000b6  d0fb              BEQ      |L3.176|
0000b8  491c              LDR      r1,|L3.300|
0000ba  6832              LDR      r2,[r6,#0]
0000bc  680b              LDR      r3,[r1,#0]
0000be  f02303f0          BIC      r3,r3,#0xf0
0000c2  431a              ORRS     r2,r2,r3
0000c4  600a              STR      r2,[r1,#0]
0000c6  680a              LDR      r2,[r1,#0]
0000c8  f0220203          BIC      r2,r2,#3
0000cc  f0420202          ORR      r2,r2,#2
0000d0  600a              STR      r2,[r1,#0]
                  |L3.210|
0000d2  680a              LDR      r2,[r1,#0]
0000d4  f002020c          AND      r2,r2,#0xc
0000d8  2a08              CMP      r2,#8
0000da  d1fa              BNE      |L3.210|
0000dc  6872              LDR      r2,[r6,#4]
0000de  680b              LDR      r3,[r1,#0]
0000e0  f42353e0          BIC      r3,r3,#0x1c00
0000e4  431a              ORRS     r2,r2,r3
0000e6  600a              STR      r2,[r1,#0]
0000e8  68b2              LDR      r2,[r6,#8]
0000ea  680b              LDR      r3,[r1,#0]
0000ec  f4234360          BIC      r3,r3,#0xe000
0000f0  431a              ORRS     r2,r2,r3
0000f2  600a              STR      r2,[r1,#0]
                  |L3.244|
0000f4  6839              LDR      r1,[r7,#0]  ; SystemCoreClock
0000f6  42a9              CMP      r1,r5
0000f8  bf84              ITT      HI
0000fa  4628              MOVHI    r0,r5
0000fc  f7fffffe          BLHI     UTILS_SetFlashLatency
000100  2801              CMP      r0,#1
000102  bf08              IT       EQ
000104  603d              STREQ    r5,[r7,#0]  ; SystemCoreClock
;;;387                                    UTILS_PLLInitStruct->PLLP);
;;;388    
;;;389        /* Enable PLL and switch system clock to PLL */
;;;390        status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
;;;391      }
;;;392      else
;;;393      {
;;;394        /* Current PLL configuration cannot be modified */
;;;395        status = ERROR;
;;;396      }
;;;397    
;;;398      return status;
;;;399    }
000106  e8bd81f0          POP      {r4-r8,pc}
00010a  e7ff              B        |L3.268|
                  |L3.268|
00010c  2000              MOVS     r0,#0                 ;395
00010e  e8bd81f0          POP      {r4-r8,pc}
;;;400    
                          ENDP

000112  0000              DCW      0x0000
                  |L3.276|
                          DCD      0x40023800
                  |L3.280|
                          DCD      0x00f42400
                  |L3.284|
                          DCD      0x40023804
                  |L3.288|
                          DCD      0xffbf8000
                  |L3.292|
                          DCD      AHBPrescTable
                  |L3.296|
                          DCD      SystemCoreClock
                  |L3.300|
                          DCD      0x40023808

                          AREA ||i.LL_SetSystemCoreClock||, CODE, READONLY, ALIGN=2

                  LL_SetSystemCoreClock PROC
;;;340      */
;;;341    void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
000000  4901              LDR      r1,|L4.8|
;;;342    {
;;;343      /* HCLK clock frequency */
;;;344      SystemCoreClock = HCLKFrequency;
000002  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;345    }
000004  4770              BX       lr
;;;346    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      SystemCoreClock

                          AREA ||i.LL_mDelay||, CODE, READONLY, ALIGN=1

                  LL_mDelay PROC
;;;290      */
;;;291    void LL_mDelay(uint32_t Delay)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;292    {
000004  b081              SUB      sp,sp,#4
;;;293      __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
000006  690a              LDR      r2,[r1,#0x10]
;;;294      /* Add this code to indicate that local variable is not used */
;;;295      ((void)tmp);
;;;296    
;;;297      /* Add a period to guaranty minimum wait */
;;;298      if(Delay < LL_MAX_DELAY)
000008  9200              STR      r2,[sp,#0]
00000a  f1b03fff          CMP      r0,#0xffffffff
00000e  bf18              IT       NE
000010  1c40              ADDNE    r0,r0,#1
                  |L5.18|
;;;299      {
;;;300        Delay++;
;;;301      }
;;;302    
;;;303      while (Delay)
;;;304      {
;;;305        if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
000012  690a              LDR      r2,[r1,#0x10]
000014  f4123f80          TST      r2,#0x10000
000018  bf18              IT       NE
00001a  1e40              SUBNE    r0,r0,#1
00001c  2800              CMP      r0,#0
00001e  d1f8              BNE      |L5.18|
;;;306        {
;;;307          Delay--;
;;;308        }
;;;309      }
;;;310    }
000020  b001              ADD      sp,sp,#4
000022  4770              BX       lr
;;;311    
                          ENDP


                          AREA ||i.UTILS_SetFlashLatency||, CODE, READONLY, ALIGN=2

                  UTILS_SetFlashLatency PROC
;;;492      */
;;;493    static ErrorStatus UTILS_SetFlashLatency(uint32_t HCLK_Frequency)
000000  b4f0              PUSH     {r4-r7}
;;;494    {
;;;495      ErrorStatus status = SUCCESS;
000002  2201              MOVS     r2,#1
;;;496    
;;;497      uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
000004  2100              MOVS     r1,#0
;;;498    
;;;499      /* Frequency cannot be equal to 0 */
;;;500      if(HCLK_Frequency == 0U)
000006  2800              CMP      r0,#0
000008  d068              BEQ      |L6.220|
;;;501      {
;;;502        status = ERROR;
;;;503      }
;;;504      else
;;;505      {
;;;506        if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
00000a  4b36              LDR      r3,|L6.228|
00000c  f8d3c000          LDR      r12,[r3,#0]
000010  f44f4440          MOV      r4,#0xc000
000014  ea34070c          BICS     r7,r4,r12
;;;507        {
;;;508    #if defined (UTILS_SCALE1_LATENCY5_FREQ)
;;;509          if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
;;;510          {
;;;511            latency = LL_FLASH_LATENCY_5;
;;;512          }
;;;513    #endif /*UTILS_SCALE1_LATENCY5_FREQ */
;;;514    #if defined (UTILS_SCALE1_LATENCY4_FREQ)
;;;515          if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
;;;516          {
;;;517            latency = LL_FLASH_LATENCY_4;
;;;518          }
;;;519    #endif /* UTILS_SCALE1_LATENCY4_FREQ */
;;;520    #if defined (UTILS_SCALE1_LATENCY3_FREQ)
;;;521          if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
;;;522          {
;;;523            latency = LL_FLASH_LATENCY_3;
;;;524          }
;;;525    #endif /* UTILS_SCALE1_LATENCY3_FREQ */
;;;526    #if defined (UTILS_SCALE1_LATENCY2_FREQ) 
;;;527          if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
000018  4c35              LDR      r4,|L6.240|
00001a  4e33              LDR      r6,|L6.232|
00001c  f8dfc0cc          LDR      r12,|L6.236|
;;;528          {
;;;529            latency = LL_FLASH_LATENCY_2;
;;;530          }
;;;531          else
;;;532          {
;;;533            if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
000020  ea4f0564          ASR      r5,r4,#1
000024  d118              BNE      |L6.88|
000026  42b0              CMP      r0,r6                 ;509
000028  bf88              IT       HI                    ;511
00002a  2105              MOVHI    r1,#5                 ;511
00002c  4f31              LDR      r7,|L6.244|
00002e  42b8              CMP      r0,r7                 ;515
000030  d902              BLS      |L6.56|
000032  2900              CMP      r1,#0                 ;515
000034  bf08              IT       EQ                    ;517
000036  2104              MOVEQ    r1,#4                 ;517
                  |L6.56|
000038  4560              CMP      r0,r12                ;521
00003a  d902              BLS      |L6.66|
00003c  2900              CMP      r1,#0                 ;521
00003e  bf08              IT       EQ                    ;523
000040  2103              MOVEQ    r1,#3                 ;523
                  |L6.66|
000042  42a0              CMP      r0,r4                 ;527
000044  d903              BLS      |L6.78|
000046  2900              CMP      r1,#0                 ;527
000048  bf08              IT       EQ                    ;529
00004a  2102              MOVEQ    r1,#2                 ;529
00004c  d004              BEQ      |L6.88|
                  |L6.78|
00004e  42a8              CMP      r0,r5
000050  d902              BLS      |L6.88|
000052  2900              CMP      r1,#0
;;;534            {
;;;535              latency = LL_FLASH_LATENCY_1;
000054  bf08              IT       EQ
000056  2101              MOVEQ    r1,#1
                  |L6.88|
;;;536            }
;;;537          }
;;;538    #endif /* UTILS_SCALE1_LATENCY2_FREQ */
;;;539        }
;;;540        if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
000058  681f              LDR      r7,[r3,#0]
00005a  f4074740          AND      r7,r7,#0xc000
00005e  f5b74f00          CMP      r7,#0x8000
000062  d11a              BNE      |L6.154|
;;;541        {
;;;542    #if defined (UTILS_SCALE2_LATENCY5_FREQ)
;;;543          if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
000064  42b0              CMP      r0,r6
000066  d902              BLS      |L6.110|
000068  2900              CMP      r1,#0
;;;544          {
;;;545            latency = LL_FLASH_LATENCY_5;
00006a  bf08              IT       EQ
00006c  2105              MOVEQ    r1,#5
                  |L6.110|
;;;546          }
;;;547    #endif /*UTILS_SCALE1_LATENCY5_FREQ */
;;;548    #if defined (UTILS_SCALE2_LATENCY4_FREQ)
;;;549          if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
00006e  4e22              LDR      r6,|L6.248|
000070  42b0              CMP      r0,r6
000072  d902              BLS      |L6.122|
000074  2900              CMP      r1,#0
;;;550          {
;;;551            latency = LL_FLASH_LATENCY_4;
000076  bf08              IT       EQ
000078  2104              MOVEQ    r1,#4
                  |L6.122|
;;;552          }
;;;553    #endif /*UTILS_SCALE1_LATENCY4_FREQ */
;;;554    #if defined (UTILS_SCALE2_LATENCY3_FREQ)
;;;555          if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
00007a  4560              CMP      r0,r12
00007c  d902              BLS      |L6.132|
00007e  2900              CMP      r1,#0
;;;556          {
;;;557            latency = LL_FLASH_LATENCY_3;
000080  bf08              IT       EQ
000082  2103              MOVEQ    r1,#3
                  |L6.132|
;;;558          }
;;;559    #endif /*UTILS_SCALE1_LATENCY3_FREQ */
;;;560          if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
000084  42a0              CMP      r0,r4
000086  d903              BLS      |L6.144|
000088  2900              CMP      r1,#0
;;;561          {
;;;562            latency = LL_FLASH_LATENCY_2;
00008a  bf08              IT       EQ
00008c  2102              MOVEQ    r1,#2
00008e  d004              BEQ      |L6.154|
                  |L6.144|
;;;563          }
;;;564          else
;;;565          {
;;;566            if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
000090  42a8              CMP      r0,r5
000092  d902              BLS      |L6.154|
000094  2900              CMP      r1,#0
;;;567            {
;;;568              latency = LL_FLASH_LATENCY_1;
000096  bf08              IT       EQ
000098  2101              MOVEQ    r1,#1
                  |L6.154|
;;;569            }
;;;570          }
;;;571        }
;;;572    #if defined (LL_PWR_REGU_VOLTAGE_SCALE3)
;;;573        if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
00009a  681b              LDR      r3,[r3,#0]
00009c  f4034340          AND      r3,r3,#0xc000
0000a0  f5b34f80          CMP      r3,#0x4000
0000a4  d10f              BNE      |L6.198|
;;;574        {
;;;575    #if defined (UTILS_SCALE3_LATENCY3_FREQ)
;;;576          if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
0000a6  4560              CMP      r0,r12
0000a8  d902              BLS      |L6.176|
0000aa  2900              CMP      r1,#0
;;;577          {
;;;578            latency = LL_FLASH_LATENCY_3;
0000ac  bf08              IT       EQ
0000ae  2103              MOVEQ    r1,#3
                  |L6.176|
;;;579          }
;;;580    #endif /*UTILS_SCALE1_LATENCY3_FREQ */
;;;581    #if defined (UTILS_SCALE3_LATENCY2_FREQ)
;;;582          if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
0000b0  42a0              CMP      r0,r4
0000b2  d903              BLS      |L6.188|
0000b4  2900              CMP      r1,#0
;;;583          {
;;;584            latency = LL_FLASH_LATENCY_2;
0000b6  bf08              IT       EQ
0000b8  2102              MOVEQ    r1,#2
0000ba  d004              BEQ      |L6.198|
                  |L6.188|
;;;585          }
;;;586          else
;;;587          {
;;;588            if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
0000bc  42a8              CMP      r0,r5
0000be  d902              BLS      |L6.198|
0000c0  2900              CMP      r1,#0
;;;589            {
;;;590              latency = LL_FLASH_LATENCY_1;
0000c2  bf08              IT       EQ
0000c4  2101              MOVEQ    r1,#1
                  |L6.198|
0000c6  480d              LDR      r0,|L6.252|
0000c8  6803              LDR      r3,[r0,#0]
0000ca  f023030f          BIC      r3,r3,#0xf
0000ce  430b              ORRS     r3,r3,r1
0000d0  6003              STR      r3,[r0,#0]
0000d2  6800              LDR      r0,[r0,#0]
0000d4  f000000f          AND      r0,r0,#0xf
;;;591            }
;;;592          }
;;;593        }
;;;594    #endif /*UTILS_SCALE1_LATENCY2_FREQ */
;;;595    #endif /* LL_PWR_REGU_VOLTAGE_SCALE3 */
;;;596    
;;;597        LL_FLASH_SetLatency(latency);
;;;598    
;;;599        /* Check that the new number of wait states is taken into account to access the Flash
;;;600           memory by reading the FLASH_ACR register */
;;;601        if(LL_FLASH_GetLatency() != latency)
0000d8  4288              CMP      r0,r1
0000da  d000              BEQ      |L6.222|
                  |L6.220|
;;;602        {
;;;603          status = ERROR;
0000dc  2200              MOVS     r2,#0
                  |L6.222|
;;;604        }
;;;605      }
;;;606      return status;
;;;607    }
0000de  bcf0              POP      {r4-r7}
0000e0  4610              MOV      r0,r2                 ;606
0000e2  4770              BX       lr
;;;608    
                          ENDP

                  |L6.228|
                          DCD      0x40007000
                  |L6.232|
                          DCD      0x08f0d180
                  |L6.236|
                          DCD      0x055d4a80
                  |L6.240|
                          DCD      0x03938700
                  |L6.244|
                          DCD      0x07270e00
                  |L6.248|
                          DCD      0x00b71b00
                  |L6.252|
                          DCD      0x40023c00

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_utils.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REVSH|
#line 402
|__asm___20_stm32f4xx_ll_utils_c_fa0b8999____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_ll_utils_c_fa0b8999____RRX|
#line 587
|__asm___20_stm32f4xx_ll_utils_c_fa0b8999____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
