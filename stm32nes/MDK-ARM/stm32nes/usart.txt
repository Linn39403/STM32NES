; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\usart.o --depend=stm32nes\usart.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\usart.crf ../Src/usart.c]
                          THUMB

                          AREA ||i.LL_AHB1_GRP1_EnableClock||, CODE, READONLY, ALIGN=2

                  LL_AHB1_GRP1_EnableClock PROC
;;;426    */
;;;427    __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
000000  b508              PUSH     {r3,lr}
;;;428    {
;;;429      __IO uint32_t tmpreg;
;;;430      SET_BIT(RCC->AHB1ENR, Periphs);
000002  4905              LDR      r1,|L1.24|
000004  6809              LDR      r1,[r1,#0]
000006  4301              ORRS     r1,r1,r0
000008  4a03              LDR      r2,|L1.24|
00000a  6011              STR      r1,[r2,#0]
;;;431      /* Delay after an RCC peripheral clock enabling */
;;;432      tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  4001              ANDS     r1,r1,r0
000012  9100              STR      r1,[sp,#0]
;;;433      (void)tmpreg;
000014  bf00              NOP      
;;;434    }
000016  bd08              POP      {r3,pc}
;;;435    
                          ENDP

                  |L1.24|
                          DCD      0x40023830

                          AREA ||i.LL_DMA_DisableFifoMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_DisableFifoMode PROC
;;;1282     */
;;;1283   __STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
000000  4a05              LDR      r2,|L2.24|
;;;1284   {
;;;1285     CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
000002  5c52              LDRB     r2,[r2,r1]
000004  4402              ADD      r2,r2,r0
000006  6952              LDR      r2,[r2,#0x14]
000008  f0220204          BIC      r2,r2,#4
00000c  4b02              LDR      r3,|L2.24|
00000e  5c5b              LDRB     r3,[r3,r1]
000010  4403              ADD      r3,r3,r0
000012  615a              STR      r2,[r3,#0x14]
;;;1286   }
000014  4770              BX       lr
;;;1287   
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetChannelSelection||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetChannelSelection PROC
;;;1025     */
;;;1026   __STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
000000  b510              PUSH     {r4,lr}
;;;1027   {
;;;1028     MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
000002  4b05              LDR      r3,|L3.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f0236360          BIC      r3,r3,#0xe000000
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L3.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;1029   }
000014  bd10              POP      {r4,pc}
;;;1030   
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetDataTransferDirection||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetDataTransferDirection PROC
;;;601      */
;;;602    __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
000000  b510              PUSH     {r4,lr}
;;;603    {
;;;604      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
000002  4b05              LDR      r3,|L4.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f02303c0          BIC      r3,r3,#0xc0
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L4.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;605    }
000014  bd10              POP      {r4,pc}
;;;606    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetMemoryIncMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetMemoryIncMode PROC
;;;741      */
;;;742    __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
000000  b510              PUSH     {r4,lr}
;;;743    {
;;;744      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
000002  4b05              LDR      r3,|L5.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4236380          BIC      r3,r3,#0x400
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L5.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;745    }
000014  bd10              POP      {r4,pc}
;;;746    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetMemorySize||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetMemorySize PROC
;;;834      */
;;;835    __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
000000  b510              PUSH     {r4,lr}
;;;836    {
;;;837      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
000002  4b05              LDR      r3,|L6.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f42343c0          BIC      r3,r3,#0x6000
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L6.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;838    }
000014  bd10              POP      {r4,pc}
;;;839    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetMode PROC
;;;649      */
;;;650    __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
000000  b510              PUSH     {r4,lr}
;;;651    {
;;;652      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
000002  4b05              LDR      r3,|L7.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4237390          BIC      r3,r3,#0x120
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L7.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;653    }
000014  bd10              POP      {r4,pc}
;;;654    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetPeriphIncMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetPeriphIncMode PROC
;;;696      */
;;;697    __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
000000  b510              PUSH     {r4,lr}
;;;698    {
;;;699      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
000002  4b05              LDR      r3,|L8.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4237300          BIC      r3,r3,#0x200
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L8.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;700    }
000014  bd10              POP      {r4,pc}
;;;701    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetPeriphSize||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetPeriphSize PROC
;;;787      */
;;;788    __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
000000  b510              PUSH     {r4,lr}
;;;789    {
;;;790      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
000002  4b05              LDR      r3,|L9.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f42353c0          BIC      r3,r3,#0x1800
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L9.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;791    }
000014  bd10              POP      {r4,pc}
;;;792    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetStreamPriorityLevel||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetStreamPriorityLevel PROC
;;;927      */
;;;928    __STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
000000  b510              PUSH     {r4,lr}
;;;929    {
;;;930      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
000002  4b05              LDR      r3,|L10.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4233340          BIC      r3,r3,#0x30000
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L10.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;931    }
000014  bd10              POP      {r4,pc}
;;;932    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_USART_ConfigAsyncMode||, CODE, READONLY, ALIGN=1

                  LL_USART_ConfigAsyncMode PROC
;;;1493     */
;;;1494   __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
000000  6901              LDR      r1,[r0,#0x10]
;;;1495   {
;;;1496     /* In Asynchronous mode, the following bits must be kept cleared:
;;;1497     - LINEN, CLKEN bits in the USART_CR2 register,
;;;1498     - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
;;;1499     CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
000002  f4214190          BIC      r1,r1,#0x4800
000006  6101              STR      r1,[r0,#0x10]
;;;1500     CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
000008  6941              LDR      r1,[r0,#0x14]
00000a  f021012a          BIC      r1,r1,#0x2a
00000e  6141              STR      r1,[r0,#0x14]
;;;1501   }
000010  4770              BX       lr
;;;1502   
                          ENDP


                          AREA ||i.LL_USART_Enable||, CODE, READONLY, ALIGN=1

                  LL_USART_Enable PROC
;;;424      */
;;;425    __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
000000  68c1              LDR      r1,[r0,#0xc]
;;;426    {
;;;427      SET_BIT(USARTx->CR1, USART_CR1_UE);
000002  f4415100          ORR      r1,r1,#0x2000
000006  60c1              STR      r1,[r0,#0xc]
;;;428    }
000008  4770              BX       lr
;;;429    
                          ENDP


                          AREA ||i.MX_USART1_UART_Init||, CODE, READONLY, ALIGN=2

                  MX_USART1_UART_Init PROC
;;;48     
;;;49     void MX_USART1_UART_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;50     {
000002  b08f              SUB      sp,sp,#0x3c
;;;51       LL_USART_InitTypeDef USART_InitStruct = {0};
000004  211c              MOVS     r1,#0x1c
000006  a808              ADD      r0,sp,#0x20
000008  f7fffffe          BL       __aeabi_memclr4
;;;52     
;;;53       LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
00000c  2118              MOVS     r1,#0x18
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       __aeabi_memclr4
;;;54       /* Peripheral clock enable */
;;;55       LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
000014  2010              MOVS     r0,#0x10
000016  4950              LDR      r1,|L13.344|
000018  6809              LDR      r1,[r1,#0]
00001a  4301              ORRS     r1,r1,r0
00001c  4a4e              LDR      r2,|L13.344|
00001e  6011              STR      r1,[r2,#0]
000020  4611              MOV      r1,r2
000022  6809              LDR      r1,[r1,#0]
000024  4001              ANDS     r1,r1,r0
000026  9101              STR      r1,[sp,#4]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;56       
;;;57       LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       LL_AHB1_GRP1_EnableClock
;;;58       /**USART1 GPIO Configuration  
;;;59       PB6   ------> USART1_TX
;;;60       PB7   ------> USART1_RX 
;;;61       */
;;;62       GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
000032  20c0              MOVS     r0,#0xc0
000034  9002              STR      r0,[sp,#8]
;;;63       GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
000036  2002              MOVS     r0,#2
000038  9003              STR      r0,[sp,#0xc]
;;;64       GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
00003a  2003              MOVS     r0,#3
00003c  9004              STR      r0,[sp,#0x10]
;;;65       GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
00003e  2000              MOVS     r0,#0
000040  9005              STR      r0,[sp,#0x14]
;;;66       GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
000042  2001              MOVS     r0,#1
000044  9006              STR      r0,[sp,#0x18]
;;;67       GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
000046  2007              MOVS     r0,#7
000048  9007              STR      r0,[sp,#0x1c]
;;;68       LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
00004a  a902              ADD      r1,sp,#8
00004c  4843              LDR      r0,|L13.348|
00004e  f7fffffe          BL       LL_GPIO_Init
;;;69     
;;;70       /* USART1 DMA Init */
;;;71       
;;;72       /* USART1_TX Init */
;;;73       LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
000052  f04f6200          MOV      r2,#0x8000000
000056  2107              MOVS     r1,#7
000058  4841              LDR      r0,|L13.352|
00005a  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;74     
;;;75       LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
00005e  2240              MOVS     r2,#0x40
000060  2107              MOVS     r1,#7
000062  483f              LDR      r0,|L13.352|
000064  f7fffffe          BL       LL_DMA_SetDataTransferDirection
;;;76     
;;;77       LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_LOW);
000068  2200              MOVS     r2,#0
00006a  2107              MOVS     r1,#7
00006c  483c              LDR      r0,|L13.352|
00006e  f7fffffe          BL       LL_DMA_SetStreamPriorityLevel
;;;78     
;;;79       LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
000072  2200              MOVS     r2,#0
000074  2107              MOVS     r1,#7
000076  483a              LDR      r0,|L13.352|
000078  f7fffffe          BL       LL_DMA_SetMode
;;;80     
;;;81       LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
00007c  2200              MOVS     r2,#0
00007e  2107              MOVS     r1,#7
000080  4837              LDR      r0,|L13.352|
000082  f7fffffe          BL       LL_DMA_SetPeriphIncMode
;;;82     
;;;83       LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
000086  f44f6280          MOV      r2,#0x400
00008a  2107              MOVS     r1,#7
00008c  4834              LDR      r0,|L13.352|
00008e  f7fffffe          BL       LL_DMA_SetMemoryIncMode
;;;84     
;;;85       LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
000092  2200              MOVS     r2,#0
000094  2107              MOVS     r1,#7
000096  4832              LDR      r0,|L13.352|
000098  f7fffffe          BL       LL_DMA_SetPeriphSize
;;;86     
;;;87       LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
00009c  2200              MOVS     r2,#0
00009e  2107              MOVS     r1,#7
0000a0  482f              LDR      r0,|L13.352|
0000a2  f7fffffe          BL       LL_DMA_SetMemorySize
;;;88     
;;;89       LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
0000a6  2107              MOVS     r1,#7
0000a8  482d              LDR      r0,|L13.352|
0000aa  f7fffffe          BL       LL_DMA_DisableFifoMode
;;;90     
;;;91       /* USART1_RX Init */
;;;92       LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_4);
0000ae  f04f6200          MOV      r2,#0x8000000
0000b2  2102              MOVS     r1,#2
0000b4  482a              LDR      r0,|L13.352|
0000b6  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;93     
;;;94       LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
0000ba  2200              MOVS     r2,#0
0000bc  2102              MOVS     r1,#2
0000be  4828              LDR      r0,|L13.352|
0000c0  f7fffffe          BL       LL_DMA_SetDataTransferDirection
;;;95     
;;;96       LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
0000c4  2200              MOVS     r2,#0
0000c6  2102              MOVS     r1,#2
0000c8  4825              LDR      r0,|L13.352|
0000ca  f7fffffe          BL       LL_DMA_SetStreamPriorityLevel
;;;97     
;;;98       LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
0000ce  2200              MOVS     r2,#0
0000d0  2102              MOVS     r1,#2
0000d2  4823              LDR      r0,|L13.352|
0000d4  f7fffffe          BL       LL_DMA_SetMode
;;;99     
;;;100      LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
0000d8  2200              MOVS     r2,#0
0000da  2102              MOVS     r1,#2
0000dc  4820              LDR      r0,|L13.352|
0000de  f7fffffe          BL       LL_DMA_SetPeriphIncMode
;;;101    
;;;102      LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
0000e2  f44f6280          MOV      r2,#0x400
0000e6  2102              MOVS     r1,#2
0000e8  481d              LDR      r0,|L13.352|
0000ea  f7fffffe          BL       LL_DMA_SetMemoryIncMode
;;;103    
;;;104      LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_BYTE);
0000ee  2200              MOVS     r2,#0
0000f0  2102              MOVS     r1,#2
0000f2  481b              LDR      r0,|L13.352|
0000f4  f7fffffe          BL       LL_DMA_SetPeriphSize
;;;105    
;;;106      LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_BYTE);
0000f8  2200              MOVS     r2,#0
0000fa  2102              MOVS     r1,#2
0000fc  4818              LDR      r0,|L13.352|
0000fe  f7fffffe          BL       LL_DMA_SetMemorySize
;;;107    
;;;108      LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
000102  2102              MOVS     r1,#2
000104  4816              LDR      r0,|L13.352|
000106  f7fffffe          BL       LL_DMA_DisableFifoMode
;;;109    
;;;110      /* USART1 interrupt Init */
;;;111      NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
00010a  f7fffffe          BL       NVIC_GetPriorityGrouping
00010e  4605              MOV      r5,r0
000110  2200              MOVS     r2,#0
000112  4611              MOV      r1,r2
000114  f7fffffe          BL       NVIC_EncodePriority
000118  4604              MOV      r4,r0
00011a  4621              MOV      r1,r4
00011c  2025              MOVS     r0,#0x25
00011e  f7fffffe          BL       NVIC_SetPriority
;;;112      NVIC_EnableIRQ(USART1_IRQn);
000122  2025              MOVS     r0,#0x25
000124  f7fffffe          BL       NVIC_EnableIRQ
;;;113    
;;;114      USART_InitStruct.BaudRate = 115200;
000128  f44f30e1          MOV      r0,#0x1c200
00012c  9008              STR      r0,[sp,#0x20]
;;;115      USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
00012e  2000              MOVS     r0,#0
000130  9009              STR      r0,[sp,#0x24]
;;;116      USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
000132  900a              STR      r0,[sp,#0x28]
;;;117      USART_InitStruct.Parity = LL_USART_PARITY_NONE;
000134  900b              STR      r0,[sp,#0x2c]
;;;118      USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
000136  200c              MOVS     r0,#0xc
000138  900c              STR      r0,[sp,#0x30]
;;;119      USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
00013a  2000              MOVS     r0,#0
00013c  900d              STR      r0,[sp,#0x34]
;;;120      USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
00013e  900e              STR      r0,[sp,#0x38]
;;;121      LL_USART_Init(USART1, &USART_InitStruct);
000140  a908              ADD      r1,sp,#0x20
000142  4808              LDR      r0,|L13.356|
000144  f7fffffe          BL       LL_USART_Init
;;;122      LL_USART_ConfigAsyncMode(USART1);
000148  4806              LDR      r0,|L13.356|
00014a  f7fffffe          BL       LL_USART_ConfigAsyncMode
;;;123      LL_USART_Enable(USART1);
00014e  4805              LDR      r0,|L13.356|
000150  f7fffffe          BL       LL_USART_Enable
;;;124    
;;;125    }
000154  b00f              ADD      sp,sp,#0x3c
000156  bd30              POP      {r4,r5,pc}
;;;126    /* USART2 init function */
                          ENDP

                  |L13.344|
                          DCD      0x40023844
                  |L13.348|
                          DCD      0x40020400
                  |L13.352|
                          DCD      0x40026400
                  |L13.356|
                          DCD      0x40011000

                          AREA ||i.MX_USART2_UART_Init||, CODE, READONLY, ALIGN=2

                  MX_USART2_UART_Init PROC
;;;127    
;;;128    void MX_USART2_UART_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;129    {
000002  b08f              SUB      sp,sp,#0x3c
;;;130      LL_USART_InitTypeDef USART_InitStruct = {0};
000004  211c              MOVS     r1,#0x1c
000006  a808              ADD      r0,sp,#0x20
000008  f7fffffe          BL       __aeabi_memclr4
;;;131    
;;;132      LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
00000c  2118              MOVS     r1,#0x18
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       __aeabi_memclr4
;;;133      /* Peripheral clock enable */
;;;134      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
000014  f44f3000          MOV      r0,#0x20000
000018  4939              LDR      r1,|L14.256|
00001a  6809              LDR      r1,[r1,#0]
00001c  4301              ORRS     r1,r1,r0
00001e  4a38              LDR      r2,|L14.256|
000020  6011              STR      r1,[r2,#0]
000022  4611              MOV      r1,r2
000024  6809              LDR      r1,[r1,#0]
000026  4001              ANDS     r1,r1,r0
000028  9101              STR      r1,[sp,#4]
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;135      
;;;136      LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
00002e  2008              MOVS     r0,#8
000030  f7fffffe          BL       LL_AHB1_GRP1_EnableClock
;;;137      /**USART2 GPIO Configuration  
;;;138      PD5   ------> USART2_TX
;;;139      PD6   ------> USART2_RX 
;;;140      */
;;;141      GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6;
000034  2060              MOVS     r0,#0x60
000036  9002              STR      r0,[sp,#8]
;;;142      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
000038  2002              MOVS     r0,#2
00003a  9003              STR      r0,[sp,#0xc]
;;;143      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
00003c  2003              MOVS     r0,#3
00003e  9004              STR      r0,[sp,#0x10]
;;;144      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
000040  2000              MOVS     r0,#0
000042  9005              STR      r0,[sp,#0x14]
;;;145      GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
000044  2001              MOVS     r0,#1
000046  9006              STR      r0,[sp,#0x18]
;;;146      GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
000048  2007              MOVS     r0,#7
00004a  9007              STR      r0,[sp,#0x1c]
;;;147      LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
00004c  a902              ADD      r1,sp,#8
00004e  482d              LDR      r0,|L14.260|
000050  f7fffffe          BL       LL_GPIO_Init
;;;148    
;;;149      /* USART2 DMA Init */
;;;150      
;;;151      /* USART2_TX Init */
;;;152      LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_6, LL_DMA_CHANNEL_4);
000054  f04f6200          MOV      r2,#0x8000000
000058  2106              MOVS     r1,#6
00005a  482b              LDR      r0,|L14.264|
00005c  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;153    
;;;154      LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
000060  2240              MOVS     r2,#0x40
000062  2106              MOVS     r1,#6
000064  4828              LDR      r0,|L14.264|
000066  f7fffffe          BL       LL_DMA_SetDataTransferDirection
;;;155    
;;;156      LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
00006a  2200              MOVS     r2,#0
00006c  2106              MOVS     r1,#6
00006e  4826              LDR      r0,|L14.264|
000070  f7fffffe          BL       LL_DMA_SetStreamPriorityLevel
;;;157    
;;;158      LL_DMA_SetMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
000074  2200              MOVS     r2,#0
000076  2106              MOVS     r1,#6
000078  4823              LDR      r0,|L14.264|
00007a  f7fffffe          BL       LL_DMA_SetMode
;;;159    
;;;160      LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
00007e  2200              MOVS     r2,#0
000080  2106              MOVS     r1,#6
000082  4821              LDR      r0,|L14.264|
000084  f7fffffe          BL       LL_DMA_SetPeriphIncMode
;;;161    
;;;162      LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
000088  f44f6280          MOV      r2,#0x400
00008c  2106              MOVS     r1,#6
00008e  481e              LDR      r0,|L14.264|
000090  f7fffffe          BL       LL_DMA_SetMemoryIncMode
;;;163    
;;;164      LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_BYTE);
000094  2200              MOVS     r2,#0
000096  2106              MOVS     r1,#6
000098  481b              LDR      r0,|L14.264|
00009a  f7fffffe          BL       LL_DMA_SetPeriphSize
;;;165    
;;;166      LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_BYTE);
00009e  2200              MOVS     r2,#0
0000a0  2106              MOVS     r1,#6
0000a2  4819              LDR      r0,|L14.264|
0000a4  f7fffffe          BL       LL_DMA_SetMemorySize
;;;167    
;;;168      LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_6);
0000a8  2106              MOVS     r1,#6
0000aa  4817              LDR      r0,|L14.264|
0000ac  f7fffffe          BL       LL_DMA_DisableFifoMode
;;;169    
;;;170      /* USART2 interrupt Init */
;;;171      NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
0000b0  f7fffffe          BL       NVIC_GetPriorityGrouping
0000b4  4605              MOV      r5,r0
0000b6  2200              MOVS     r2,#0
0000b8  4611              MOV      r1,r2
0000ba  f7fffffe          BL       NVIC_EncodePriority
0000be  4604              MOV      r4,r0
0000c0  4621              MOV      r1,r4
0000c2  2026              MOVS     r0,#0x26
0000c4  f7fffffe          BL       NVIC_SetPriority
;;;172      NVIC_EnableIRQ(USART2_IRQn);
0000c8  2026              MOVS     r0,#0x26
0000ca  f7fffffe          BL       NVIC_EnableIRQ
;;;173    
;;;174      USART_InitStruct.BaudRate = 115200;
0000ce  f44f30e1          MOV      r0,#0x1c200
0000d2  9008              STR      r0,[sp,#0x20]
;;;175      USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
0000d4  2000              MOVS     r0,#0
0000d6  9009              STR      r0,[sp,#0x24]
;;;176      USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
0000d8  900a              STR      r0,[sp,#0x28]
;;;177      USART_InitStruct.Parity = LL_USART_PARITY_NONE;
0000da  900b              STR      r0,[sp,#0x2c]
;;;178      USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
0000dc  200c              MOVS     r0,#0xc
0000de  900c              STR      r0,[sp,#0x30]
;;;179      USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
0000e0  2000              MOVS     r0,#0
0000e2  900d              STR      r0,[sp,#0x34]
;;;180      USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
0000e4  900e              STR      r0,[sp,#0x38]
;;;181      LL_USART_Init(USART2, &USART_InitStruct);
0000e6  a908              ADD      r1,sp,#0x20
0000e8  4808              LDR      r0,|L14.268|
0000ea  f7fffffe          BL       LL_USART_Init
;;;182      LL_USART_ConfigAsyncMode(USART2);
0000ee  4807              LDR      r0,|L14.268|
0000f0  f7fffffe          BL       LL_USART_ConfigAsyncMode
;;;183      LL_USART_Enable(USART2);
0000f4  4805              LDR      r0,|L14.268|
0000f6  f7fffffe          BL       LL_USART_Enable
;;;184    
;;;185    }
0000fa  b00f              ADD      sp,sp,#0x3c
0000fc  bd30              POP      {r4,r5,pc}
;;;186    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L14.256|
                          DCD      0x40023840
                  |L14.260|
                          DCD      0x40020c00
                  |L14.264|
                          DCD      0x40026000
                  |L14.268|
                          DCD      0x40004400

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1625    */
;;;1626   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1627   {
;;;1628     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0942              LSRS     r2,r0,#5
00000a  0092              LSLS     r2,r2,#2
00000c  f10222e0          ADD      r2,r2,#0xe000e000
000010  f8c21100          STR      r1,[r2,#0x100]
;;;1629   }
000014  4770              BX       lr
;;;1630   
                          ENDP


                          AREA ||i.NVIC_EncodePriority||, CODE, READONLY, ALIGN=1

                  NVIC_EncodePriority PROC
;;;1744    */
;;;1745   __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1746   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1747     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
000006  f0030107          AND      r1,r3,#7
;;;1748     uint32_t PreemptPriorityBits;
;;;1749     uint32_t SubPriorityBits;
;;;1750   
;;;1751     PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
00000a  f1c10007          RSB      r0,r1,#7
00000e  2804              CMP      r0,#4
000010  d901              BLS      |L16.22|
000012  2004              MOVS     r0,#4
000014  e001              B        |L16.26|
                  |L16.22|
000016  f1c10007          RSB      r0,r1,#7
                  |L16.26|
00001a  4606              MOV      r6,r0
;;;1752     SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
00001c  1d08              ADDS     r0,r1,#4
00001e  2807              CMP      r0,#7
000020  d201              BCS      |L16.38|
000022  2000              MOVS     r0,#0
000024  e000              B        |L16.40|
                  |L16.38|
000026  1ec8              SUBS     r0,r1,#3
                  |L16.40|
000028  4605              MOV      r5,r0
;;;1753   
;;;1754     return (
00002a  2001              MOVS     r0,#1
00002c  40b0              LSLS     r0,r0,r6
00002e  1e40              SUBS     r0,r0,#1
000030  4020              ANDS     r0,r0,r4
000032  40a8              LSLS     r0,r0,r5
000034  2701              MOVS     r7,#1
000036  40af              LSLS     r7,r7,r5
000038  1e7f              SUBS     r7,r7,#1
00003a  4017              ANDS     r7,r7,r2
00003c  4338              ORRS     r0,r0,r7
;;;1755              ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
;;;1756              ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
;;;1757            );
;;;1758   }
00003e  bdf0              POP      {r4-r7,pc}
;;;1759   
                          ENDP


                          AREA ||i.NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  NVIC_GetPriorityGrouping PROC
;;;1614    */
;;;1615   __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L17.12|
;;;1616   {
;;;1617     return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;1618   }
000008  4770              BX       lr
;;;1619   
                          ENDP

00000a  0000              DCW      0x0000
                  |L17.12|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;1697    */
;;;1698   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1699   {
;;;1700     if ((int32_t)(IRQn) < 0)
000002  2800              CMP      r0,#0
000004  da07              BGE      |L18.22|
;;;1701     {
;;;1702       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e14              LSRS     r4,r2,#24
00000a  4a05              LDR      r2,|L18.32|
00000c  f000030f          AND      r3,r0,#0xf
000010  1f1b              SUBS     r3,r3,#4
000012  54d4              STRB     r4,[r2,r3]
000014  e003              B        |L18.30|
                  |L18.22|
;;;1703     }
;;;1704     else
;;;1705     {
;;;1706       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000016  070a              LSLS     r2,r1,#28
000018  0e13              LSRS     r3,r2,#24
00001a  4a02              LDR      r2,|L18.36|
00001c  5413              STRB     r3,[r2,r0]
                  |L18.30|
;;;1707     }
;;;1708   }
00001e  bd10              POP      {r4,pc}
;;;1709   
                          ENDP

                  |L18.32|
                          DCD      0xe000ed18
                  |L18.36|
                          DCD      0xe000e400

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8
                  aRCC_PLLSAIDIVRPrescTable
000008  02040810          DCB      0x02,0x04,0x08,0x10
                  OFFSET_TAB_CCMRx
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  040404            DCB      0x04,0x04,0x04
                  SHIFT_TAB_OCxx
000013  00                DCB      0x00
000014  00080000          DCB      0x00,0x08,0x00,0x00
000018  0008              DCB      0x00,0x08
                  SHIFT_TAB_ICxx
00001a  0000              DCB      0x00,0x00
00001c  08000000          DCB      0x08,0x00,0x00,0x00
000020  08                DCB      0x08
                  SHIFT_TAB_CCxP
000021  000204            DCB      0x00,0x02,0x04
000024  06080a0c          DCB      0x06,0x08,0x0a,0x0c
                  SHIFT_TAB_OISx
000028  00010203          DCB      0x00,0x01,0x02,0x03
00002c  040506            DCB      0x04,0x05,0x06

;*** Start embedded assembler ***

#line 1 "../Src/usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_aa2567c7____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___7_usart_c_aa2567c7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_aa2567c7____REVSH|
#line 402
|__asm___7_usart_c_aa2567c7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_aa2567c7____RRX|
#line 587
|__asm___7_usart_c_aa2567c7____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
