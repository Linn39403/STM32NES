; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\lcd_main.o --depend=stm32nes\lcd_main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\lcd_main.crf ..\Src\lcd_main.c]
                          THUMB

                          AREA ||i.LL_GPIO_ResetOutputPin||, CODE, READONLY, ALIGN=1

                  LL_GPIO_ResetOutputPin PROC
;;;926      */
;;;927    __STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
000000  040a              LSLS     r2,r1,#16
;;;928    {
;;;929      WRITE_REG(GPIOx->BSRR, (PinMask << 16));
000002  6182              STR      r2,[r0,#0x18]
;;;930    }
000004  4770              BX       lr
;;;931    
                          ENDP


                          AREA ||i.LL_GPIO_SetOutputPin||, CODE, READONLY, ALIGN=1

                  LL_GPIO_SetOutputPin PROC
;;;897      */
;;;898    __STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
000000  6181              STR      r1,[r0,#0x18]
;;;899    {
;;;900      WRITE_REG(GPIOx->BSRR, PinMask);
;;;901    }
000002  4770              BX       lr
;;;902    
                          ENDP


                          AREA ||i.ftos||, CODE, READONLY, ALIGN=1

                  ftos PROC
;;;149     */
;;;150    static inline char* ftos(char *data, float a, uint32_t dp) {
000000  b570              PUSH     {r4-r6,lr}
000002  ed2d8b02          VPUSH    {d8}
000006  4605              MOV      r5,r0
000008  eeb08a40          VMOV.F32 s16,s0
00000c  460e              MOV      r6,r1
;;;151    	int32_t i = a;
00000e  eebd0ac8          VCVT.S32.F32 s0,s16
000012  ee104a10          VMOV     r4,s0
;;;152    	if (a < 0) { *data++ = '-'; i=-i; a=-a-i; }
000016  eeb58ac0          VCMPE.F32 s16,#0.0
00001a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00001e  d20e              BCS      |L3.62|
000020  202d              MOVS     r0,#0x2d
000022  f8050b01          STRB     r0,[r5],#1
000026  4264              RSBS     r4,r4,#0
000028  eef10a48          VNEG.F32 s1,s16
00002c  ee004a10          VMOV     s0,r4
000030  eeb80ac0          VCVT.F32.S32 s0,s0
000034  ee300ac0          VSUB.F32 s0,s1,s0
000038  eeb08a40          VMOV.F32 s16,s0
00003c  e007              B        |L3.78|
                  |L3.62|
;;;153    	else { a=a-i; }
00003e  ee004a10          VMOV     s0,r4
000042  eeb80ac0          VCVT.F32.S32 s0,s0
000046  ee380a40          VSUB.F32 s0,s16,s0
00004a  eeb08a40          VMOV.F32 s16,s0
                  |L3.78|
;;;154    	data = itos(data, i);
00004e  4621              MOV      r1,r4
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       itos
000056  4605              MOV      r5,r0
;;;155    	*data++ = '.';
000058  202e              MOVS     r0,#0x2e
00005a  f8050b01          STRB     r0,[r5],#1
;;;156    	float d = a;
00005e  eef08a48          VMOV.F32 s17,s16
;;;157    	while (dp--) {
000062  e005              B        |L3.112|
                  |L3.100|
;;;158    		d*=10;
000064  eeb20a04          VMOV.F32 s0,#10.00000000
000068  ee280a80          VMUL.F32 s0,s17,s0
00006c  eef08a40          VMOV.F32 s17,s0
                  |L3.112|
000070  1e30              SUBS     r0,r6,#0              ;157
000072  f1a60601          SUB      r6,r6,#1              ;157
000076  d1f5              BNE      |L3.100|
;;;159    	}
;;;160    	data = utos(data, (uint32_t)(d+0.5f));
000078  eeb60a00          VMOV.F32 s0,#0.50000000
00007c  ee380a80          VADD.F32 s0,s17,s0
000080  eebc0ac0          VCVT.U32.F32 s0,s0
000084  ee101a10          VMOV     r1,s0
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       utos
00008e  4605              MOV      r5,r0
;;;161    	return data;
000090  4628              MOV      r0,r5
;;;162    }
000092  ecbd8b02          VPOP     {d8}
000096  bd70              POP      {r4-r6,pc}
;;;163    
                          ENDP


                          AREA ||i.itos||, CODE, READONLY, ALIGN=1

                  itos PROC
;;;11      */
;;;12     static inline char* itos(char *data, int32_t i) {
000000  b51f              PUSH     {r0-r4,lr}
000002  460a              MOV      r2,r1
;;;13     	if (i < 0) {
000004  2a00              CMP      r2,#0
000006  da03              BGE      |L4.16|
;;;14     		i = -i;
000008  4252              RSBS     r2,r2,#0
;;;15     		*data++ = '-';
00000a  232d              MOVS     r3,#0x2d
00000c  f8003b01          STRB     r3,[r0],#1
                  |L4.16|
;;;16     	}
;;;17     	char buf[14] = {0};
000010  2300              MOVS     r3,#0
000012  9300              STR      r3,[sp,#0]
000014  9301              STR      r3,[sp,#4]
000016  9302              STR      r3,[sp,#8]
000018  9303              STR      r3,[sp,#0xc]
;;;18     	char* ptr = &buf[1];
00001a  f10d0101          ADD      r1,sp,#1
;;;19     	do {
00001e  bf00              NOP      
                  |L4.32|
;;;20     		*ptr++ = '0' + (i%10);
000020  230a              MOVS     r3,#0xa
000022  fb92f4f3          SDIV     r4,r2,r3
000026  fb032314          MLS      r3,r3,r4,r2
00002a  3330              ADDS     r3,r3,#0x30
00002c  f8013b01          STRB     r3,[r1],#1
;;;21     		i /= 10;
000030  230a              MOVS     r3,#0xa
000032  fb92f2f3          SDIV     r2,r2,r3
;;;22     	} while(i);
000036  2a00              CMP      r2,#0
000038  d1f2              BNE      |L4.32|
;;;23     	ptr--;
00003a  1e49              SUBS     r1,r1,#1
;;;24     	while (*ptr) {
00003c  e003              B        |L4.70|
                  |L4.62|
;;;25     		*data++ = *ptr--;
00003e  f8113901          LDRB     r3,[r1],#-1
000042  f8003b01          STRB     r3,[r0],#1
                  |L4.70|
000046  780b              LDRB     r3,[r1,#0]            ;24
000048  2b00              CMP      r3,#0                 ;24
00004a  d1f8              BNE      |L4.62|
;;;26     	}
;;;27     	*data = '\0';
00004c  7003              STRB     r3,[r0,#0]
;;;28     	return data;
;;;29     }
00004e  b004              ADD      sp,sp,#0x10
000050  bd10              POP      {r4,pc}
;;;30     
                          ENDP


                          AREA ||i.ltos||, CODE, READONLY, ALIGN=1

                  ltos PROC
;;;38      */
;;;39     static inline char* ltos(char *data, int64_t i) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b087              SUB      sp,sp,#0x1c
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;40     	if (i < 0) {
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  1a61              SUBS     r1,r4,r1
000010  eb750000          SBCS     r0,r5,r0
000014  da06              BGE      |L5.36|
;;;41     		i = -i;
000016  2200              MOVS     r2,#0
000018  4264              RSBS     r4,r4,#0
00001a  eb620505          SBC      r5,r2,r5
;;;42     		*data++ = '-';
00001e  202d              MOVS     r0,#0x2d
000020  f8070b01          STRB     r0,[r7],#1
                  |L5.36|
;;;43     	}
;;;44     	char buf[24] = {0};
000024  2118              MOVS     r1,#0x18
000026  a801              ADD      r0,sp,#4
000028  f7fffffe          BL       __aeabi_memclr4
;;;45     	char* ptr = &buf[1];
00002c  f10d0605          ADD      r6,sp,#5
;;;46     	do {
000030  bf00              NOP      
                  |L5.50|
;;;47     		*ptr++ = '0' + (i%10);
000032  220a              MOVS     r2,#0xa
000034  2300              MOVS     r3,#0
000036  4620              MOV      r0,r4
000038  4629              MOV      r1,r5
00003a  f7fffffe          BL       __aeabi_ldivmod
00003e  2030              MOVS     r0,#0x30
000040  1810              ADDS     r0,r2,r0
000042  f8060b01          STRB     r0,[r6],#1
;;;48     		i /= 10;
000046  f04f020a          MOV      r2,#0xa
00004a  f04f0300          MOV      r3,#0
00004e  4620              MOV      r0,r4
000050  4629              MOV      r1,r5
000052  f7fffffe          BL       __aeabi_ldivmod
000056  4604              MOV      r4,r0
000058  460d              MOV      r5,r1
;;;49     	} while(i);
00005a  2100              MOVS     r1,#0
00005c  ea840001          EOR      r0,r4,r1
000060  4069              EORS     r1,r1,r5
000062  4308              ORRS     r0,r0,r1
000064  d1e5              BNE      |L5.50|
;;;50     	ptr--;
000066  1e76              SUBS     r6,r6,#1
;;;51     	while (*ptr) {
000068  e003              B        |L5.114|
                  |L5.106|
;;;52     		*data++ = *ptr--;
00006a  f8160901          LDRB     r0,[r6],#-1
00006e  f8070b01          STRB     r0,[r7],#1
                  |L5.114|
000072  7830              LDRB     r0,[r6,#0]            ;51
000074  2800              CMP      r0,#0                 ;51
000076  d1f8              BNE      |L5.106|
;;;53     	}
;;;54     	*data = '\0';
000078  7038              STRB     r0,[r7,#0]
;;;55     	return data;
00007a  4638              MOV      r0,r7
;;;56     }
00007c  b007              ADD      sp,sp,#0x1c
00007e  bdf0              POP      {r4-r7,pc}
;;;57     
                          ENDP


                          AREA ||i.print||, CODE, READONLY, ALIGN=2

                  print PROC
;;;293    
;;;294    static int print( char **out, const char *format, va_list args )
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;295    {
000004  b084              SUB      sp,sp,#0x10
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
;;;296    	register int width, pad;
;;;297    	register int pc = 0;
00000a  2500              MOVS     r5,#0
;;;298    	char scr[2];
;;;299    
;;;300    	for (; *format != 0; ++format) {
00000c  e0a4              B        |L6.344|
                  |L6.14|
;;;301    		if (*format == '%') {
00000e  7820              LDRB     r0,[r4,#0]
000010  2825              CMP      r0,#0x25
000012  d17d              BNE      |L6.272|
;;;302    			++format;
000014  1c64              ADDS     r4,r4,#1
;;;303    			width = pad = 0;
000016  2000              MOVS     r0,#0
000018  4607              MOV      r7,r0
00001a  4606              MOV      r6,r0
;;;304    			if (*format == '\0') break;
00001c  7820              LDRB     r0,[r4,#0]
00001e  b900              CBNZ     r0,|L6.34|
000020  e09e              B        |L6.352|
                  |L6.34|
;;;305    			if (*format == '%') goto out;
000022  7820              LDRB     r0,[r4,#0]
000024  2825              CMP      r0,#0x25
000026  d100              BNE      |L6.42|
000028  e089              B        |L6.318|
                  |L6.42|
;;;306    			if (*format == '-') {
00002a  7820              LDRB     r0,[r4,#0]
00002c  282d              CMP      r0,#0x2d
00002e  d101              BNE      |L6.52|
;;;307    				++format;
000030  1c64              ADDS     r4,r4,#1
;;;308    				pad = PAD_RIGHT;
000032  2701              MOVS     r7,#1
                  |L6.52|
;;;309    			}
;;;310    			while (*format == '0') {
000034  e002              B        |L6.60|
                  |L6.54|
;;;311    				++format;
000036  1c64              ADDS     r4,r4,#1
;;;312    				pad |= PAD_ZERO;
000038  f0470702          ORR      r7,r7,#2
                  |L6.60|
00003c  7820              LDRB     r0,[r4,#0]            ;310
00003e  2830              CMP      r0,#0x30              ;310
000040  d0f9              BEQ      |L6.54|
;;;313    			}
;;;314    			for ( ; *format >= '0' && *format <= '9'; ++format) {
000042  e006              B        |L6.82|
                  |L6.68|
;;;315    				width *= 10;
000044  eb060086          ADD      r0,r6,r6,LSL #2
000048  0046              LSLS     r6,r0,#1
;;;316    				width += *format - '0';
00004a  7820              LDRB     r0,[r4,#0]
00004c  3830              SUBS     r0,r0,#0x30
00004e  4406              ADD      r6,r6,r0
000050  1c64              ADDS     r4,r4,#1              ;314
                  |L6.82|
000052  7820              LDRB     r0,[r4,#0]            ;314
000054  2830              CMP      r0,#0x30              ;314
000056  db02              BLT      |L6.94|
000058  7820              LDRB     r0,[r4,#0]            ;314
00005a  2839              CMP      r0,#0x39              ;314
00005c  ddf2              BLE      |L6.68|
                  |L6.94|
;;;317    			}
;;;318    			if( *format == 's' ) {
00005e  7820              LDRB     r0,[r4,#0]
000060  2873              CMP      r0,#0x73
000062  d111              BNE      |L6.136|
;;;319    				register char *s = (char *)va_arg( args, int );
000064  9806              LDR      r0,[sp,#0x18]
000066  f8509b04          LDR      r9,[r0],#4
00006a  9006              STR      r0,[sp,#0x18]
;;;320    				pc += prints (out, s?s:"(null)", width, pad);
00006c  f1b90f00          CMP      r9,#0
000070  d001              BEQ      |L6.118|
000072  4648              MOV      r0,r9
000074  e000              B        |L6.120|
                  |L6.118|
000076  a03e              ADR      r0,|L6.368|
                  |L6.120|
000078  4601              MOV      r1,r0
00007a  463b              MOV      r3,r7
00007c  4632              MOV      r2,r6
00007e  4640              MOV      r0,r8
000080  f7fffffe          BL       prints
000084  4405              ADD      r5,r5,r0
;;;321    				continue;
000086  e066              B        |L6.342|
                  |L6.136|
;;;322    			}
;;;323    			if( *format == 'd' ) {
000088  7820              LDRB     r0,[r4,#0]
00008a  2864              CMP      r0,#0x64
00008c  d10d              BNE      |L6.170|
;;;324    				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
00008e  2061              MOVS     r0,#0x61
000090  e9cd6700          STRD     r6,r7,[sp,#0]
000094  9002              STR      r0,[sp,#8]
000096  9806              LDR      r0,[sp,#0x18]
000098  c802              LDM      r0!,{r1}
00009a  2301              MOVS     r3,#1
00009c  220a              MOVS     r2,#0xa
00009e  9006              STR      r0,[sp,#0x18]
0000a0  4640              MOV      r0,r8
0000a2  f7fffffe          BL       printi
0000a6  4405              ADD      r5,r5,r0
;;;325    				continue;
0000a8  e055              B        |L6.342|
                  |L6.170|
;;;326    			}
;;;327    			if( *format == 'x' ) {
0000aa  7820              LDRB     r0,[r4,#0]
0000ac  2878              CMP      r0,#0x78
0000ae  d10d              BNE      |L6.204|
;;;328    				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
0000b0  2061              MOVS     r0,#0x61
0000b2  e9cd6700          STRD     r6,r7,[sp,#0]
0000b6  9002              STR      r0,[sp,#8]
0000b8  9806              LDR      r0,[sp,#0x18]
0000ba  c802              LDM      r0!,{r1}
0000bc  2300              MOVS     r3,#0
0000be  2210              MOVS     r2,#0x10
0000c0  9006              STR      r0,[sp,#0x18]
0000c2  4640              MOV      r0,r8
0000c4  f7fffffe          BL       printi
0000c8  4405              ADD      r5,r5,r0
;;;329    				continue;
0000ca  e044              B        |L6.342|
                  |L6.204|
;;;330    			}
;;;331    			if( *format == 'X' ) {
0000cc  7820              LDRB     r0,[r4,#0]
0000ce  2858              CMP      r0,#0x58
0000d0  d10d              BNE      |L6.238|
;;;332    				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
0000d2  2041              MOVS     r0,#0x41
0000d4  e9cd6700          STRD     r6,r7,[sp,#0]
0000d8  9002              STR      r0,[sp,#8]
0000da  9806              LDR      r0,[sp,#0x18]
0000dc  c802              LDM      r0!,{r1}
0000de  2300              MOVS     r3,#0
0000e0  2210              MOVS     r2,#0x10
0000e2  9006              STR      r0,[sp,#0x18]
0000e4  4640              MOV      r0,r8
0000e6  f7fffffe          BL       printi
0000ea  4405              ADD      r5,r5,r0
;;;333    				continue;
0000ec  e033              B        |L6.342|
                  |L6.238|
;;;334    			}
;;;335    			if( *format == 'u' ) {
0000ee  7820              LDRB     r0,[r4,#0]
0000f0  2875              CMP      r0,#0x75
0000f2  d10e              BNE      |L6.274|
;;;336    				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
0000f4  2061              MOVS     r0,#0x61
0000f6  e9cd6700          STRD     r6,r7,[sp,#0]
0000fa  9002              STR      r0,[sp,#8]
0000fc  9806              LDR      r0,[sp,#0x18]
0000fe  c802              LDM      r0!,{r1}
000100  2300              MOVS     r3,#0
000102  220a              MOVS     r2,#0xa
000104  9006              STR      r0,[sp,#0x18]
000106  4640              MOV      r0,r8
000108  f7fffffe          BL       printi
00010c  4405              ADD      r5,r5,r0
;;;337    				continue;
00010e  e022              B        |L6.342|
                  |L6.272|
000110  e014              B        |L6.316|
                  |L6.274|
;;;338    			}
;;;339    			if( *format == 'c' ) {
000112  7820              LDRB     r0,[r4,#0]
000114  2863              CMP      r0,#0x63
000116  d11d              BNE      |L6.340|
;;;340    				/* char are converted to int then pushed on the stack */
;;;341    				scr[0] = (char)va_arg( args, int );
000118  9806              LDR      r0,[sp,#0x18]
00011a  f8101b04          LDRB     r1,[r0],#4
00011e  9006              STR      r0,[sp,#0x18]
000120  b2c8              UXTB     r0,r1
000122  f88d000c          STRB     r0,[sp,#0xc]
;;;342    				scr[1] = '\0';
000126  2000              MOVS     r0,#0
000128  f88d000d          STRB     r0,[sp,#0xd]
;;;343    				pc += prints (out, scr, width, pad);
00012c  463b              MOV      r3,r7
00012e  4632              MOV      r2,r6
000130  a903              ADD      r1,sp,#0xc
000132  4640              MOV      r0,r8
000134  f7fffffe          BL       prints
000138  4405              ADD      r5,r5,r0
;;;344    				continue;
00013a  e00c              B        |L6.342|
                  |L6.316|
;;;345    			}
;;;346    		}
;;;347    		else {
;;;348    			out:
00013c  bf00              NOP      
                  |L6.318|
;;;349    			printchar (out, *format);
00013e  7820              LDRB     r0,[r4,#0]
000140  f8d81000          LDR      r1,[r8,#0]
000144  7008              STRB     r0,[r1,#0]
000146  f8d81000          LDR      r1,[r8,#0]
00014a  1c49              ADDS     r1,r1,#1
00014c  f8c81000          STR      r1,[r8,#0]
000150  bf00              NOP      
;;;350    			++pc;
000152  1c6d              ADDS     r5,r5,#1
                  |L6.340|
000154  bf00              NOP                            ;321
                  |L6.342|
000156  1c64              ADDS     r4,r4,#1              ;300
                  |L6.344|
000158  7820              LDRB     r0,[r4,#0]            ;300
00015a  2800              CMP      r0,#0                 ;300
00015c  f47faf57          BNE      |L6.14|
                  |L6.352|
000160  bf00              NOP                            ;304
;;;351    		}
;;;352    	}
;;;353    	va_end( args );
000162  2000              MOVS     r0,#0
000164  9006              STR      r0,[sp,#0x18]
;;;354    	return pc;
000166  4628              MOV      r0,r5
;;;355    }
000168  b007              ADD      sp,sp,#0x1c
00016a  e8bd83f0          POP      {r4-r9,pc}
;;;356    
                          ENDP

00016e  0000              DCW      0x0000
                  |L6.368|
000170  286e756c          DCB      "(null)",0
000174  6c2900  
000177  00                DCB      0

                          AREA ||i.printi||, CODE, READONLY, ALIGN=1

                  printi PROC
;;;250    
;;;251    static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;252    {
000004  b085              SUB      sp,sp,#0x14
000006  4606              MOV      r6,r0
000008  460c              MOV      r4,r1
00000a  4617              MOV      r7,r2
00000c  469b              MOV      r11,r3
00000e  f8dd9038          LDR      r9,[sp,#0x38]
;;;253    	char print_buf[PRINT_BUF_LEN];
;;;254    	register char *s;
;;;255    	register int t, neg = 0, pc = 0;
000012  2000              MOVS     r0,#0
000014  9001              STR      r0,[sp,#4]
000016  9000              STR      r0,[sp,#0]
;;;256    	register unsigned int u = (unsigned int)i;
000018  46a0              MOV      r8,r4
;;;257    
;;;258    	if (i == 0) {
00001a  b974              CBNZ     r4,|L7.58|
;;;259    		print_buf[0] = '0';
00001c  2030              MOVS     r0,#0x30
00001e  f88d0008          STRB     r0,[sp,#8]
;;;260    		print_buf[1] = '\0';
000022  2000              MOVS     r0,#0
000024  f88d0009          STRB     r0,[sp,#9]
;;;261    		return prints (out, print_buf, width, pad);
000028  464a              MOV      r2,r9
00002a  a902              ADD      r1,sp,#8
00002c  4630              MOV      r0,r6
00002e  9b0f              LDR      r3,[sp,#0x3c]
000030  f7fffffe          BL       prints
                  |L7.52|
;;;262    	}
;;;263    
;;;264    	if (sg && b == 10 && i < 0) {
;;;265    		neg = 1;
;;;266    		u = (unsigned int)-i;
;;;267    	}
;;;268    
;;;269    	s = print_buf + PRINT_BUF_LEN-1;
;;;270    	*s = '\0';
;;;271    
;;;272    	while (u) {
;;;273    		t = (unsigned int)u % b;
;;;274    		if( t >= 10 )
;;;275    			t += letbase - '0' - 10;
;;;276    		*--s = (char)(t + '0');
;;;277    		u /= b;
;;;278    	}
;;;279    
;;;280    	if (neg) {
;;;281    		if( width && (pad & PAD_ZERO) ) {
;;;282    			printchar (out, '-');
;;;283    			++pc;
;;;284    			--width;
;;;285    		}
;;;286    		else {
;;;287    			*--s = '-';
;;;288    		}
;;;289    	}
;;;290    
;;;291    	return pc + prints (out, s, width, pad);
;;;292    }
000034  b005              ADD      sp,sp,#0x14
000036  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.58|
00003a  f1bb0f00          CMP      r11,#0                ;264
00003e  d007              BEQ      |L7.80|
000040  2f0a              CMP      r7,#0xa               ;264
000042  d105              BNE      |L7.80|
000044  2c00              CMP      r4,#0                 ;264
000046  da03              BGE      |L7.80|
000048  2001              MOVS     r0,#1                 ;265
00004a  9001              STR      r0,[sp,#4]            ;265
00004c  f1c40800          RSB      r8,r4,#0              ;266
                  |L7.80|
000050  f10d0513          ADD      r5,sp,#0x13           ;269
000054  2000              MOVS     r0,#0                 ;270
000056  7028              STRB     r0,[r5,#0]            ;270
000058  e011              B        |L7.126|
                  |L7.90|
00005a  fbb8f0f7          UDIV     r0,r8,r7              ;273
00005e  fb078a10          MLS      r10,r7,r0,r8          ;273
000062  f1ba0f0a          CMP      r10,#0xa              ;274
000066  db02              BLT      |L7.110|
000068  9810              LDR      r0,[sp,#0x40]         ;275
00006a  383a              SUBS     r0,r0,#0x3a           ;275
00006c  4482              ADD      r10,r10,r0            ;275
                  |L7.110|
00006e  f10a0030          ADD      r0,r10,#0x30          ;276
000072  b2c1              UXTB     r1,r0                 ;276
000074  1e68              SUBS     r0,r5,#1              ;276
000076  4605              MOV      r5,r0                 ;276
000078  7001              STRB     r1,[r0,#0]            ;276
00007a  fbb8f8f7          UDIV     r8,r8,r7              ;277
                  |L7.126|
00007e  f1b80f00          CMP      r8,#0                 ;272
000082  d1ea              BNE      |L7.90|
000084  9801              LDR      r0,[sp,#4]            ;280
000086  b1b8              CBZ      r0,|L7.184|
000088  f1b90f00          CMP      r9,#0                 ;281
00008c  d010              BEQ      |L7.176|
00008e  980f              LDR      r0,[sp,#0x3c]         ;281
000090  f0000002          AND      r0,r0,#2              ;281
000094  b160              CBZ      r0,|L7.176|
000096  202d              MOVS     r0,#0x2d              ;282
000098  6831              LDR      r1,[r6,#0]            ;282
00009a  7008              STRB     r0,[r1,#0]            ;282
00009c  6831              LDR      r1,[r6,#0]            ;282
00009e  1c49              ADDS     r1,r1,#1              ;282
0000a0  6031              STR      r1,[r6,#0]            ;282
0000a2  bf00              NOP                            ;282
0000a4  9800              LDR      r0,[sp,#0]            ;283
0000a6  1c40              ADDS     r0,r0,#1              ;283
0000a8  9000              STR      r0,[sp,#0]            ;283
0000aa  f1a90901          SUB      r9,r9,#1              ;284
0000ae  e003              B        |L7.184|
                  |L7.176|
0000b0  212d              MOVS     r1,#0x2d              ;287
0000b2  1e68              SUBS     r0,r5,#1              ;287
0000b4  4605              MOV      r5,r0                 ;287
0000b6  7001              STRB     r1,[r0,#0]            ;287
                  |L7.184|
0000b8  464a              MOV      r2,r9                 ;291
0000ba  4629              MOV      r1,r5                 ;291
0000bc  4630              MOV      r0,r6                 ;291
0000be  9b0f              LDR      r3,[sp,#0x3c]         ;291
0000c0  f7fffffe          BL       prints
0000c4  9900              LDR      r1,[sp,#0]            ;291
0000c6  4408              ADD      r0,r0,r1              ;291
0000c8  e7b4              B        |L7.52|
;;;293    
                          ENDP


                          AREA ||i.prints||, CODE, READONLY, ALIGN=1

                  prints PROC
;;;217    
;;;218    static int prints(char **out, const char *string, int width, int pad)
000000  b5f0              PUSH     {r4-r7,lr}
;;;219    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;220    	register int pc = 0, padchar = ' ';
000006  2000              MOVS     r0,#0
000008  2120              MOVS     r1,#0x20
;;;221    
;;;222    	if (width > 0) {
00000a  2a00              CMP      r2,#0
00000c  dd15              BLE      |L8.58|
;;;223    		register int len = 0;
00000e  2600              MOVS     r6,#0
;;;224    		register const char *ptr;
;;;225    		for (ptr = string; *ptr; ++ptr) ++len;
000010  462f              MOV      r7,r5
000012  e001              B        |L8.24|
                  |L8.20|
000014  1c76              ADDS     r6,r6,#1
000016  1c7f              ADDS     r7,r7,#1
                  |L8.24|
000018  f897c000          LDRB     r12,[r7,#0]
00001c  f1bc0f00          CMP      r12,#0
000020  d1f8              BNE      |L8.20|
;;;226    			if (len >= width) width = 0;
000022  4296              CMP      r6,r2
000024  db01              BLT      |L8.42|
000026  2200              MOVS     r2,#0
000028  e000              B        |L8.44|
                  |L8.42|
;;;227    		else width -= len;
00002a  1b92              SUBS     r2,r2,r6
                  |L8.44|
;;;228    		if (pad & PAD_ZERO) padchar = '0';
00002c  f0030c02          AND      r12,r3,#2
000030  f1bc0f00          CMP      r12,#0
000034  d000              BEQ      |L8.56|
000036  2130              MOVS     r1,#0x30
                  |L8.56|
;;;229    	}
000038  bf00              NOP      
                  |L8.58|
;;;230    	if (!(pad & PAD_RIGHT)) {
00003a  f0030601          AND      r6,r3,#1
00003e  b95e              CBNZ     r6,|L8.88|
;;;231    		for ( ; width > 0; --width) {
000040  e008              B        |L8.84|
                  |L8.66|
;;;232    			printchar (out, padchar);
000042  bf00              NOP      
000044  6827              LDR      r7,[r4,#0]
000046  7039              STRB     r1,[r7,#0]
000048  6826              LDR      r6,[r4,#0]
00004a  1c76              ADDS     r6,r6,#1
00004c  6026              STR      r6,[r4,#0]
00004e  bf00              NOP      
;;;233    			++pc;
000050  1c40              ADDS     r0,r0,#1
000052  1e52              SUBS     r2,r2,#1              ;231
                  |L8.84|
000054  2a00              CMP      r2,#0                 ;231
000056  dcf4              BGT      |L8.66|
                  |L8.88|
;;;234    		}
;;;235    	}
;;;236    	for ( ; *string ; ++string) {
000058  e008              B        |L8.108|
                  |L8.90|
;;;237    		printchar (out, *string);
00005a  782e              LDRB     r6,[r5,#0]
00005c  6827              LDR      r7,[r4,#0]
00005e  703e              STRB     r6,[r7,#0]
000060  6827              LDR      r7,[r4,#0]
000062  1c7f              ADDS     r7,r7,#1
000064  6027              STR      r7,[r4,#0]
000066  bf00              NOP      
;;;238    		++pc;
000068  1c40              ADDS     r0,r0,#1
00006a  1c6d              ADDS     r5,r5,#1              ;236
                  |L8.108|
00006c  782e              LDRB     r6,[r5,#0]            ;236
00006e  2e00              CMP      r6,#0                 ;236
000070  d1f3              BNE      |L8.90|
;;;239    	}
;;;240    	for ( ; width > 0; --width) {
000072  e008              B        |L8.134|
                  |L8.116|
;;;241    		printchar (out, padchar);
000074  bf00              NOP      
000076  6827              LDR      r7,[r4,#0]
000078  7039              STRB     r1,[r7,#0]
00007a  6826              LDR      r6,[r4,#0]
00007c  1c76              ADDS     r6,r6,#1
00007e  6026              STR      r6,[r4,#0]
000080  bf00              NOP      
;;;242    		++pc;
000082  1c40              ADDS     r0,r0,#1
000084  1e52              SUBS     r2,r2,#1              ;240
                  |L8.134|
000086  2a00              CMP      r2,#0                 ;240
000088  dcf4              BGT      |L8.116|
;;;243    	}
;;;244    
;;;245    	return pc;
;;;246    }
00008a  bdf0              POP      {r4-r7,pc}
;;;247    
                          ENDP


                          AREA ||i.tft_circ_push_pxbuf||, CODE, READONLY, ALIGN=2

                  tft_circ_push_pxbuf PROC
;;;613    
;;;614    void tft_circ_push_pxbuf(void* buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  4604              MOV      r4,r0
000006  4616              MOV      r6,r2
;;;615    	tft_dma_wait();
000008  f7fffffe          BL       tft_dma_wait
;;;616    	
;;;617    	tft_set_region(x, y, w-1, h-1);
00000c  9a01              LDR      r2,[sp,#4]
00000e  b290              UXTH     r0,r2
000010  b2b1              UXTH     r1,r6
000012  1e5a              SUBS     r2,r3,#1
000014  b297              UXTH     r7,r2
000016  9a0d              LDR      r2,[sp,#0x34]
000018  1e52              SUBS     r2,r2,#1
00001a  fa1ffc82          UXTH     r12,r2
00001e  4602              MOV      r2,r0
000020  460d              MOV      r5,r1
000022  eb000a07          ADD      r10,r0,r7
000026  fa1ff88a          UXTH     r8,r10
00002a  eb010a0c          ADD      r10,r1,r12
00002e  fa1ff98a          UXTH     r9,r10
000032  f04f0a2a          MOV      r10,#0x2a
000036  b672              CPSID    i
000038  bf00              NOP      
00003a  bf00              NOP      
00003c  bf00              NOP      
                  |L9.62|
00003e  f8dfb2d0          LDR      r11,|L9.784|
000042  f8dbb008          LDR      r11,[r11,#8]
000046  f00b0b80          AND      r11,r11,#0x80
00004a  f1bb0f00          CMP      r11,#0
00004e  d1f6              BNE      |L9.62|
000050  f04f5b00          MOV      r11,#0x20000000
000054  f8dfe2bc          LDR      lr,|L9.788|
000058  f8ceb000          STR      r11,[lr,#0]
00005c  bf00              NOP      
                  |L9.94|
00005e  f8dfb2b0          LDR      r11,|L9.784|
000062  f8dbb008          LDR      r11,[r11,#8]
000066  f00b0b02          AND      r11,r11,#2
00006a  f1bb0f00          CMP      r11,#0
00006e  d0f6              BEQ      |L9.94|
000070  f8dfb29c          LDR      r11,|L9.784|
000074  f8cba00c          STR      r10,[r11,#0xc]
000078  bf00              NOP      
                  |L9.122|
00007a  f8dfb294          LDR      r11,|L9.784|
00007e  f8dbb008          LDR      r11,[r11,#8]
000082  f00b0b80          AND      r11,r11,#0x80
000086  f1bb0f00          CMP      r11,#0
00008a  d0f6              BEQ      |L9.122|
00008c  bf00              NOP      
                  |L9.142|
00008e  f8dfb280          LDR      r11,|L9.784|
000092  f8dbb008          LDR      r11,[r11,#8]
000096  f00b0b80          AND      r11,r11,#0x80
00009a  f1bb0f00          CMP      r11,#0
00009e  d1f6              BNE      |L9.142|
0000a0  f44f5b00          MOV      r11,#0x2000
0000a4  f8dfe26c          LDR      lr,|L9.788|
0000a8  f8ceb000          STR      r11,[lr,#0]
0000ac  b662              CPSIE    i
0000ae  bf00              NOP      
0000b0  ea4f2a12          LSR      r10,r2,#8
0000b4  bf00              NOP      
0000b6  bf00              NOP      
                  |L9.184|
0000b8  f8dfb254          LDR      r11,|L9.784|
0000bc  f8dbb008          LDR      r11,[r11,#8]
0000c0  f00b0b02          AND      r11,r11,#2
0000c4  f1bb0f00          CMP      r11,#0
0000c8  d0f6              BEQ      |L9.184|
0000ca  f8dfb244          LDR      r11,|L9.784|
0000ce  f8cba00c          STR      r10,[r11,#0xc]
0000d2  bf00              NOP      
0000d4  f0020aff          AND      r10,r2,#0xff
0000d8  bf00              NOP      
0000da  bf00              NOP      
                  |L9.220|
0000dc  f8dfb230          LDR      r11,|L9.784|
0000e0  f8dbb008          LDR      r11,[r11,#8]
0000e4  f00b0b02          AND      r11,r11,#2
0000e8  f1bb0f00          CMP      r11,#0
0000ec  d0f6              BEQ      |L9.220|
0000ee  f8dfb220          LDR      r11,|L9.784|
0000f2  f8cba00c          STR      r10,[r11,#0xc]
0000f6  bf00              NOP      
0000f8  ea4f2a18          LSR      r10,r8,#8
0000fc  bf00              NOP      
0000fe  bf00              NOP      
                  |L9.256|
000100  f8dfb20c          LDR      r11,|L9.784|
000104  f8dbb008          LDR      r11,[r11,#8]
000108  f00b0b02          AND      r11,r11,#2
00010c  f1bb0f00          CMP      r11,#0
000110  d0f6              BEQ      |L9.256|
000112  f8dfb1fc          LDR      r11,|L9.784|
000116  f8cba00c          STR      r10,[r11,#0xc]
00011a  bf00              NOP      
00011c  f0080aff          AND      r10,r8,#0xff
000120  bf00              NOP      
000122  bf00              NOP      
                  |L9.292|
000124  f8dfb1e8          LDR      r11,|L9.784|
000128  f8dbb008          LDR      r11,[r11,#8]
00012c  f00b0b02          AND      r11,r11,#2
000130  f1bb0f00          CMP      r11,#0
000134  d0f6              BEQ      |L9.292|
000136  f8dfb1d8          LDR      r11,|L9.784|
00013a  f8cba00c          STR      r10,[r11,#0xc]
00013e  bf00              NOP      
000140  f04f0a2b          MOV      r10,#0x2b
000144  b672              CPSID    i
000146  bf00              NOP      
000148  bf00              NOP      
                  |L9.330|
00014a  f8dfb1c4          LDR      r11,|L9.784|
00014e  f8dbb008          LDR      r11,[r11,#8]
000152  f00b0b80          AND      r11,r11,#0x80
000156  f1bb0f00          CMP      r11,#0
00015a  d1f6              BNE      |L9.330|
00015c  f04f5b00          MOV      r11,#0x20000000
000160  f8dfe1b0          LDR      lr,|L9.788|
000164  f8ceb000          STR      r11,[lr,#0]
000168  bf00              NOP      
                  |L9.362|
00016a  f8dfb1a4          LDR      r11,|L9.784|
00016e  f8dbb008          LDR      r11,[r11,#8]
000172  f00b0b02          AND      r11,r11,#2
000176  f1bb0f00          CMP      r11,#0
00017a  d0f6              BEQ      |L9.362|
00017c  f8dfb190          LDR      r11,|L9.784|
000180  f8cba00c          STR      r10,[r11,#0xc]
000184  bf00              NOP      
                  |L9.390|
000186  f8dfb188          LDR      r11,|L9.784|
00018a  f8dbb008          LDR      r11,[r11,#8]
00018e  f00b0b80          AND      r11,r11,#0x80
000192  f1bb0f00          CMP      r11,#0
000196  d0f6              BEQ      |L9.390|
000198  bf00              NOP      
                  |L9.410|
00019a  f8dfb174          LDR      r11,|L9.784|
00019e  f8dbb008          LDR      r11,[r11,#8]
0001a2  f00b0b80          AND      r11,r11,#0x80
0001a6  f1bb0f00          CMP      r11,#0
0001aa  d1f6              BNE      |L9.410|
0001ac  f44f5b00          MOV      r11,#0x2000
0001b0  f8dfe160          LDR      lr,|L9.788|
0001b4  f8ceb000          STR      r11,[lr,#0]
0001b8  b662              CPSIE    i
0001ba  bf00              NOP      
0001bc  ea4f2a15          LSR      r10,r5,#8
0001c0  bf00              NOP      
0001c2  bf00              NOP      
                  |L9.452|
0001c4  f8dfb148          LDR      r11,|L9.784|
0001c8  f8dbb008          LDR      r11,[r11,#8]
0001cc  f00b0b02          AND      r11,r11,#2
0001d0  f1bb0f00          CMP      r11,#0
0001d4  d0f6              BEQ      |L9.452|
0001d6  f8dfb138          LDR      r11,|L9.784|
0001da  f8cba00c          STR      r10,[r11,#0xc]
0001de  bf00              NOP      
0001e0  f0050aff          AND      r10,r5,#0xff
0001e4  bf00              NOP      
0001e6  bf00              NOP      
                  |L9.488|
0001e8  f8dfb124          LDR      r11,|L9.784|
0001ec  f8dbb008          LDR      r11,[r11,#8]
0001f0  f00b0b02          AND      r11,r11,#2
0001f4  f1bb0f00          CMP      r11,#0
0001f8  d0f6              BEQ      |L9.488|
0001fa  f8dfb114          LDR      r11,|L9.784|
0001fe  f8cba00c          STR      r10,[r11,#0xc]
000202  bf00              NOP      
000204  ea4f2a19          LSR      r10,r9,#8
000208  bf00              NOP      
00020a  bf00              NOP      
                  |L9.524|
00020c  f8dfb100          LDR      r11,|L9.784|
000210  f8dbb008          LDR      r11,[r11,#8]
000214  f00b0b02          AND      r11,r11,#2
000218  f1bb0f00          CMP      r11,#0
00021c  d0f6              BEQ      |L9.524|
00021e  f8dfb0f0          LDR      r11,|L9.784|
000222  f8cba00c          STR      r10,[r11,#0xc]
000226  bf00              NOP      
000228  f0090aff          AND      r10,r9,#0xff
00022c  bf00              NOP      
00022e  bf00              NOP      
                  |L9.560|
000230  f8dfb0dc          LDR      r11,|L9.784|
000234  f8dbb008          LDR      r11,[r11,#8]
000238  f00b0b02          AND      r11,r11,#2
00023c  f1bb0f00          CMP      r11,#0
000240  d0f6              BEQ      |L9.560|
000242  f8dfb0cc          LDR      r11,|L9.784|
000246  f8cba00c          STR      r10,[r11,#0xc]
00024a  bf00              NOP      
00024c  f04f0a2c          MOV      r10,#0x2c
000250  b672              CPSID    i
000252  bf00              NOP      
000254  bf00              NOP      
                  |L9.598|
000256  f8dfb0b8          LDR      r11,|L9.784|
00025a  f8dbb008          LDR      r11,[r11,#8]
00025e  f00b0b80          AND      r11,r11,#0x80
000262  f1bb0f00          CMP      r11,#0
000266  d1f6              BNE      |L9.598|
000268  f04f5b00          MOV      r11,#0x20000000
00026c  f8dfe0a4          LDR      lr,|L9.788|
000270  f8ceb000          STR      r11,[lr,#0]
000274  bf00              NOP      
                  |L9.630|
000276  f8dfb098          LDR      r11,|L9.784|
00027a  f8dbb008          LDR      r11,[r11,#8]
00027e  f00b0b02          AND      r11,r11,#2
000282  f1bb0f00          CMP      r11,#0
000286  d0f6              BEQ      |L9.630|
000288  f8dfb084          LDR      r11,|L9.784|
00028c  f8cba00c          STR      r10,[r11,#0xc]
000290  bf00              NOP      
                  |L9.658|
000292  f8dfb07c          LDR      r11,|L9.784|
000296  f8dbb008          LDR      r11,[r11,#8]
00029a  f00b0b80          AND      r11,r11,#0x80
00029e  f1bb0f00          CMP      r11,#0
0002a2  d0f6              BEQ      |L9.658|
0002a4  bf00              NOP      
                  |L9.678|
0002a6  f8dfb068          LDR      r11,|L9.784|
0002aa  f8dbb008          LDR      r11,[r11,#8]
0002ae  f00b0b80          AND      r11,r11,#0x80
0002b2  f1bb0f00          CMP      r11,#0
0002b6  d1f6              BNE      |L9.678|
0002b8  f44f5b00          MOV      r11,#0x2000
0002bc  f8dfe054          LDR      lr,|L9.788|
0002c0  f8ceb000          STR      r11,[lr,#0]
0002c4  b662              CPSIE    i
0002c6  bf00              NOP      
0002c8  bf00              NOP      
;;;618    	
;;;619    	dma_circular_mode(TFT_DMA, 1);
0002ca  2001              MOVS     r0,#1
0002cc  b130              CBZ      r0,|L9.732|
0002ce  4912              LDR      r1,|L9.792|
0002d0  6809              LDR      r1,[r1,#0]
0002d2  f4417180          ORR      r1,r1,#0x100
0002d6  4a10              LDR      r2,|L9.792|
0002d8  6011              STR      r1,[r2,#0]
0002da  e005              B        |L9.744|
                  |L9.732|
0002dc  490e              LDR      r1,|L9.792|
0002de  6809              LDR      r1,[r1,#0]
0002e0  f4217180          BIC      r1,r1,#0x100
0002e4  4a0c              LDR      r2,|L9.792|
0002e6  6011              STR      r1,[r2,#0]
                  |L9.744|
0002e8  bf00              NOP      
;;;620    	dma_transfer(TFT_DMA, buf, w*h*2);
0002ea  9a0d              LDR      r2,[sp,#0x34]
0002ec  fb03f102          MUL      r1,r3,r2
0002f0  f64f72ff          MOV      r2,#0xffff
0002f4  ea020041          AND      r0,r2,r1,LSL #1
0002f8  4907              LDR      r1,|L9.792|
0002fa  60cc              STR      r4,[r1,#0xc]
0002fc  6048              STR      r0,[r1,#4]
0002fe  6809              LDR      r1,[r1,#0]
000300  f0410101          ORR      r1,r1,#1
000304  4a04              LDR      r2,|L9.792|
000306  6011              STR      r1,[r2,#0]
000308  bf00              NOP      
;;;621    }
00030a  e8bd8fff          POP      {r0-r11,pc}
;;;622    void tft_double_push_pxbuf(void* buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
                          ENDP

00030e  0000              DCW      0x0000
                  |L9.784|
                          DCD      0x40015000
                  |L9.788|
                          DCD      0x40020c18
                  |L9.792|
                          DCD      0x40026470

                          AREA ||i.tft_clear||, CODE, READONLY, ALIGN=2

                  tft_clear PROC
;;;388      */
;;;389    void tft_clear(void){
000000  b510              PUSH     {r4,lr}
;;;390    	for(uint8_t y = 0; y < char_max_y; y++){
000002  2400              MOVS     r4,#0
000004  e004              B        |L10.16|
                  |L10.6|
;;;391    		tft_clear_line(y);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       tft_clear_line
00000c  1c60              ADDS     r0,r4,#1              ;390
00000e  b2c4              UXTB     r4,r0                 ;390
                  |L10.16|
000010  4802              LDR      r0,|L10.28|
000012  7800              LDRB     r0,[r0,#0]            ;390  ; char_max_y
000014  4284              CMP      r4,r0                 ;390
000016  dbf6              BLT      |L10.6|
;;;392    	}
;;;393    }
000018  bd10              POP      {r4,pc}
;;;394    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      char_max_y

                          AREA ||i.tft_clear_line||, CODE, READONLY, ALIGN=2

                  tft_clear_line PROC
;;;375      */
;;;376    void tft_clear_line(uint8_t y){
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;377    	for (uint8_t x = 0; x < char_max_x; x++) {
000004  2000              MOVS     r0,#0
000006  e032              B        |L11.110|
                  |L11.8|
;;;378    		text_buf[cur_screen][x][y] = ' ';
000008  2220              MOVS     r2,#0x20
00000a  4b1b              LDR      r3,|L11.120|
00000c  781b              LDRB     r3,[r3,#0]  ; cur_screen
00000e  eb0304c3          ADD      r4,r3,r3,LSL #3
000012  eb041303          ADD      r3,r4,r3,LSL #4
000016  4c19              LDR      r4,|L11.124|
000018  eb041343          ADD      r3,r4,r3,LSL #5
00001c  eb000480          ADD      r4,r0,r0,LSL #2
000020  eb030384          ADD      r3,r3,r4,LSL #2
000024  545a              STRB     r2,[r3,r1]
;;;379    		text_color_buf[cur_screen][x][y] = curr_text_color;
000026  4a16              LDR      r2,|L11.128|
000028  8812              LDRH     r2,[r2,#0]  ; curr_text_color
00002a  4b13              LDR      r3,|L11.120|
00002c  781b              LDRB     r3,[r3,#0]  ; cur_screen
00002e  eb0304c3          ADD      r4,r3,r3,LSL #3
000032  eb041303          ADD      r3,r4,r3,LSL #4
000036  4c13              LDR      r4,|L11.132|
000038  eb041383          ADD      r3,r4,r3,LSL #6
00003c  eb000480          ADD      r4,r0,r0,LSL #2
000040  eb0303c4          ADD      r3,r3,r4,LSL #3
000044  f8232011          STRH     r2,[r3,r1,LSL #1]
;;;380    		bg_color_buf[cur_screen][x][y] = curr_bg_color;
000048  4a0f              LDR      r2,|L11.136|
00004a  8812              LDRH     r2,[r2,#0]  ; curr_bg_color
00004c  4b0a              LDR      r3,|L11.120|
00004e  781b              LDRB     r3,[r3,#0]  ; cur_screen
000050  eb0304c3          ADD      r4,r3,r3,LSL #3
000054  eb041303          ADD      r3,r4,r3,LSL #4
000058  4c0c              LDR      r4,|L11.140|
00005a  eb041383          ADD      r3,r4,r3,LSL #6
00005e  eb000480          ADD      r4,r0,r0,LSL #2
000062  eb0303c4          ADD      r3,r3,r4,LSL #3
000066  f8232011          STRH     r2,[r3,r1,LSL #1]
00006a  1c42              ADDS     r2,r0,#1              ;377
00006c  b2d0              UXTB     r0,r2                 ;377
                  |L11.110|
00006e  4a08              LDR      r2,|L11.144|
000070  7812              LDRB     r2,[r2,#0]            ;377  ; char_max_x
000072  4290              CMP      r0,r2                 ;377
000074  dbc8              BLT      |L11.8|
;;;381    	}
;;;382    }
000076  bd10              POP      {r4,pc}
;;;383    
                          ENDP

                  |L11.120|
                          DCD      cur_screen
                  |L11.124|
                          DCD      text_buf
                  |L11.128|
                          DCD      curr_text_color
                  |L11.132|
                          DCD      text_color_buf
                  |L11.136|
                          DCD      curr_bg_color
                  |L11.140|
                          DCD      bg_color_buf
                  |L11.144|
                          DCD      char_max_x

                          AREA ||i.tft_config||, CODE, READONLY, ALIGN=2

                  tft_config PROC
;;;224      */
;;;225    inline static void tft_config(void)
000000  b510              PUSH     {r4,lr}
;;;226    {
;;;227    	tft_spi_init();
000002  f7fffffe          BL       tft_spi_init
;;;228    	tft_reset();
000006  f7fffffe          BL       tft_reset
;;;229    
;;;230    	uint32_t i=0;
00000a  2400              MOVS     r4,#0
;;;231    	while (tft_init_code[++i] != TFT_EOF_MARKER) {
00000c  e063              B        |L12.214|
                  |L12.14|
;;;232    		tft_write_command(tft_init_code[i]);
00000e  4935              LDR      r1,|L12.228|
000010  5d08              LDRB     r0,[r1,r4]
000012  b672              CPSID    i
000014  bf00              NOP      
000016  bf00              NOP      
                  |L12.24|
000018  4933              LDR      r1,|L12.232|
00001a  6889              LDR      r1,[r1,#8]
00001c  f0010180          AND      r1,r1,#0x80
000020  2900              CMP      r1,#0
000022  d1f9              BNE      |L12.24|
000024  f04f5100          MOV      r1,#0x20000000
000028  4a30              LDR      r2,|L12.236|
00002a  6011              STR      r1,[r2,#0]
00002c  bf00              NOP      
                  |L12.46|
00002e  492e              LDR      r1,|L12.232|
000030  6889              LDR      r1,[r1,#8]
000032  f0010102          AND      r1,r1,#2
000036  2900              CMP      r1,#0
000038  d0f9              BEQ      |L12.46|
00003a  492b              LDR      r1,|L12.232|
00003c  60c8              STR      r0,[r1,#0xc]
00003e  bf00              NOP      
                  |L12.64|
000040  4929              LDR      r1,|L12.232|
000042  6889              LDR      r1,[r1,#8]
000044  f0010180          AND      r1,r1,#0x80
000048  2900              CMP      r1,#0
00004a  d0f9              BEQ      |L12.64|
00004c  bf00              NOP      
                  |L12.78|
00004e  4926              LDR      r1,|L12.232|
000050  6889              LDR      r1,[r1,#8]
000052  f0010180          AND      r1,r1,#0x80
000056  2900              CMP      r1,#0
000058  d1f9              BNE      |L12.78|
00005a  f44f5100          MOV      r1,#0x2000
00005e  4a23              LDR      r2,|L12.236|
000060  6011              STR      r1,[r2,#0]
000062  b662              CPSIE    i
000064  bf00              NOP      
;;;233    		
;;;234    		if (tft_init_code[i] == TFT_ORIENTATION_CMD) tft_write_data(tft_orientation_init_code[tft_orientation]);
000066  481f              LDR      r0,|L12.228|
000068  5d00              LDRB     r0,[r0,r4]
00006a  2836              CMP      r0,#0x36
00006c  d10e              BNE      |L12.140|
00006e  4920              LDR      r1,|L12.240|
000070  4a20              LDR      r2,|L12.244|
000072  7812              LDRB     r2,[r2,#0]  ; tft_orientation
000074  5c88              LDRB     r0,[r1,r2]
000076  bf00              NOP      
000078  bf00              NOP      
                  |L12.122|
00007a  491b              LDR      r1,|L12.232|
00007c  6889              LDR      r1,[r1,#8]
00007e  f0010102          AND      r1,r1,#2
000082  2900              CMP      r1,#0
000084  d0f9              BEQ      |L12.122|
000086  4918              LDR      r1,|L12.232|
000088  60c8              STR      r0,[r1,#0xc]
00008a  bf00              NOP      
                  |L12.140|
;;;235    
;;;236    		while (tft_init_code[++i] != TFT_EOL_MARKER) {
00008c  e01d              B        |L12.202|
                  |L12.142|
;;;237    			if (tft_init_code[i] == TFT_DELAY_MARKER) delay(tft_init_code[++i]);
00008e  4815              LDR      r0,|L12.228|
000090  5d00              LDRB     r0,[r0,r4]
000092  28ff              CMP      r0,#0xff
000094  d10c              BNE      |L12.176|
000096  1c61              ADDS     r1,r4,#1
000098  460c              MOV      r4,r1
00009a  4a12              LDR      r2,|L12.228|
00009c  5c50              LDRB     r0,[r2,r1]
00009e  4916              LDR      r1,|L12.248|
0000a0  6008              STR      r0,[r1,#0]  ; __delay
0000a2  bf00              NOP      
0000a4  bf00              NOP      
                  |L12.166|
0000a6  4914              LDR      r1,|L12.248|
0000a8  6809              LDR      r1,[r1,#0]  ; __delay
0000aa  2900              CMP      r1,#0
0000ac  d1fb              BNE      |L12.166|
0000ae  e00c              B        |L12.202|
                  |L12.176|
;;;238    			else                                      tft_write_data(tft_init_code[i]);
0000b0  490c              LDR      r1,|L12.228|
0000b2  5d08              LDRB     r0,[r1,r4]
0000b4  bf00              NOP      
0000b6  bf00              NOP      
                  |L12.184|
0000b8  490b              LDR      r1,|L12.232|
0000ba  6889              LDR      r1,[r1,#8]
0000bc  f0010102          AND      r1,r1,#2
0000c0  2900              CMP      r1,#0
0000c2  d0f9              BEQ      |L12.184|
0000c4  4908              LDR      r1,|L12.232|
0000c6  60c8              STR      r0,[r1,#0xc]
0000c8  bf00              NOP      
                  |L12.202|
0000ca  1c60              ADDS     r0,r4,#1              ;236
0000cc  4604              MOV      r4,r0                 ;236
0000ce  4905              LDR      r1,|L12.228|
0000d0  5c08              LDRB     r0,[r1,r0]            ;236
0000d2  2843              CMP      r0,#0x43              ;236
0000d4  d1db              BNE      |L12.142|
                  |L12.214|
0000d6  1c60              ADDS     r0,r4,#1              ;231
0000d8  4604              MOV      r4,r0                 ;231
0000da  4902              LDR      r1,|L12.228|
0000dc  5c08              LDRB     r0,[r1,r0]            ;231
0000de  2842              CMP      r0,#0x42              ;231
0000e0  d195              BNE      |L12.14|
;;;239    		}
;;;240    	}
;;;241    }
0000e2  bd10              POP      {r4,pc}
;;;242    
                          ENDP

                  |L12.228|
                          DCD      tft_init_code
                  |L12.232|
                          DCD      0x40015000
                  |L12.236|
                          DCD      0x40020c18
                  |L12.240|
                          DCD      tft_orientation_init_code
                  |L12.244|
                          DCD      tft_orientation
                  |L12.248|
                          DCD      __delay

                          AREA ||i.tft_dma_tx||, CODE, READONLY, ALIGN=2

                  tft_dma_tx PROC
;;;603    
;;;604    void tft_dma_tx(void* ptr, uint16_t size) {
000000  bf00              NOP      
000002  4a05              LDR      r2,|L13.24|
000004  60d0              STR      r0,[r2,#0xc]
000006  6051              STR      r1,[r2,#4]
000008  6812              LDR      r2,[r2,#0]
00000a  f0420201          ORR      r2,r2,#1
00000e  4b02              LDR      r3,|L13.24|
000010  601a              STR      r2,[r3,#0]
000012  bf00              NOP      
;;;605    	dma_transfer(TFT_DMA, ptr, size);
;;;606    }
000014  4770              BX       lr
;;;607    void tft_dma_wait(void) {
                          ENDP

000016  0000              DCW      0x0000
                  |L13.24|
                          DCD      0x40026470

                          AREA ||i.tft_dma_wait||, CODE, READONLY, ALIGN=2

                  tft_dma_wait PROC
;;;606    }
;;;607    void tft_dma_wait(void) {
000000  bf00              NOP      
                  |L14.2|
;;;608    	// while (dma_flag_status(TFT_DMA,DMA_FLAG_TC) == 0);
;;;609    	// dma_clear_flag(TFT_DMA,DMA_FLAG_TC);
;;;610    	while (LL_DMA_IsActiveFlag_TC4(DMA2)==0);
000002  bf00              NOP      
000004  4805              LDR      r0,|L14.28|
000006  6840              LDR      r0,[r0,#4]
000008  f3c01040          UBFX     r0,r0,#5,#1
00000c  2800              CMP      r0,#0
00000e  d0f8              BEQ      |L14.2|
;;;611    	LL_DMA_ClearFlag_TC4(DMA2);
000010  bf00              NOP      
000012  2020              MOVS     r0,#0x20
000014  4901              LDR      r1,|L14.28|
000016  60c8              STR      r0,[r1,#0xc]
000018  bf00              NOP      
;;;612    }
00001a  4770              BX       lr
;;;613    
                          ENDP

                  |L14.28|
                          DCD      0x40026400

                          AREA ||i.tft_double_push_pxbuf||, CODE, READONLY, ALIGN=2

                  tft_double_push_pxbuf PROC
;;;621    }
;;;622    void tft_double_push_pxbuf(void* buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b081              SUB      sp,sp,#4
000006  4604              MOV      r4,r0
000008  9d0e              LDR      r5,[sp,#0x38]
;;;623    	tft_dma_wait();
00000a  f7fffffe          BL       tft_dma_wait
;;;624    	// TFT_DMA->CR &= (uint32_t)~DMA_SxCR_EN;
;;;625    
;;;626    	tft_set_region(x, y, w-1, h-1);
00000e  9e02              LDR      r6,[sp,#8]
000010  b2b0              UXTH     r0,r6
000012  9e03              LDR      r6,[sp,#0xc]
000014  b2b1              UXTH     r1,r6
000016  1e5e              SUBS     r6,r3,#1
000018  fa1ffc86          UXTH     r12,r6
00001c  1e6e              SUBS     r6,r5,#1
00001e  fa1ff886          UXTH     r8,r6
000022  4606              MOV      r6,r0
000024  460f              MOV      r7,r1
000026  eb000a0c          ADD      r10,r0,r12
00002a  fa1ff98a          UXTH     r9,r10
00002e  eb010a08          ADD      r10,r1,r8
000032  fa1ffa8a          UXTH     r10,r10
000036  f8cda000          STR      r10,[sp,#0]
00003a  f04f0a2a          MOV      r10,#0x2a
00003e  b672              CPSID    i
000040  bf00              NOP      
000042  bf00              NOP      
000044  bf00              NOP      
                  |L15.70|
000046  f8dfb2e8          LDR      r11,|L15.816|
00004a  f8dbb008          LDR      r11,[r11,#8]
00004e  f00b0b80          AND      r11,r11,#0x80
000052  f1bb0f00          CMP      r11,#0
000056  d1f6              BNE      |L15.70|
000058  f04f5b00          MOV      r11,#0x20000000
00005c  f8dfe2d4          LDR      lr,|L15.820|
000060  f8ceb000          STR      r11,[lr,#0]
000064  bf00              NOP      
                  |L15.102|
000066  f8dfb2c8          LDR      r11,|L15.816|
00006a  f8dbb008          LDR      r11,[r11,#8]
00006e  f00b0b02          AND      r11,r11,#2
000072  f1bb0f00          CMP      r11,#0
000076  d0f6              BEQ      |L15.102|
000078  f8dfb2b4          LDR      r11,|L15.816|
00007c  f8cba00c          STR      r10,[r11,#0xc]
000080  bf00              NOP      
                  |L15.130|
000082  f8dfb2ac          LDR      r11,|L15.816|
000086  f8dbb008          LDR      r11,[r11,#8]
00008a  f00b0b80          AND      r11,r11,#0x80
00008e  f1bb0f00          CMP      r11,#0
000092  d0f6              BEQ      |L15.130|
000094  bf00              NOP      
                  |L15.150|
000096  f8dfb298          LDR      r11,|L15.816|
00009a  f8dbb008          LDR      r11,[r11,#8]
00009e  f00b0b80          AND      r11,r11,#0x80
0000a2  f1bb0f00          CMP      r11,#0
0000a6  d1f6              BNE      |L15.150|
0000a8  f44f5b00          MOV      r11,#0x2000
0000ac  f8dfe284          LDR      lr,|L15.820|
0000b0  f8ceb000          STR      r11,[lr,#0]
0000b4  b662              CPSIE    i
0000b6  bf00              NOP      
0000b8  ea4f2a16          LSR      r10,r6,#8
0000bc  bf00              NOP      
0000be  bf00              NOP      
                  |L15.192|
0000c0  f8dfb26c          LDR      r11,|L15.816|
0000c4  f8dbb008          LDR      r11,[r11,#8]
0000c8  f00b0b02          AND      r11,r11,#2
0000cc  f1bb0f00          CMP      r11,#0
0000d0  d0f6              BEQ      |L15.192|
0000d2  f8dfb25c          LDR      r11,|L15.816|
0000d6  f8cba00c          STR      r10,[r11,#0xc]
0000da  bf00              NOP      
0000dc  f0060aff          AND      r10,r6,#0xff
0000e0  bf00              NOP      
0000e2  bf00              NOP      
                  |L15.228|
0000e4  f8dfb248          LDR      r11,|L15.816|
0000e8  f8dbb008          LDR      r11,[r11,#8]
0000ec  f00b0b02          AND      r11,r11,#2
0000f0  f1bb0f00          CMP      r11,#0
0000f4  d0f6              BEQ      |L15.228|
0000f6  f8dfb238          LDR      r11,|L15.816|
0000fa  f8cba00c          STR      r10,[r11,#0xc]
0000fe  bf00              NOP      
000100  ea4f2a19          LSR      r10,r9,#8
000104  bf00              NOP      
000106  bf00              NOP      
                  |L15.264|
000108  f8dfb224          LDR      r11,|L15.816|
00010c  f8dbb008          LDR      r11,[r11,#8]
000110  f00b0b02          AND      r11,r11,#2
000114  f1bb0f00          CMP      r11,#0
000118  d0f6              BEQ      |L15.264|
00011a  f8dfb214          LDR      r11,|L15.816|
00011e  f8cba00c          STR      r10,[r11,#0xc]
000122  bf00              NOP      
000124  f0090aff          AND      r10,r9,#0xff
000128  bf00              NOP      
00012a  bf00              NOP      
                  |L15.300|
00012c  f8dfb200          LDR      r11,|L15.816|
000130  f8dbb008          LDR      r11,[r11,#8]
000134  f00b0b02          AND      r11,r11,#2
000138  f1bb0f00          CMP      r11,#0
00013c  d0f6              BEQ      |L15.300|
00013e  f8dfb1f0          LDR      r11,|L15.816|
000142  f8cba00c          STR      r10,[r11,#0xc]
000146  bf00              NOP      
000148  f04f0a2b          MOV      r10,#0x2b
00014c  b672              CPSID    i
00014e  bf00              NOP      
000150  bf00              NOP      
                  |L15.338|
000152  f8dfb1dc          LDR      r11,|L15.816|
000156  f8dbb008          LDR      r11,[r11,#8]
00015a  f00b0b80          AND      r11,r11,#0x80
00015e  f1bb0f00          CMP      r11,#0
000162  d1f6              BNE      |L15.338|
000164  f04f5b00          MOV      r11,#0x20000000
000168  f8dfe1c8          LDR      lr,|L15.820|
00016c  f8ceb000          STR      r11,[lr,#0]
000170  bf00              NOP      
                  |L15.370|
000172  f8dfb1bc          LDR      r11,|L15.816|
000176  f8dbb008          LDR      r11,[r11,#8]
00017a  f00b0b02          AND      r11,r11,#2
00017e  f1bb0f00          CMP      r11,#0
000182  d0f6              BEQ      |L15.370|
000184  f8dfb1a8          LDR      r11,|L15.816|
000188  f8cba00c          STR      r10,[r11,#0xc]
00018c  bf00              NOP      
                  |L15.398|
00018e  f8dfb1a0          LDR      r11,|L15.816|
000192  f8dbb008          LDR      r11,[r11,#8]
000196  f00b0b80          AND      r11,r11,#0x80
00019a  f1bb0f00          CMP      r11,#0
00019e  d0f6              BEQ      |L15.398|
0001a0  bf00              NOP      
                  |L15.418|
0001a2  f8dfb18c          LDR      r11,|L15.816|
0001a6  f8dbb008          LDR      r11,[r11,#8]
0001aa  f00b0b80          AND      r11,r11,#0x80
0001ae  f1bb0f00          CMP      r11,#0
0001b2  d1f6              BNE      |L15.418|
0001b4  f44f5b00          MOV      r11,#0x2000
0001b8  f8dfe178          LDR      lr,|L15.820|
0001bc  f8ceb000          STR      r11,[lr,#0]
0001c0  b662              CPSIE    i
0001c2  bf00              NOP      
0001c4  ea4f2a17          LSR      r10,r7,#8
0001c8  bf00              NOP      
0001ca  bf00              NOP      
                  |L15.460|
0001cc  f8dfb160          LDR      r11,|L15.816|
0001d0  f8dbb008          LDR      r11,[r11,#8]
0001d4  f00b0b02          AND      r11,r11,#2
0001d8  f1bb0f00          CMP      r11,#0
0001dc  d0f6              BEQ      |L15.460|
0001de  f8dfb150          LDR      r11,|L15.816|
0001e2  f8cba00c          STR      r10,[r11,#0xc]
0001e6  bf00              NOP      
0001e8  f0070aff          AND      r10,r7,#0xff
0001ec  bf00              NOP      
0001ee  bf00              NOP      
                  |L15.496|
0001f0  f8dfb13c          LDR      r11,|L15.816|
0001f4  f8dbb008          LDR      r11,[r11,#8]
0001f8  f00b0b02          AND      r11,r11,#2
0001fc  f1bb0f00          CMP      r11,#0
000200  d0f6              BEQ      |L15.496|
000202  f8dfb12c          LDR      r11,|L15.816|
000206  f8cba00c          STR      r10,[r11,#0xc]
00020a  bf00              NOP      
00020c  f8ddb000          LDR      r11,[sp,#0]
000210  ea4f2a1b          LSR      r10,r11,#8
000214  bf00              NOP      
000216  bf00              NOP      
                  |L15.536|
000218  f8dfb114          LDR      r11,|L15.816|
00021c  f8dbb008          LDR      r11,[r11,#8]
000220  f00b0b02          AND      r11,r11,#2
000224  f1bb0f00          CMP      r11,#0
000228  d0f6              BEQ      |L15.536|
00022a  f8dfb104          LDR      r11,|L15.816|
00022e  f8cba00c          STR      r10,[r11,#0xc]
000232  bf00              NOP      
000234  f8ddb000          LDR      r11,[sp,#0]
000238  f00b0aff          AND      r10,r11,#0xff
00023c  bf00              NOP      
00023e  bf00              NOP      
                  |L15.576|
000240  f8dfb0ec          LDR      r11,|L15.816|
000244  f8dbb008          LDR      r11,[r11,#8]
000248  f00b0b02          AND      r11,r11,#2
00024c  f1bb0f00          CMP      r11,#0
000250  d0f6              BEQ      |L15.576|
000252  f8dfb0dc          LDR      r11,|L15.816|
000256  f8cba00c          STR      r10,[r11,#0xc]
00025a  bf00              NOP      
00025c  f04f0a2c          MOV      r10,#0x2c
000260  b672              CPSID    i
000262  bf00              NOP      
000264  bf00              NOP      
                  |L15.614|
000266  f8dfb0c8          LDR      r11,|L15.816|
00026a  f8dbb008          LDR      r11,[r11,#8]
00026e  f00b0b80          AND      r11,r11,#0x80
000272  f1bb0f00          CMP      r11,#0
000276  d1f6              BNE      |L15.614|
000278  f04f5b00          MOV      r11,#0x20000000
00027c  f8dfe0b4          LDR      lr,|L15.820|
000280  f8ceb000          STR      r11,[lr,#0]
000284  bf00              NOP      
                  |L15.646|
000286  f8dfb0a8          LDR      r11,|L15.816|
00028a  f8dbb008          LDR      r11,[r11,#8]
00028e  f00b0b02          AND      r11,r11,#2
000292  f1bb0f00          CMP      r11,#0
000296  d0f6              BEQ      |L15.646|
000298  f8dfb094          LDR      r11,|L15.816|
00029c  f8cba00c          STR      r10,[r11,#0xc]
0002a0  bf00              NOP      
                  |L15.674|
0002a2  f8dfb08c          LDR      r11,|L15.816|
0002a6  f8dbb008          LDR      r11,[r11,#8]
0002aa  f00b0b80          AND      r11,r11,#0x80
0002ae  f1bb0f00          CMP      r11,#0
0002b2  d0f6              BEQ      |L15.674|
0002b4  bf00              NOP      
                  |L15.694|
0002b6  f8dfb078          LDR      r11,|L15.816|
0002ba  f8dbb008          LDR      r11,[r11,#8]
0002be  f00b0b80          AND      r11,r11,#0x80
0002c2  f1bb0f00          CMP      r11,#0
0002c6  d1f6              BNE      |L15.694|
0002c8  f44f5b00          MOV      r11,#0x2000
0002cc  f8dfe064          LDR      lr,|L15.820|
0002d0  f8ceb000          STR      r11,[lr,#0]
0002d4  b662              CPSIE    i
0002d6  bf00              NOP      
0002d8  bf00              NOP      
;;;627    
;;;628    	uint32_t ptr = (uint32_t)buf;
0002da  4622              MOV      r2,r4
;;;629    	TFT_DMA->M0AR = ptr;
0002dc  4816              LDR      r0,|L15.824|
0002de  6002              STR      r2,[r0,#0]
;;;630    	TFT_DMA->M1AR = ptr+(w*h);  
0002e0  fb032005          MLA      r0,r3,r5,r2
0002e4  4914              LDR      r1,|L15.824|
0002e6  1d09              ADDS     r1,r1,#4
0002e8  6008              STR      r0,[r1,#0]
;;;631    	TFT_DMA->NDTR = w*h;
0002ea  fb03f005          MUL      r0,r3,r5
0002ee  4912              LDR      r1,|L15.824|
0002f0  3908              SUBS     r1,r1,#8
0002f2  6008              STR      r0,[r1,#0]
;;;632    	dma_doublebuf_mode(TFT_DMA, 1);
0002f4  2001              MOVS     r0,#1
0002f6  b138              CBZ      r0,|L15.776|
0002f8  1f09              SUBS     r1,r1,#4
0002fa  6809              LDR      r1,[r1,#0]
0002fc  f4412180          ORR      r1,r1,#0x40000
000300  4e0d              LDR      r6,|L15.824|
000302  3e0c              SUBS     r6,r6,#0xc
000304  6031              STR      r1,[r6,#0]
000306  e007              B        |L15.792|
                  |L15.776|
000308  490b              LDR      r1,|L15.824|
00030a  390c              SUBS     r1,r1,#0xc
00030c  6809              LDR      r1,[r1,#0]
00030e  f4212180          BIC      r1,r1,#0x40000
000312  4e09              LDR      r6,|L15.824|
000314  3e0c              SUBS     r6,r6,#0xc
000316  6031              STR      r1,[r6,#0]
                  |L15.792|
000318  bf00              NOP      
;;;633    	TFT_DMA->CR |= (uint32_t)DMA_SxCR_EN;
00031a  4807              LDR      r0,|L15.824|
00031c  380c              SUBS     r0,r0,#0xc
00031e  6800              LDR      r0,[r0,#0]
000320  f0400001          ORR      r0,r0,#1
000324  4904              LDR      r1,|L15.824|
000326  390c              SUBS     r1,r1,#0xc
000328  6008              STR      r0,[r1,#0]
;;;634    }
00032a  b005              ADD      sp,sp,#0x14
00032c  e8bd8ff0          POP      {r4-r11,pc}
;;;635    void tft_push_pxbuf(void* buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
                          ENDP

                  |L15.816|
                          DCD      0x40015000
                  |L15.820|
                          DCD      0x40020c18
                  |L15.824|
                          DCD      0x4002647c

                          AREA ||i.tft_fill_color||, CODE, READONLY, ALIGN=2

                  tft_fill_color PROC
;;;422      */
;;;423    void tft_fill_color(uint16_t color) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4604              MOV      r4,r0
;;;424    	if (tft_orientation % 2)
000006  49fe              LDR      r1,|L16.1024|
000008  7808              LDRB     r0,[r1,#0]  ; tft_orientation
00000a  eb0071d0          ADD      r1,r0,r0,LSR #31
00000e  1049              ASRS     r1,r1,#1
000010  eba00141          SUB      r1,r0,r1,LSL #1
000014  2900              CMP      r1,#0
000016  d07c              BEQ      |L16.274|
;;;425    		tft_set_region(0, 0, MAX_HEIGHT, MAX_WIDTH);
000018  2000              MOVS     r0,#0
00001a  4601              MOV      r1,r0
00001c  f44f75a0          MOV      r5,#0x140
000020  26f0              MOVS     r6,#0xf0
000022  4602              MOV      r2,r0
000024  460b              MOV      r3,r1
000026  1947              ADDS     r7,r0,r5
000028  eb010c06          ADD      r12,r1,r6
00002c  f04f082a          MOV      r8,#0x2a
000030  b672              CPSID    i
000032  bf00              NOP      
000034  bf00              NOP      
000036  bf00              NOP      
                  |L16.56|
000038  f8df93c8          LDR      r9,|L16.1028|
00003c  f8d99008          LDR      r9,[r9,#8]
000040  f0090980          AND      r9,r9,#0x80
000044  f1b90f00          CMP      r9,#0
000048  d1f6              BNE      |L16.56|
00004a  f04f5900          MOV      r9,#0x20000000
00004e  f8dfa3b8          LDR      r10,|L16.1032|
000052  f8ca9000          STR      r9,[r10,#0]
000056  bf00              NOP      
                  |L16.88|
000058  f8df93a8          LDR      r9,|L16.1028|
00005c  f8d99008          LDR      r9,[r9,#8]
000060  f0090902          AND      r9,r9,#2
000064  f1b90f00          CMP      r9,#0
000068  d0f6              BEQ      |L16.88|
00006a  f8df9398          LDR      r9,|L16.1028|
00006e  f8c9800c          STR      r8,[r9,#0xc]
000072  bf00              NOP      
                  |L16.116|
000074  f8df938c          LDR      r9,|L16.1028|
000078  f8d99008          LDR      r9,[r9,#8]
00007c  f0090980          AND      r9,r9,#0x80
000080  f1b90f00          CMP      r9,#0
000084  d0f6              BEQ      |L16.116|
000086  bf00              NOP      
                  |L16.136|
000088  f8df9378          LDR      r9,|L16.1028|
00008c  f8d99008          LDR      r9,[r9,#8]
000090  f0090980          AND      r9,r9,#0x80
000094  f1b90f00          CMP      r9,#0
000098  d1f6              BNE      |L16.136|
00009a  f44f5900          MOV      r9,#0x2000
00009e  f8dfa368          LDR      r10,|L16.1032|
0000a2  f8ca9000          STR      r9,[r10,#0]
0000a6  b662              CPSIE    i
0000a8  bf00              NOP      
0000aa  ea4f2812          LSR      r8,r2,#8
0000ae  bf00              NOP      
0000b0  bf00              NOP      
                  |L16.178|
0000b2  f8df9350          LDR      r9,|L16.1028|
0000b6  f8d99008          LDR      r9,[r9,#8]
0000ba  f0090902          AND      r9,r9,#2
0000be  f1b90f00          CMP      r9,#0
0000c2  d0f6              BEQ      |L16.178|
0000c4  f8df933c          LDR      r9,|L16.1028|
0000c8  f8c9800c          STR      r8,[r9,#0xc]
0000cc  bf00              NOP      
0000ce  f00208ff          AND      r8,r2,#0xff
0000d2  bf00              NOP      
0000d4  bf00              NOP      
                  |L16.214|
0000d6  f8df932c          LDR      r9,|L16.1028|
0000da  f8d99008          LDR      r9,[r9,#8]
0000de  f0090902          AND      r9,r9,#2
0000e2  f1b90f00          CMP      r9,#0
0000e6  d0f6              BEQ      |L16.214|
0000e8  f8df9318          LDR      r9,|L16.1028|
0000ec  f8c9800c          STR      r8,[r9,#0xc]
0000f0  bf00              NOP      
0000f2  ea4f2817          LSR      r8,r7,#8
0000f6  bf00              NOP      
0000f8  bf00              NOP      
                  |L16.250|
0000fa  f8df9308          LDR      r9,|L16.1028|
0000fe  f8d99008          LDR      r9,[r9,#8]
000102  f0090902          AND      r9,r9,#2
000106  f1b90f00          CMP      r9,#0
00010a  d0f6              BEQ      |L16.250|
00010c  f8df92f4          LDR      r9,|L16.1028|
000110  e000              B        |L16.276|
                  |L16.274|
000112  e0d9              B        |L16.712|
                  |L16.276|
000114  f8c9800c          STR      r8,[r9,#0xc]
000118  bf00              NOP      
00011a  f00708ff          AND      r8,r7,#0xff
00011e  bf00              NOP      
000120  bf00              NOP      
                  |L16.290|
000122  f8df92e0          LDR      r9,|L16.1028|
000126  f8d99008          LDR      r9,[r9,#8]
00012a  f0090902          AND      r9,r9,#2
00012e  f1b90f00          CMP      r9,#0
000132  d0f6              BEQ      |L16.290|
000134  f8df92cc          LDR      r9,|L16.1028|
000138  f8c9800c          STR      r8,[r9,#0xc]
00013c  bf00              NOP      
00013e  f04f082b          MOV      r8,#0x2b
000142  b672              CPSID    i
000144  bf00              NOP      
000146  bf00              NOP      
                  |L16.328|
000148  f8df92b8          LDR      r9,|L16.1028|
00014c  f8d99008          LDR      r9,[r9,#8]
000150  f0090980          AND      r9,r9,#0x80
000154  f1b90f00          CMP      r9,#0
000158  d1f6              BNE      |L16.328|
00015a  f04f5900          MOV      r9,#0x20000000
00015e  f8dfa2a8          LDR      r10,|L16.1032|
000162  f8ca9000          STR      r9,[r10,#0]
000166  bf00              NOP      
                  |L16.360|
000168  f8df9298          LDR      r9,|L16.1028|
00016c  f8d99008          LDR      r9,[r9,#8]
000170  f0090902          AND      r9,r9,#2
000174  f1b90f00          CMP      r9,#0
000178  d0f6              BEQ      |L16.360|
00017a  f8df9288          LDR      r9,|L16.1028|
00017e  f8c9800c          STR      r8,[r9,#0xc]
000182  bf00              NOP      
                  |L16.388|
000184  f8df927c          LDR      r9,|L16.1028|
000188  f8d99008          LDR      r9,[r9,#8]
00018c  f0090980          AND      r9,r9,#0x80
000190  f1b90f00          CMP      r9,#0
000194  d0f6              BEQ      |L16.388|
000196  bf00              NOP      
                  |L16.408|
000198  f8df9268          LDR      r9,|L16.1028|
00019c  f8d99008          LDR      r9,[r9,#8]
0001a0  f0090980          AND      r9,r9,#0x80
0001a4  f1b90f00          CMP      r9,#0
0001a8  d1f6              BNE      |L16.408|
0001aa  f44f5900          MOV      r9,#0x2000
0001ae  f8dfa258          LDR      r10,|L16.1032|
0001b2  f8ca9000          STR      r9,[r10,#0]
0001b6  b662              CPSIE    i
0001b8  bf00              NOP      
0001ba  ea4f2813          LSR      r8,r3,#8
0001be  bf00              NOP      
0001c0  bf00              NOP      
                  |L16.450|
0001c2  f8df9240          LDR      r9,|L16.1028|
0001c6  f8d99008          LDR      r9,[r9,#8]
0001ca  f0090902          AND      r9,r9,#2
0001ce  f1b90f00          CMP      r9,#0
0001d2  d0f6              BEQ      |L16.450|
0001d4  f8df922c          LDR      r9,|L16.1028|
0001d8  f8c9800c          STR      r8,[r9,#0xc]
0001dc  bf00              NOP      
0001de  f00308ff          AND      r8,r3,#0xff
0001e2  bf00              NOP      
0001e4  bf00              NOP      
                  |L16.486|
0001e6  f8df921c          LDR      r9,|L16.1028|
0001ea  f8d99008          LDR      r9,[r9,#8]
0001ee  f0090902          AND      r9,r9,#2
0001f2  f1b90f00          CMP      r9,#0
0001f6  d0f6              BEQ      |L16.486|
0001f8  f8df9208          LDR      r9,|L16.1028|
0001fc  f8c9800c          STR      r8,[r9,#0xc]
000200  bf00              NOP      
000202  ea4f281c          LSR      r8,r12,#8
000206  bf00              NOP      
000208  bf00              NOP      
                  |L16.522|
00020a  f8df91f8          LDR      r9,|L16.1028|
00020e  f8d99008          LDR      r9,[r9,#8]
000212  f0090902          AND      r9,r9,#2
000216  f1b90f00          CMP      r9,#0
00021a  d0f6              BEQ      |L16.522|
00021c  f8df91e4          LDR      r9,|L16.1028|
000220  f8c9800c          STR      r8,[r9,#0xc]
000224  bf00              NOP      
000226  f00c08ff          AND      r8,r12,#0xff
00022a  bf00              NOP      
00022c  bf00              NOP      
                  |L16.558|
00022e  f8df91d4          LDR      r9,|L16.1028|
000232  f8d99008          LDR      r9,[r9,#8]
000236  f0090902          AND      r9,r9,#2
00023a  f1b90f00          CMP      r9,#0
00023e  d0f6              BEQ      |L16.558|
000240  f8df91c0          LDR      r9,|L16.1028|
000244  f8c9800c          STR      r8,[r9,#0xc]
000248  bf00              NOP      
00024a  f04f082c          MOV      r8,#0x2c
00024e  b672              CPSID    i
000250  bf00              NOP      
000252  bf00              NOP      
                  |L16.596|
000254  f8df91ac          LDR      r9,|L16.1028|
000258  f8d99008          LDR      r9,[r9,#8]
00025c  f0090980          AND      r9,r9,#0x80
000260  f1b90f00          CMP      r9,#0
000264  d1f6              BNE      |L16.596|
000266  f04f5900          MOV      r9,#0x20000000
00026a  f8dfa19c          LDR      r10,|L16.1032|
00026e  f8ca9000          STR      r9,[r10,#0]
000272  bf00              NOP      
                  |L16.628|
000274  f8df918c          LDR      r9,|L16.1028|
000278  f8d99008          LDR      r9,[r9,#8]
00027c  f0090902          AND      r9,r9,#2
000280  f1b90f00          CMP      r9,#0
000284  d0f6              BEQ      |L16.628|
000286  f8df917c          LDR      r9,|L16.1028|
00028a  f8c9800c          STR      r8,[r9,#0xc]
00028e  bf00              NOP      
                  |L16.656|
000290  f8df9170          LDR      r9,|L16.1028|
000294  f8d99008          LDR      r9,[r9,#8]
000298  f0090980          AND      r9,r9,#0x80
00029c  f1b90f00          CMP      r9,#0
0002a0  d0f6              BEQ      |L16.656|
0002a2  bf00              NOP      
                  |L16.676|
0002a4  f8df915c          LDR      r9,|L16.1028|
0002a8  f8d99008          LDR      r9,[r9,#8]
0002ac  f0090980          AND      r9,r9,#0x80
0002b0  f1b90f00          CMP      r9,#0
0002b4  d1f6              BNE      |L16.676|
0002b6  f44f5900          MOV      r9,#0x2000
0002ba  f8dfa14c          LDR      r10,|L16.1032|
0002be  f8ca9000          STR      r9,[r10,#0]
0002c2  b662              CPSIE    i
0002c4  bf00              NOP      
0002c6  e15d              B        |L16.1412|
                  |L16.712|
;;;426    	else
;;;427    		tft_set_region(0, 0, MAX_WIDTH, MAX_HEIGHT);
0002c8  2000              MOVS     r0,#0
0002ca  4601              MOV      r1,r0
0002cc  25f0              MOVS     r5,#0xf0
0002ce  f44f76a0          MOV      r6,#0x140
0002d2  4602              MOV      r2,r0
0002d4  460b              MOV      r3,r1
0002d6  1947              ADDS     r7,r0,r5
0002d8  eb010c06          ADD      r12,r1,r6
0002dc  f04f082a          MOV      r8,#0x2a
0002e0  b672              CPSID    i
0002e2  bf00              NOP      
0002e4  bf00              NOP      
0002e6  bf00              NOP      
                  |L16.744|
0002e8  f8df9118          LDR      r9,|L16.1028|
0002ec  f8d99008          LDR      r9,[r9,#8]
0002f0  f0090980          AND      r9,r9,#0x80
0002f4  f1b90f00          CMP      r9,#0
0002f8  d1f6              BNE      |L16.744|
0002fa  f04f5900          MOV      r9,#0x20000000
0002fe  f8dfa108          LDR      r10,|L16.1032|
000302  f8ca9000          STR      r9,[r10,#0]
000306  bf00              NOP      
                  |L16.776|
000308  f8df90f8          LDR      r9,|L16.1028|
00030c  f8d99008          LDR      r9,[r9,#8]
000310  f0090902          AND      r9,r9,#2
000314  f1b90f00          CMP      r9,#0
000318  d0f6              BEQ      |L16.776|
00031a  f8df90e8          LDR      r9,|L16.1028|
00031e  f8c9800c          STR      r8,[r9,#0xc]
000322  bf00              NOP      
                  |L16.804|
000324  f8df90dc          LDR      r9,|L16.1028|
000328  f8d99008          LDR      r9,[r9,#8]
00032c  f0090980          AND      r9,r9,#0x80
000330  f1b90f00          CMP      r9,#0
000334  d0f6              BEQ      |L16.804|
000336  bf00              NOP      
                  |L16.824|
000338  f8df90c8          LDR      r9,|L16.1028|
00033c  f8d99008          LDR      r9,[r9,#8]
000340  f0090980          AND      r9,r9,#0x80
000344  f1b90f00          CMP      r9,#0
000348  d1f6              BNE      |L16.824|
00034a  f44f5900          MOV      r9,#0x2000
00034e  f8dfa0b8          LDR      r10,|L16.1032|
000352  f8ca9000          STR      r9,[r10,#0]
000356  b662              CPSIE    i
000358  bf00              NOP      
00035a  ea4f2812          LSR      r8,r2,#8
00035e  bf00              NOP      
000360  bf00              NOP      
                  |L16.866|
000362  f8df90a0          LDR      r9,|L16.1028|
000366  f8d99008          LDR      r9,[r9,#8]
00036a  f0090902          AND      r9,r9,#2
00036e  f1b90f00          CMP      r9,#0
000372  d0f6              BEQ      |L16.866|
000374  f8df908c          LDR      r9,|L16.1028|
000378  f8c9800c          STR      r8,[r9,#0xc]
00037c  bf00              NOP      
00037e  f00208ff          AND      r8,r2,#0xff
000382  bf00              NOP      
000384  bf00              NOP      
                  |L16.902|
000386  f8df907c          LDR      r9,|L16.1028|
00038a  f8d99008          LDR      r9,[r9,#8]
00038e  f0090902          AND      r9,r9,#2
000392  f1b90f00          CMP      r9,#0
000396  d0f6              BEQ      |L16.902|
000398  f8df9068          LDR      r9,|L16.1028|
00039c  f8c9800c          STR      r8,[r9,#0xc]
0003a0  bf00              NOP      
0003a2  ea4f2817          LSR      r8,r7,#8
0003a6  bf00              NOP      
0003a8  bf00              NOP      
                  |L16.938|
0003aa  f8df9058          LDR      r9,|L16.1028|
0003ae  f8d99008          LDR      r9,[r9,#8]
0003b2  f0090902          AND      r9,r9,#2
0003b6  f1b90f00          CMP      r9,#0
0003ba  d0f6              BEQ      |L16.938|
0003bc  f8df9044          LDR      r9,|L16.1028|
0003c0  f8c9800c          STR      r8,[r9,#0xc]
0003c4  bf00              NOP      
0003c6  f00708ff          AND      r8,r7,#0xff
0003ca  bf00              NOP      
0003cc  bf00              NOP      
                  |L16.974|
0003ce  f8df9034          LDR      r9,|L16.1028|
0003d2  f8d99008          LDR      r9,[r9,#8]
0003d6  f0090902          AND      r9,r9,#2
0003da  f1b90f00          CMP      r9,#0
0003de  d0f6              BEQ      |L16.974|
0003e0  f8df9020          LDR      r9,|L16.1028|
0003e4  f8c9800c          STR      r8,[r9,#0xc]
0003e8  bf00              NOP      
0003ea  f04f082b          MOV      r8,#0x2b
0003ee  b672              CPSID    i
0003f0  bf00              NOP      
0003f2  bf00              NOP      
                  |L16.1012|
0003f4  f8df900c          LDR      r9,|L16.1028|
0003f8  f8d99008          LDR      r9,[r9,#8]
0003fc  e006              B        |L16.1036|
0003fe  0000              DCW      0x0000
                  |L16.1024|
                          DCD      tft_orientation
                  |L16.1028|
                          DCD      0x40015000
                  |L16.1032|
                          DCD      0x40020c18
                  |L16.1036|
00040c  f0090980          AND      r9,r9,#0x80
000410  f1b90f00          CMP      r9,#0
000414  d1ee              BNE      |L16.1012|
000416  f04f5900          MOV      r9,#0x20000000
00041a  f8dfa180          LDR      r10,|L16.1436|
00041e  f8ca9000          STR      r9,[r10,#0]
000422  bf00              NOP      
                  |L16.1060|
000424  f8df9178          LDR      r9,|L16.1440|
000428  f8d99008          LDR      r9,[r9,#8]
00042c  f0090902          AND      r9,r9,#2
000430  f1b90f00          CMP      r9,#0
000434  d0f6              BEQ      |L16.1060|
000436  f8df9168          LDR      r9,|L16.1440|
00043a  f8c9800c          STR      r8,[r9,#0xc]
00043e  bf00              NOP      
                  |L16.1088|
000440  f8df915c          LDR      r9,|L16.1440|
000444  f8d99008          LDR      r9,[r9,#8]
000448  f0090980          AND      r9,r9,#0x80
00044c  f1b90f00          CMP      r9,#0
000450  d0f6              BEQ      |L16.1088|
000452  bf00              NOP      
                  |L16.1108|
000454  f8df9148          LDR      r9,|L16.1440|
000458  f8d99008          LDR      r9,[r9,#8]
00045c  f0090980          AND      r9,r9,#0x80
000460  f1b90f00          CMP      r9,#0
000464  d1f6              BNE      |L16.1108|
000466  f44f5900          MOV      r9,#0x2000
00046a  f8dfa130          LDR      r10,|L16.1436|
00046e  f8ca9000          STR      r9,[r10,#0]
000472  b662              CPSIE    i
000474  bf00              NOP      
000476  ea4f2813          LSR      r8,r3,#8
00047a  bf00              NOP      
00047c  bf00              NOP      
                  |L16.1150|
00047e  f8df9120          LDR      r9,|L16.1440|
000482  f8d99008          LDR      r9,[r9,#8]
000486  f0090902          AND      r9,r9,#2
00048a  f1b90f00          CMP      r9,#0
00048e  d0f6              BEQ      |L16.1150|
000490  f8df910c          LDR      r9,|L16.1440|
000494  f8c9800c          STR      r8,[r9,#0xc]
000498  bf00              NOP      
00049a  f00308ff          AND      r8,r3,#0xff
00049e  bf00              NOP      
0004a0  bf00              NOP      
                  |L16.1186|
0004a2  f8df90fc          LDR      r9,|L16.1440|
0004a6  f8d99008          LDR      r9,[r9,#8]
0004aa  f0090902          AND      r9,r9,#2
0004ae  f1b90f00          CMP      r9,#0
0004b2  d0f6              BEQ      |L16.1186|
0004b4  f8df90e8          LDR      r9,|L16.1440|
0004b8  f8c9800c          STR      r8,[r9,#0xc]
0004bc  bf00              NOP      
0004be  ea4f281c          LSR      r8,r12,#8
0004c2  bf00              NOP      
0004c4  bf00              NOP      
                  |L16.1222|
0004c6  f8df90d8          LDR      r9,|L16.1440|
0004ca  f8d99008          LDR      r9,[r9,#8]
0004ce  f0090902          AND      r9,r9,#2
0004d2  f1b90f00          CMP      r9,#0
0004d6  d0f6              BEQ      |L16.1222|
0004d8  f8df90c4          LDR      r9,|L16.1440|
0004dc  f8c9800c          STR      r8,[r9,#0xc]
0004e0  bf00              NOP      
0004e2  f00c08ff          AND      r8,r12,#0xff
0004e6  bf00              NOP      
0004e8  bf00              NOP      
                  |L16.1258|
0004ea  f8df90b4          LDR      r9,|L16.1440|
0004ee  f8d99008          LDR      r9,[r9,#8]
0004f2  f0090902          AND      r9,r9,#2
0004f6  f1b90f00          CMP      r9,#0
0004fa  d0f6              BEQ      |L16.1258|
0004fc  f8df90a0          LDR      r9,|L16.1440|
000500  f8c9800c          STR      r8,[r9,#0xc]
000504  bf00              NOP      
000506  f04f082c          MOV      r8,#0x2c
00050a  b672              CPSID    i
00050c  bf00              NOP      
00050e  bf00              NOP      
                  |L16.1296|
000510  f8df908c          LDR      r9,|L16.1440|
000514  f8d99008          LDR      r9,[r9,#8]
000518  f0090980          AND      r9,r9,#0x80
00051c  f1b90f00          CMP      r9,#0
000520  d1f6              BNE      |L16.1296|
000522  f04f5900          MOV      r9,#0x20000000
000526  f8dfa074          LDR      r10,|L16.1436|
00052a  f8ca9000          STR      r9,[r10,#0]
00052e  bf00              NOP      
                  |L16.1328|
000530  f8df906c          LDR      r9,|L16.1440|
000534  f8d99008          LDR      r9,[r9,#8]
000538  f0090902          AND      r9,r9,#2
00053c  f1b90f00          CMP      r9,#0
000540  d0f6              BEQ      |L16.1328|
000542  f8df905c          LDR      r9,|L16.1440|
000546  f8c9800c          STR      r8,[r9,#0xc]
00054a  bf00              NOP      
                  |L16.1356|
00054c  f8df9050          LDR      r9,|L16.1440|
000550  f8d99008          LDR      r9,[r9,#8]
000554  f0090980          AND      r9,r9,#0x80
000558  f1b90f00          CMP      r9,#0
00055c  d0f6              BEQ      |L16.1356|
00055e  bf00              NOP      
                  |L16.1376|
000560  f8df903c          LDR      r9,|L16.1440|
000564  f8d99008          LDR      r9,[r9,#8]
000568  f0090980          AND      r9,r9,#0x80
00056c  f1b90f00          CMP      r9,#0
000570  d1f6              BNE      |L16.1376|
000572  f44f5900          MOV      r9,#0x2000
000576  f8dfa024          LDR      r10,|L16.1436|
00057a  f8ca9000          STR      r9,[r10,#0]
00057e  b662              CPSIE    i
000580  bf00              NOP      
000582  bf00              NOP      
                  |L16.1412|
;;;428    	
;;;429    	for (uint32_t i = 0; i < MAX_WIDTH*MAX_HEIGHT; i++) {
000584  2500              MOVS     r5,#0
000586  e003              B        |L16.1424|
                  |L16.1416|
;;;430    		tft_write_color(color);
000588  4620              MOV      r0,r4
00058a  f7fffffe          BL       tft_write_color
00058e  1c6d              ADDS     r5,r5,#1              ;429
                  |L16.1424|
000590  f5b53f96          CMP      r5,#0x12c00           ;429
000594  d3f8              BCC      |L16.1416|
;;;431    	}
;;;432    }
000596  e8bd87f0          POP      {r4-r10,pc}
;;;433    
                          ENDP

00059a  0000              DCW      0x0000
                  |L16.1436|
                          DCD      0x40020c18
                  |L16.1440|
                          DCD      0x40015000

                          AREA ||i.tft_force_clear||, CODE, READONLY, ALIGN=2

                  tft_force_clear PROC
;;;438      */
;;;439    void tft_force_clear(void) {
000000  b510              PUSH     {r4,lr}
;;;440    	for (uint8_t i = 0; i < CHAR_MAX_X; i++) {
000002  2000              MOVS     r0,#0
000004  e015              B        |L17.50|
                  |L17.6|
;;;441    		for (uint8_t j = 0; j < CHAR_MAX_Y; j++) {
000006  2100              MOVS     r1,#0
000008  e00f              B        |L17.42|
                  |L17.10|
;;;442    			text_buf[0][i][j] = ' ';
00000a  2220              MOVS     r2,#0x20
00000c  eb000380          ADD      r3,r0,r0,LSL #2
000010  4c0b              LDR      r4,|L17.64|
000012  eb040383          ADD      r3,r4,r3,LSL #2
000016  545a              STRB     r2,[r3,r1]
;;;443    			text_buf[1][i][j] = ' ';
000018  2320              MOVS     r3,#0x20
00001a  eb000480          ADD      r4,r0,r0,LSL #2
00001e  4a09              LDR      r2,|L17.68|
000020  eb020284          ADD      r2,r2,r4,LSL #2
000024  5453              STRB     r3,[r2,r1]
000026  1c4a              ADDS     r2,r1,#1              ;441
000028  b2d1              UXTB     r1,r2                 ;441
                  |L17.42|
00002a  2914              CMP      r1,#0x14              ;441
00002c  dbed              BLT      |L17.10|
00002e  1c41              ADDS     r1,r0,#1              ;440
000030  b2c8              UXTB     r0,r1                 ;440
                  |L17.50|
000032  2828              CMP      r0,#0x28              ;440
000034  dbe7              BLT      |L17.6|
;;;444    		}
;;;445    	}
;;;446    	tft_fill_color(curr_bg_color);
000036  4804              LDR      r0,|L17.72|
000038  8800              LDRH     r0,[r0,#0]  ; curr_bg_color
00003a  f7fffffe          BL       tft_fill_color
;;;447    }
00003e  bd10              POP      {r4,pc}
;;;448    
                          ENDP

                  |L17.64|
                          DCD      text_buf
                  |L17.68|
                          DCD      text_buf+0x320
                  |L17.72|
                          DCD      curr_bg_color

                          AREA ||i.tft_get_orientation||, CODE, READONLY, ALIGN=2

                  tft_get_orientation PROC
;;;336    
;;;337    uint8_t tft_get_orientation() {
000000  4801              LDR      r0,|L18.8|
;;;338    	return tft_orientation;
000002  7800              LDRB     r0,[r0,#0]  ; tft_orientation
;;;339    }
000004  4770              BX       lr
;;;340    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      tft_orientation

                          AREA ||i.tft_init||, CODE, READONLY, ALIGN=2

                  tft_init PROC
;;;250      */
;;;251    void tft_init(TFT_ORIENTATION orientation, uint16_t in_bg_color, uint16_t in_text_color, uint16_t in_text_color_sp, uint16_t in_highlight_color) { //, DISPLAY_MODE mode) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;252    	//cur_display_mode = mode;
;;;253    	
;;;254    	cur_screen = 0;
000010  2000              MOVS     r0,#0
000012  4929              LDR      r1,|L19.184|
000014  7008              STRB     r0,[r1,#0]
;;;255    	next_screen = 1;
000016  2001              MOVS     r0,#1
000018  4928              LDR      r1,|L19.188|
00001a  7008              STRB     r0,[r1,#0]
;;;256    	tft_orientation = orientation;
00001c  4828              LDR      r0,|L19.192|
00001e  7004              STRB     r4,[r0,#0]
;;;257    
;;;258    	#ifdef MODEL_ST7735
;;;259    	switch (tft_orientation) {
;;;260    		case 0:
;;;261    		col_shift = 2;
;;;262    		row_shift = 1;
;;;263    		break;
;;;264    		case 1:
;;;265    		col_shift = 1;
;;;266    		row_shift = 2;
;;;267    		break;
;;;268    		case 2:
;;;269    		col_shift = 2;
;;;270    		row_shift = 2;
;;;271    		break;
;;;272    		case 3:
;;;273    		col_shift = 1;
;;;274    		row_shift = 2;
;;;275    		break;
;;;276    	}
;;;277    	#endif
;;;278    
;;;279    	tft_config();
000020  f7fffffe          BL       tft_config
;;;280    	
;;;281    	tft_set_bg_color(in_bg_color);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       tft_set_bg_color
;;;282    	tft_set_text_color(in_text_color);
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       tft_set_text_color
;;;283    	tft_set_special_color(in_text_color_sp);
000030  4638              MOV      r0,r7
000032  f7fffffe          BL       tft_set_special_color
;;;284    	tft_set_highlight_color(in_highlight_color);
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       tft_set_highlight_color
;;;285    
;;;286    	tft_fill_color(in_bg_color);
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       tft_fill_color
;;;287    	delay(1);
000042  2001              MOVS     r0,#1
000044  491f              LDR      r1,|L19.196|
000046  6008              STR      r0,[r1,#0]  ; __delay
000048  bf00              NOP      
00004a  bf00              NOP      
                  |L19.76|
00004c  491d              LDR      r1,|L19.196|
00004e  6809              LDR      r1,[r1,#0]  ; __delay
000050  2900              CMP      r1,#0
000052  d1fb              BNE      |L19.76|
000054  bf00              NOP      
;;;288    
;;;289    	char_max_x = (orientation % 2) ? CHAR_MAX_X_HORIZONTAL : CHAR_MAX_X_VERTICAL;
000056  4620              MOV      r0,r4
000058  eb0471d0          ADD      r1,r4,r0,LSR #31
00005c  1049              ASRS     r1,r1,#1
00005e  eba40141          SUB      r1,r4,r1,LSL #1
000062  b109              CBZ      r1,|L19.104|
000064  2128              MOVS     r1,#0x28
000066  e000              B        |L19.106|
                  |L19.104|
000068  211e              MOVS     r1,#0x1e
                  |L19.106|
00006a  4a17              LDR      r2,|L19.200|
00006c  7011              STRB     r1,[r2,#0]
;;;290    	char_max_y = (orientation % 2) ? CHAR_MAX_Y_HORIZONTAL : CHAR_MAX_Y_VERTICAL;
00006e  4620              MOV      r0,r4
000070  eb0471d0          ADD      r1,r4,r0,LSR #31
000074  1049              ASRS     r1,r1,#1
000076  eba40141          SUB      r1,r4,r1,LSL #1
00007a  b109              CBZ      r1,|L19.128|
00007c  210f              MOVS     r1,#0xf
00007e  e000              B        |L19.130|
                  |L19.128|
000080  2114              MOVS     r1,#0x14
                  |L19.130|
000082  4a12              LDR      r2,|L19.204|
000084  7011              STRB     r1,[r2,#0]
;;;291    
;;;292    	row_width = (orientation%2) ? MAX_HEIGHT : MAX_WIDTH;
000086  4620              MOV      r0,r4
000088  eb0471d0          ADD      r1,r4,r0,LSR #31
00008c  1049              ASRS     r1,r1,#1
00008e  eba40141          SUB      r1,r4,r1,LSL #1
000092  b111              CBZ      r1,|L19.154|
000094  f44f71a0          MOV      r1,#0x140
000098  e000              B        |L19.156|
                  |L19.154|
00009a  21f0              MOVS     r1,#0xf0
                  |L19.156|
00009c  4a0c              LDR      r2,|L19.208|
00009e  8011              STRH     r1,[r2,#0]
;;;293    	
;;;294    	tft_clear();
0000a0  f7fffffe          BL       tft_clear
;;;295    	cur_screen = 1;
0000a4  2001              MOVS     r0,#1
0000a6  4904              LDR      r1,|L19.184|
0000a8  7008              STRB     r0,[r1,#0]
;;;296    	tft_clear();
0000aa  f7fffffe          BL       tft_clear
;;;297    	cur_screen = 0;
0000ae  2000              MOVS     r0,#0
0000b0  4901              LDR      r1,|L19.184|
0000b2  7008              STRB     r0,[r1,#0]
;;;298    	// tft_update();
;;;299    }
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;300    
                          ENDP

                  |L19.184|
                          DCD      cur_screen
                  |L19.188|
                          DCD      next_screen
                  |L19.192|
                          DCD      tft_orientation
                  |L19.196|
                          DCD      __delay
                  |L19.200|
                          DCD      char_max_x
                  |L19.204|
                          DCD      char_max_y
                  |L19.208|
                          DCD      row_width

                          AREA ||i.tft_printb||, CODE, READONLY, ALIGN=1

                  tft_printb PROC
;;;508    
;;;509    void tft_printb(uint8_t x, uint8_t y, uint32_t b, uint8_t bits) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b089              SUB      sp,sp,#0x24
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;510    	char buf[33]={0};
00000c  2124              MOVS     r1,#0x24
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       __aeabi_memclr4
;;;511    
;;;512    	for(int i=0; i<bits; i++) {
000014  2000              MOVS     r0,#0
000016  e00a              B        |L20.46|
                  |L20.24|
;;;513    		buf[i] = '0' + ((b & (1<<i)) != 0);
000018  2101              MOVS     r1,#1
00001a  4081              LSLS     r1,r1,r0
00001c  4021              ANDS     r1,r1,r4
00001e  b109              CBZ      r1,|L20.36|
000020  2101              MOVS     r1,#1
000022  e000              B        |L20.38|
                  |L20.36|
000024  2100              MOVS     r1,#0
                  |L20.38|
000026  3130              ADDS     r1,r1,#0x30
000028  f80d1000          STRB     r1,[sp,r0]
00002c  1c40              ADDS     r0,r0,#1              ;512
                  |L20.46|
00002e  42a8              CMP      r0,r5                 ;512
000030  dbf2              BLT      |L20.24|
;;;514    	}
;;;515    	
;;;516    	tft_printc(x, y, buf);
000032  466a              MOV      r2,sp
000034  4639              MOV      r1,r7
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       tft_printc
;;;517    }
00003c  b009              ADD      sp,sp,#0x24
00003e  bdf0              POP      {r4-r7,pc}
;;;518    void tft_printh(uint8_t x, uint8_t y, uint32_t b, uint8_t bits) {
                          ENDP


                          AREA ||i.tft_printf||, CODE, READONLY, ALIGN=1

                  tft_printf PROC
;;;548    
;;;549    void tft_printf(uint8_t x, uint8_t y, float num, uint32_t dp) {
000000  b570              PUSH     {r4-r6,lr}
000002  ed2d8b02          VPUSH    {d8}
000006  b08a              SUB      sp,sp,#0x28
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  eeb08a40          VMOV.F32 s16,s0
000010  4614              MOV      r4,r2
;;;550    	char buf[40];
;;;551    
;;;552    	ftos(buf, num, dp);
000012  4621              MOV      r1,r4
000014  eeb00a48          VMOV.F32 s0,s16
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       ftos
;;;553    
;;;554    	tft_printc(x, y, buf);
00001e  466a              MOV      r2,sp
000020  4631              MOV      r1,r6
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       tft_printc
;;;555    }
000028  b00a              ADD      sp,sp,#0x28
00002a  ecbd8b02          VPOP     {d8}
00002e  bd70              POP      {r4-r6,pc}
;;;556    
                          ENDP


                          AREA ||i.tft_printh||, CODE, READONLY, ALIGN=1

                  tft_printh PROC
;;;517    }
;;;518    void tft_printh(uint8_t x, uint8_t y, uint32_t b, uint8_t bits) {
000000  e92d43fe          PUSH     {r1-r9,lr}
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
;;;519    	char buf[9]={0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
000012  9002              STR      r0,[sp,#8]
;;;520    	int c = bits/4-1;
000014  4620              MOV      r0,r4
000016  17e1              ASRS     r1,r4,#31
000018  eb047191          ADD      r1,r4,r1,LSR #30
00001c  1089              ASRS     r1,r1,#2
00001e  1e4d              SUBS     r5,r1,#1
;;;521    	for(int i=0; i<bits; i+=4) {
000020  2000              MOVS     r0,#0
000022  e013              B        |L22.76|
                  |L22.36|
;;;522    		uint8_t tmp = (b & (0xF<<i))>>i;
000024  220f              MOVS     r2,#0xf
000026  4082              LSLS     r2,r2,r0
000028  4032              ANDS     r2,r2,r6
00002a  40c2              LSRS     r2,r2,r0
00002c  b2d1              UXTB     r1,r2
;;;523    		if (tmp < 10) 
00002e  290a              CMP      r1,#0xa
000030  da05              BGE      |L22.62|
;;;524    			buf[c] = '0' + tmp;
000032  f1010230          ADD      r2,r1,#0x30
000036  b2d2              UXTB     r2,r2
000038  f80d2005          STRB     r2,[sp,r5]
00003c  e004              B        |L22.72|
                  |L22.62|
;;;525    		else 
;;;526    			buf[c] = 'A' + tmp-10;
00003e  f1010237          ADD      r2,r1,#0x37
000042  b2d2              UXTB     r2,r2
000044  f80d2005          STRB     r2,[sp,r5]
                  |L22.72|
;;;527    		c--;
000048  1e6d              SUBS     r5,r5,#1
00004a  1d00              ADDS     r0,r0,#4              ;521
                  |L22.76|
00004c  42a0              CMP      r0,r4                 ;521
00004e  dbe9              BLT      |L22.36|
;;;528    	}
;;;529    	
;;;530    	tft_printc(x, y, buf);
000050  466a              MOV      r2,sp
000052  4641              MOV      r1,r8
000054  4638              MOV      r0,r7
000056  f7fffffe          BL       tft_printc
;;;531    }
00005a  e8bd83fe          POP      {r1-r9,pc}
;;;532    
                          ENDP


                          AREA ||i.tft_printi||, CODE, READONLY, ALIGN=1

                  tft_printi PROC
;;;500    
;;;501    void tft_printi(uint8_t x, uint8_t y, int32_t num) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;502    	char buf[12]={0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
00000e  9002              STR      r0,[sp,#8]
;;;503    
;;;504    	itos(buf, num);
000010  4621              MOV      r1,r4
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       itos
;;;505    
;;;506    	tft_printc(x, y, buf);
000018  466a              MOV      r2,sp
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       tft_printc
;;;507    }
000022  bdfe              POP      {r1-r7,pc}
;;;508    
                          ENDP


                          AREA ||i.tft_printl||, CODE, READONLY, ALIGN=1

                  tft_printl PROC
;;;532    
;;;533    void tft_printl(uint8_t x, uint8_t y, int64_t num) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;534    	char buf[12]={0};
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
000010  9002              STR      r0,[sp,#8]
;;;535    
;;;536    	ltos(buf, num);
000012  4622              MOV      r2,r4
000014  462b              MOV      r3,r5
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       ltos
;;;537    
;;;538    	tft_printc(x, y, buf);
00001c  466a              MOV      r2,sp
00001e  4639              MOV      r1,r7
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       tft_printc
;;;539    }
000026  bdfe              POP      {r1-r7,pc}
;;;540    
                          ENDP


                          AREA ||i.tft_prints||, CODE, READONLY, ALIGN=1

                  tft_prints PROC
;;;490      */
;;;491    void tft_prints(uint8_t x, uint8_t y, const char * fmt, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b570              PUSH     {r4-r6,lr}
000004  b0c2              SUB      sp,sp,#0x108
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;492    	char buf[255]={0}, *fp=buf;
00000a  f44f7180          MOV      r1,#0x100
00000e  a802              ADD      r0,sp,#8
000010  f7fffffe          BL       __aeabi_memclr4
000014  a802              ADD      r0,sp,#8
000016  9001              STR      r0,[sp,#4]
;;;493    	
;;;494    	va_list args;
;;;495    	va_start( args, fmt );
000018  a849              ADD      r0,sp,#0x124
00001a  9000              STR      r0,[sp,#0]
;;;496    	int c = print( &fp, fmt, args );
00001c  a801              ADD      r0,sp,#4
00001e  9a00              LDR      r2,[sp,#0]
000020  9948              LDR      r1,[sp,#0x120]
000022  f7fffffe          BL       print
000026  4606              MOV      r6,r0
;;;497    
;;;498    	tft_printc(x, y, buf);
000028  aa02              ADD      r2,sp,#8
00002a  4629              MOV      r1,r5
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       tft_printc
;;;499    }
000032  b042              ADD      sp,sp,#0x108
000034  bc70              POP      {r4-r6}
000036  f85dfb14          LDR      pc,[sp],#0x14
;;;500    
                          ENDP


                          AREA ||i.tft_printu||, CODE, READONLY, ALIGN=1

                  tft_printu PROC
;;;540    
;;;541    void tft_printu(uint8_t x, uint8_t y, uint32_t num) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;542    	char buf[12]={0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
00000e  9002              STR      r0,[sp,#8]
;;;543    
;;;544    	utos(buf, num);
000010  4621              MOV      r1,r4
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       utos
;;;545    
;;;546    	tft_printc(x, y, buf);
000018  466a              MOV      r2,sp
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       tft_printc
;;;547    }
000022  bdfe              POP      {r1-r7,pc}
;;;548    
                          ENDP


                          AREA ||i.tft_push_pxbuf||, CODE, READONLY, ALIGN=2

                  tft_push_pxbuf PROC
;;;634    }
;;;635    void tft_push_pxbuf(void* buf, uint32_t x, uint32_t y, uint32_t w, uint32_t h) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  4604              MOV      r4,r0
000006  4616              MOV      r6,r2
;;;636    	tft_dma_wait();
000008  f7fffffe          BL       tft_dma_wait
;;;637    	
;;;638    	tft_set_region(x, y, w-1, h-1);
00000c  9a01              LDR      r2,[sp,#4]
00000e  b290              UXTH     r0,r2
000010  b2b1              UXTH     r1,r6
000012  1e5a              SUBS     r2,r3,#1
000014  b297              UXTH     r7,r2
000016  9a0d              LDR      r2,[sp,#0x34]
000018  1e52              SUBS     r2,r2,#1
00001a  fa1ffc82          UXTH     r12,r2
00001e  4602              MOV      r2,r0
000020  460d              MOV      r5,r1
000022  eb000a07          ADD      r10,r0,r7
000026  fa1ff88a          UXTH     r8,r10
00002a  eb010a0c          ADD      r10,r1,r12
00002e  fa1ff98a          UXTH     r9,r10
000032  f04f0a2a          MOV      r10,#0x2a
000036  b672              CPSID    i
000038  bf00              NOP      
00003a  bf00              NOP      
00003c  bf00              NOP      
                  |L27.62|
00003e  f8dfb2b0          LDR      r11,|L27.752|
000042  f8dbb008          LDR      r11,[r11,#8]
000046  f00b0b80          AND      r11,r11,#0x80
00004a  f1bb0f00          CMP      r11,#0
00004e  d1f6              BNE      |L27.62|
000050  f04f5b00          MOV      r11,#0x20000000
000054  f8dfe29c          LDR      lr,|L27.756|
000058  f8ceb000          STR      r11,[lr,#0]
00005c  bf00              NOP      
                  |L27.94|
00005e  f8dfb290          LDR      r11,|L27.752|
000062  f8dbb008          LDR      r11,[r11,#8]
000066  f00b0b02          AND      r11,r11,#2
00006a  f1bb0f00          CMP      r11,#0
00006e  d0f6              BEQ      |L27.94|
000070  f8dfb27c          LDR      r11,|L27.752|
000074  f8cba00c          STR      r10,[r11,#0xc]
000078  bf00              NOP      
                  |L27.122|
00007a  f8dfb274          LDR      r11,|L27.752|
00007e  f8dbb008          LDR      r11,[r11,#8]
000082  f00b0b80          AND      r11,r11,#0x80
000086  f1bb0f00          CMP      r11,#0
00008a  d0f6              BEQ      |L27.122|
00008c  bf00              NOP      
                  |L27.142|
00008e  f8dfb260          LDR      r11,|L27.752|
000092  f8dbb008          LDR      r11,[r11,#8]
000096  f00b0b80          AND      r11,r11,#0x80
00009a  f1bb0f00          CMP      r11,#0
00009e  d1f6              BNE      |L27.142|
0000a0  f44f5b00          MOV      r11,#0x2000
0000a4  f8dfe24c          LDR      lr,|L27.756|
0000a8  f8ceb000          STR      r11,[lr,#0]
0000ac  b662              CPSIE    i
0000ae  bf00              NOP      
0000b0  ea4f2a12          LSR      r10,r2,#8
0000b4  bf00              NOP      
0000b6  bf00              NOP      
                  |L27.184|
0000b8  f8dfb234          LDR      r11,|L27.752|
0000bc  f8dbb008          LDR      r11,[r11,#8]
0000c0  f00b0b02          AND      r11,r11,#2
0000c4  f1bb0f00          CMP      r11,#0
0000c8  d0f6              BEQ      |L27.184|
0000ca  f8dfb224          LDR      r11,|L27.752|
0000ce  f8cba00c          STR      r10,[r11,#0xc]
0000d2  bf00              NOP      
0000d4  f0020aff          AND      r10,r2,#0xff
0000d8  bf00              NOP      
0000da  bf00              NOP      
                  |L27.220|
0000dc  f8dfb210          LDR      r11,|L27.752|
0000e0  f8dbb008          LDR      r11,[r11,#8]
0000e4  f00b0b02          AND      r11,r11,#2
0000e8  f1bb0f00          CMP      r11,#0
0000ec  d0f6              BEQ      |L27.220|
0000ee  f8dfb200          LDR      r11,|L27.752|
0000f2  f8cba00c          STR      r10,[r11,#0xc]
0000f6  bf00              NOP      
0000f8  ea4f2a18          LSR      r10,r8,#8
0000fc  bf00              NOP      
0000fe  bf00              NOP      
                  |L27.256|
000100  f8dfb1ec          LDR      r11,|L27.752|
000104  f8dbb008          LDR      r11,[r11,#8]
000108  f00b0b02          AND      r11,r11,#2
00010c  f1bb0f00          CMP      r11,#0
000110  d0f6              BEQ      |L27.256|
000112  f8dfb1dc          LDR      r11,|L27.752|
000116  f8cba00c          STR      r10,[r11,#0xc]
00011a  bf00              NOP      
00011c  f0080aff          AND      r10,r8,#0xff
000120  bf00              NOP      
000122  bf00              NOP      
                  |L27.292|
000124  f8dfb1c8          LDR      r11,|L27.752|
000128  f8dbb008          LDR      r11,[r11,#8]
00012c  f00b0b02          AND      r11,r11,#2
000130  f1bb0f00          CMP      r11,#0
000134  d0f6              BEQ      |L27.292|
000136  f8dfb1b8          LDR      r11,|L27.752|
00013a  f8cba00c          STR      r10,[r11,#0xc]
00013e  bf00              NOP      
000140  f04f0a2b          MOV      r10,#0x2b
000144  b672              CPSID    i
000146  bf00              NOP      
000148  bf00              NOP      
                  |L27.330|
00014a  f8dfb1a4          LDR      r11,|L27.752|
00014e  f8dbb008          LDR      r11,[r11,#8]
000152  f00b0b80          AND      r11,r11,#0x80
000156  f1bb0f00          CMP      r11,#0
00015a  d1f6              BNE      |L27.330|
00015c  f04f5b00          MOV      r11,#0x20000000
000160  f8dfe190          LDR      lr,|L27.756|
000164  f8ceb000          STR      r11,[lr,#0]
000168  bf00              NOP      
                  |L27.362|
00016a  f8dfb184          LDR      r11,|L27.752|
00016e  f8dbb008          LDR      r11,[r11,#8]
000172  f00b0b02          AND      r11,r11,#2
000176  f1bb0f00          CMP      r11,#0
00017a  d0f6              BEQ      |L27.362|
00017c  f8dfb170          LDR      r11,|L27.752|
000180  f8cba00c          STR      r10,[r11,#0xc]
000184  bf00              NOP      
                  |L27.390|
000186  f8dfb168          LDR      r11,|L27.752|
00018a  f8dbb008          LDR      r11,[r11,#8]
00018e  f00b0b80          AND      r11,r11,#0x80
000192  f1bb0f00          CMP      r11,#0
000196  d0f6              BEQ      |L27.390|
000198  bf00              NOP      
                  |L27.410|
00019a  f8dfb154          LDR      r11,|L27.752|
00019e  f8dbb008          LDR      r11,[r11,#8]
0001a2  f00b0b80          AND      r11,r11,#0x80
0001a6  f1bb0f00          CMP      r11,#0
0001aa  d1f6              BNE      |L27.410|
0001ac  f44f5b00          MOV      r11,#0x2000
0001b0  f8dfe140          LDR      lr,|L27.756|
0001b4  f8ceb000          STR      r11,[lr,#0]
0001b8  b662              CPSIE    i
0001ba  bf00              NOP      
0001bc  ea4f2a15          LSR      r10,r5,#8
0001c0  bf00              NOP      
0001c2  bf00              NOP      
                  |L27.452|
0001c4  f8dfb128          LDR      r11,|L27.752|
0001c8  f8dbb008          LDR      r11,[r11,#8]
0001cc  f00b0b02          AND      r11,r11,#2
0001d0  f1bb0f00          CMP      r11,#0
0001d4  d0f6              BEQ      |L27.452|
0001d6  f8dfb118          LDR      r11,|L27.752|
0001da  f8cba00c          STR      r10,[r11,#0xc]
0001de  bf00              NOP      
0001e0  f0050aff          AND      r10,r5,#0xff
0001e4  bf00              NOP      
0001e6  bf00              NOP      
                  |L27.488|
0001e8  f8dfb104          LDR      r11,|L27.752|
0001ec  f8dbb008          LDR      r11,[r11,#8]
0001f0  f00b0b02          AND      r11,r11,#2
0001f4  f1bb0f00          CMP      r11,#0
0001f8  d0f6              BEQ      |L27.488|
0001fa  f8dfb0f4          LDR      r11,|L27.752|
0001fe  f8cba00c          STR      r10,[r11,#0xc]
000202  bf00              NOP      
000204  ea4f2a19          LSR      r10,r9,#8
000208  bf00              NOP      
00020a  bf00              NOP      
                  |L27.524|
00020c  f8dfb0e0          LDR      r11,|L27.752|
000210  f8dbb008          LDR      r11,[r11,#8]
000214  f00b0b02          AND      r11,r11,#2
000218  f1bb0f00          CMP      r11,#0
00021c  d0f6              BEQ      |L27.524|
00021e  f8dfb0d0          LDR      r11,|L27.752|
000222  f8cba00c          STR      r10,[r11,#0xc]
000226  bf00              NOP      
000228  f0090aff          AND      r10,r9,#0xff
00022c  bf00              NOP      
00022e  bf00              NOP      
                  |L27.560|
000230  f8dfb0bc          LDR      r11,|L27.752|
000234  f8dbb008          LDR      r11,[r11,#8]
000238  f00b0b02          AND      r11,r11,#2
00023c  f1bb0f00          CMP      r11,#0
000240  d0f6              BEQ      |L27.560|
000242  f8dfb0ac          LDR      r11,|L27.752|
000246  f8cba00c          STR      r10,[r11,#0xc]
00024a  bf00              NOP      
00024c  f04f0a2c          MOV      r10,#0x2c
000250  b672              CPSID    i
000252  bf00              NOP      
000254  bf00              NOP      
                  |L27.598|
000256  f8dfb098          LDR      r11,|L27.752|
00025a  f8dbb008          LDR      r11,[r11,#8]
00025e  f00b0b80          AND      r11,r11,#0x80
000262  f1bb0f00          CMP      r11,#0
000266  d1f6              BNE      |L27.598|
000268  f04f5b00          MOV      r11,#0x20000000
00026c  f8dfe084          LDR      lr,|L27.756|
000270  f8ceb000          STR      r11,[lr,#0]
000274  bf00              NOP      
                  |L27.630|
000276  f8dfb078          LDR      r11,|L27.752|
00027a  f8dbb008          LDR      r11,[r11,#8]
00027e  f00b0b02          AND      r11,r11,#2
000282  f1bb0f00          CMP      r11,#0
000286  d0f6              BEQ      |L27.630|
000288  f8dfb064          LDR      r11,|L27.752|
00028c  f8cba00c          STR      r10,[r11,#0xc]
000290  bf00              NOP      
                  |L27.658|
000292  f8dfb05c          LDR      r11,|L27.752|
000296  f8dbb008          LDR      r11,[r11,#8]
00029a  f00b0b80          AND      r11,r11,#0x80
00029e  f1bb0f00          CMP      r11,#0
0002a2  d0f6              BEQ      |L27.658|
0002a4  bf00              NOP      
                  |L27.678|
0002a6  f8dfb048          LDR      r11,|L27.752|
0002aa  f8dbb008          LDR      r11,[r11,#8]
0002ae  f00b0b80          AND      r11,r11,#0x80
0002b2  f1bb0f00          CMP      r11,#0
0002b6  d1f6              BNE      |L27.678|
0002b8  f44f5b00          MOV      r11,#0x2000
0002bc  f8dfe034          LDR      lr,|L27.756|
0002c0  f8ceb000          STR      r11,[lr,#0]
0002c4  b662              CPSIE    i
0002c6  bf00              NOP      
0002c8  bf00              NOP      
;;;639    	
;;;640    	dma_transfer(TFT_DMA, buf, w*h*2);
0002ca  9a0d              LDR      r2,[sp,#0x34]
0002cc  fb03f102          MUL      r1,r3,r2
0002d0  f64f72ff          MOV      r2,#0xffff
0002d4  ea020041          AND      r0,r2,r1,LSL #1
0002d8  4907              LDR      r1,|L27.760|
0002da  60cc              STR      r4,[r1,#0xc]
0002dc  6048              STR      r0,[r1,#4]
0002de  6809              LDR      r1,[r1,#0]
0002e0  f0410101          ORR      r1,r1,#1
0002e4  4a04              LDR      r2,|L27.760|
0002e6  6011              STR      r1,[r2,#0]
0002e8  bf00              NOP      
;;;641    }
0002ea  e8bd8fff          POP      {r0-r11,pc}
;;;642    #define CHAR_BYTES            CHAR_WIDTH*CHAR_HEIGHT*2
                          ENDP

0002ee  0000              DCW      0x0000
                  |L27.752|
                          DCD      0x40015000
                  |L27.756|
                          DCD      0x40020c18
                  |L27.760|
                          DCD      0x40026470

                          AREA ||i.tft_put_pixel||, CODE, READONLY, ALIGN=2

                  tft_put_pixel PROC
;;;412      */
;;;413    void tft_put_pixel(uint16_t x, uint16_t y, uint16_t color) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;414    	tft_set_region(x, y, 1, 1);
00000a  4620              MOV      r0,r4
00000c  4629              MOV      r1,r5
00000e  2701              MOVS     r7,#1
000010  46bc              MOV      r12,r7
000012  4602              MOV      r2,r0
000014  460b              MOV      r3,r1
000016  eb000a07          ADD      r10,r0,r7
00001a  fa1ff88a          UXTH     r8,r10
00001e  eb010a0c          ADD      r10,r1,r12
000022  fa1ff98a          UXTH     r9,r10
000026  f04f0a2a          MOV      r10,#0x2a
00002a  b672              CPSID    i
00002c  bf00              NOP      
00002e  bf00              NOP      
000030  bf00              NOP      
                  |L28.50|
000032  f8dfb294          LDR      r11,|L28.712|
000036  f8dbb008          LDR      r11,[r11,#8]
00003a  f00b0b80          AND      r11,r11,#0x80
00003e  f1bb0f00          CMP      r11,#0
000042  d1f6              BNE      |L28.50|
000044  f04f5b00          MOV      r11,#0x20000000
000048  f8dfe280          LDR      lr,|L28.716|
00004c  f8ceb000          STR      r11,[lr,#0]
000050  bf00              NOP      
                  |L28.82|
000052  f8dfb274          LDR      r11,|L28.712|
000056  f8dbb008          LDR      r11,[r11,#8]
00005a  f00b0b02          AND      r11,r11,#2
00005e  f1bb0f00          CMP      r11,#0
000062  d0f6              BEQ      |L28.82|
000064  f8dfb260          LDR      r11,|L28.712|
000068  f8cba00c          STR      r10,[r11,#0xc]
00006c  bf00              NOP      
                  |L28.110|
00006e  f8dfb258          LDR      r11,|L28.712|
000072  f8dbb008          LDR      r11,[r11,#8]
000076  f00b0b80          AND      r11,r11,#0x80
00007a  f1bb0f00          CMP      r11,#0
00007e  d0f6              BEQ      |L28.110|
000080  bf00              NOP      
                  |L28.130|
000082  f8dfb244          LDR      r11,|L28.712|
000086  f8dbb008          LDR      r11,[r11,#8]
00008a  f00b0b80          AND      r11,r11,#0x80
00008e  f1bb0f00          CMP      r11,#0
000092  d1f6              BNE      |L28.130|
000094  f44f5b00          MOV      r11,#0x2000
000098  f8dfe230          LDR      lr,|L28.716|
00009c  f8ceb000          STR      r11,[lr,#0]
0000a0  b662              CPSIE    i
0000a2  bf00              NOP      
0000a4  ea4f2a12          LSR      r10,r2,#8
0000a8  bf00              NOP      
0000aa  bf00              NOP      
                  |L28.172|
0000ac  f8dfb218          LDR      r11,|L28.712|
0000b0  f8dbb008          LDR      r11,[r11,#8]
0000b4  f00b0b02          AND      r11,r11,#2
0000b8  f1bb0f00          CMP      r11,#0
0000bc  d0f6              BEQ      |L28.172|
0000be  f8dfb208          LDR      r11,|L28.712|
0000c2  f8cba00c          STR      r10,[r11,#0xc]
0000c6  bf00              NOP      
0000c8  f0020aff          AND      r10,r2,#0xff
0000cc  bf00              NOP      
0000ce  bf00              NOP      
                  |L28.208|
0000d0  f8dfb1f4          LDR      r11,|L28.712|
0000d4  f8dbb008          LDR      r11,[r11,#8]
0000d8  f00b0b02          AND      r11,r11,#2
0000dc  f1bb0f00          CMP      r11,#0
0000e0  d0f6              BEQ      |L28.208|
0000e2  f8dfb1e4          LDR      r11,|L28.712|
0000e6  f8cba00c          STR      r10,[r11,#0xc]
0000ea  bf00              NOP      
0000ec  ea4f2a18          LSR      r10,r8,#8
0000f0  bf00              NOP      
0000f2  bf00              NOP      
                  |L28.244|
0000f4  f8dfb1d0          LDR      r11,|L28.712|
0000f8  f8dbb008          LDR      r11,[r11,#8]
0000fc  f00b0b02          AND      r11,r11,#2
000100  f1bb0f00          CMP      r11,#0
000104  d0f6              BEQ      |L28.244|
000106  f8dfb1c0          LDR      r11,|L28.712|
00010a  f8cba00c          STR      r10,[r11,#0xc]
00010e  bf00              NOP      
000110  f0080aff          AND      r10,r8,#0xff
000114  bf00              NOP      
000116  bf00              NOP      
                  |L28.280|
000118  f8dfb1ac          LDR      r11,|L28.712|
00011c  f8dbb008          LDR      r11,[r11,#8]
000120  f00b0b02          AND      r11,r11,#2
000124  f1bb0f00          CMP      r11,#0
000128  d0f6              BEQ      |L28.280|
00012a  f8dfb19c          LDR      r11,|L28.712|
00012e  f8cba00c          STR      r10,[r11,#0xc]
000132  bf00              NOP      
000134  f04f0a2b          MOV      r10,#0x2b
000138  b672              CPSID    i
00013a  bf00              NOP      
00013c  bf00              NOP      
                  |L28.318|
00013e  f8dfb188          LDR      r11,|L28.712|
000142  f8dbb008          LDR      r11,[r11,#8]
000146  f00b0b80          AND      r11,r11,#0x80
00014a  f1bb0f00          CMP      r11,#0
00014e  d1f6              BNE      |L28.318|
000150  f04f5b00          MOV      r11,#0x20000000
000154  f8dfe174          LDR      lr,|L28.716|
000158  f8ceb000          STR      r11,[lr,#0]
00015c  bf00              NOP      
                  |L28.350|
00015e  f8dfb168          LDR      r11,|L28.712|
000162  f8dbb008          LDR      r11,[r11,#8]
000166  f00b0b02          AND      r11,r11,#2
00016a  f1bb0f00          CMP      r11,#0
00016e  d0f6              BEQ      |L28.350|
000170  f8dfb154          LDR      r11,|L28.712|
000174  f8cba00c          STR      r10,[r11,#0xc]
000178  bf00              NOP      
                  |L28.378|
00017a  f8dfb14c          LDR      r11,|L28.712|
00017e  f8dbb008          LDR      r11,[r11,#8]
000182  f00b0b80          AND      r11,r11,#0x80
000186  f1bb0f00          CMP      r11,#0
00018a  d0f6              BEQ      |L28.378|
00018c  bf00              NOP      
                  |L28.398|
00018e  f8dfb138          LDR      r11,|L28.712|
000192  f8dbb008          LDR      r11,[r11,#8]
000196  f00b0b80          AND      r11,r11,#0x80
00019a  f1bb0f00          CMP      r11,#0
00019e  d1f6              BNE      |L28.398|
0001a0  f44f5b00          MOV      r11,#0x2000
0001a4  f8dfe124          LDR      lr,|L28.716|
0001a8  f8ceb000          STR      r11,[lr,#0]
0001ac  b662              CPSIE    i
0001ae  bf00              NOP      
0001b0  ea4f2a13          LSR      r10,r3,#8
0001b4  bf00              NOP      
0001b6  bf00              NOP      
                  |L28.440|
0001b8  f8dfb10c          LDR      r11,|L28.712|
0001bc  f8dbb008          LDR      r11,[r11,#8]
0001c0  f00b0b02          AND      r11,r11,#2
0001c4  f1bb0f00          CMP      r11,#0
0001c8  d0f6              BEQ      |L28.440|
0001ca  f8dfb0fc          LDR      r11,|L28.712|
0001ce  f8cba00c          STR      r10,[r11,#0xc]
0001d2  bf00              NOP      
0001d4  f0030aff          AND      r10,r3,#0xff
0001d8  bf00              NOP      
0001da  bf00              NOP      
                  |L28.476|
0001dc  f8dfb0e8          LDR      r11,|L28.712|
0001e0  f8dbb008          LDR      r11,[r11,#8]
0001e4  f00b0b02          AND      r11,r11,#2
0001e8  f1bb0f00          CMP      r11,#0
0001ec  d0f6              BEQ      |L28.476|
0001ee  f8dfb0d8          LDR      r11,|L28.712|
0001f2  f8cba00c          STR      r10,[r11,#0xc]
0001f6  bf00              NOP      
0001f8  ea4f2a19          LSR      r10,r9,#8
0001fc  bf00              NOP      
0001fe  bf00              NOP      
                  |L28.512|
000200  f8dfb0c4          LDR      r11,|L28.712|
000204  f8dbb008          LDR      r11,[r11,#8]
000208  f00b0b02          AND      r11,r11,#2
00020c  f1bb0f00          CMP      r11,#0
000210  d0f6              BEQ      |L28.512|
000212  f8dfb0b4          LDR      r11,|L28.712|
000216  f8cba00c          STR      r10,[r11,#0xc]
00021a  bf00              NOP      
00021c  f0090aff          AND      r10,r9,#0xff
000220  bf00              NOP      
000222  bf00              NOP      
                  |L28.548|
000224  f8dfb0a0          LDR      r11,|L28.712|
000228  f8dbb008          LDR      r11,[r11,#8]
00022c  f00b0b02          AND      r11,r11,#2
000230  f1bb0f00          CMP      r11,#0
000234  d0f6              BEQ      |L28.548|
000236  f8dfb090          LDR      r11,|L28.712|
00023a  f8cba00c          STR      r10,[r11,#0xc]
00023e  bf00              NOP      
000240  f04f0a2c          MOV      r10,#0x2c
000244  b672              CPSID    i
000246  bf00              NOP      
000248  bf00              NOP      
                  |L28.586|
00024a  f8dfb07c          LDR      r11,|L28.712|
00024e  f8dbb008          LDR      r11,[r11,#8]
000252  f00b0b80          AND      r11,r11,#0x80
000256  f1bb0f00          CMP      r11,#0
00025a  d1f6              BNE      |L28.586|
00025c  f04f5b00          MOV      r11,#0x20000000
000260  f8dfe068          LDR      lr,|L28.716|
000264  f8ceb000          STR      r11,[lr,#0]
000268  bf00              NOP      
                  |L28.618|
00026a  f8dfb05c          LDR      r11,|L28.712|
00026e  f8dbb008          LDR      r11,[r11,#8]
000272  f00b0b02          AND      r11,r11,#2
000276  f1bb0f00          CMP      r11,#0
00027a  d0f6              BEQ      |L28.618|
00027c  f8dfb048          LDR      r11,|L28.712|
000280  f8cba00c          STR      r10,[r11,#0xc]
000284  bf00              NOP      
                  |L28.646|
000286  f8dfb040          LDR      r11,|L28.712|
00028a  f8dbb008          LDR      r11,[r11,#8]
00028e  f00b0b80          AND      r11,r11,#0x80
000292  f1bb0f00          CMP      r11,#0
000296  d0f6              BEQ      |L28.646|
000298  bf00              NOP      
                  |L28.666|
00029a  f8dfb02c          LDR      r11,|L28.712|
00029e  f8dbb008          LDR      r11,[r11,#8]
0002a2  f00b0b80          AND      r11,r11,#0x80
0002a6  f1bb0f00          CMP      r11,#0
0002aa  d1f6              BNE      |L28.666|
0002ac  f44f5b00          MOV      r11,#0x2000
0002b0  f8dfe018          LDR      lr,|L28.716|
0002b4  f8ceb000          STR      r11,[lr,#0]
0002b8  b662              CPSIE    i
0002ba  bf00              NOP      
0002bc  bf00              NOP      
;;;415    	tft_write_color(color);
0002be  4630              MOV      r0,r6
0002c0  f7fffffe          BL       tft_write_color
;;;416    }
0002c4  e8bd9ff0          POP      {r4-r12,pc}
;;;417    
                          ENDP

                  |L28.712|
                          DCD      0x40015000
                  |L28.716|
                          DCD      0x40020c18

                          AREA ||i.tft_pxbuf_update||, CODE, READONLY, ALIGN=2

                  tft_pxbuf_update PROC
;;;687    #define tft_px_index(py, px) (tft_px_buffer[px + py*row_width])
;;;688    void tft_pxbuf_update(uint16_t* tft_px_buffer) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  4606              MOV      r6,r0
;;;689    	const uint8_t *char_ptr;
;;;690    	uint16_t color;
;;;691    	uint32_t px = 0, py = 0;
000006  2700              MOVS     r7,#0
000008  46bc              MOV      r12,r7
;;;692    	uint16_t* pix;
;;;693    	
;;;694    	for (uint32_t j = 0; j < char_max_y; j++) {
00000a  2000              MOVS     r0,#0
00000c  e0df              B        |L29.462|
                  |L29.14|
;;;695    		for (uint32_t i = 0; i < char_max_x; i++) {
00000e  2100              MOVS     r1,#0
000010  e0d7              B        |L29.450|
                  |L29.18|
;;;696    			if (tft_char_is_changed(i, j)) {
000012  b2ca              UXTB     r2,r1
000014  b2c3              UXTB     r3,r0
000016  f8df91e4          LDR      r9,|L29.508|
00001a  f8999000          LDRB     r9,[r9,#0]  ; cur_screen
00001e  eb090ac9          ADD      r10,r9,r9,LSL #3
000022  eb0a1909          ADD      r9,r10,r9,LSL #4
000026  f8dfa1d8          LDR      r10,|L29.512|
00002a  eb0a1949          ADD      r9,r10,r9,LSL #5
00002e  eb020a82          ADD      r10,r2,r2,LSL #2
000032  eb09098a          ADD      r9,r9,r10,LSL #2
000036  f8199003          LDRB     r9,[r9,r3]
00003a  f8dfa1c8          LDR      r10,|L29.516|
00003e  f89aa000          LDRB     r10,[r10,#0]  ; next_screen
000042  eb0a0bca          ADD      r11,r10,r10,LSL #3
000046  eb0b1a0a          ADD      r10,r11,r10,LSL #4
00004a  f8dfb1b4          LDR      r11,|L29.512|
00004e  eb0b1a4a          ADD      r10,r11,r10,LSL #5
000052  eb020b82          ADD      r11,r2,r2,LSL #2
000056  eb0a0a8b          ADD      r10,r10,r11,LSL #2
00005a  f81aa003          LDRB     r10,[r10,r3]
00005e  45d1              CMP      r9,r10
000060  d14b              BNE      |L29.250|
000062  f8df9198          LDR      r9,|L29.508|
000066  f8999000          LDRB     r9,[r9,#0]  ; cur_screen
00006a  eb090ac9          ADD      r10,r9,r9,LSL #3
00006e  eb0a1909          ADD      r9,r10,r9,LSL #4
000072  f8dfa194          LDR      r10,|L29.520|
000076  eb0a1989          ADD      r9,r10,r9,LSL #6
00007a  eb020a82          ADD      r10,r2,r2,LSL #2
00007e  eb0909ca          ADD      r9,r9,r10,LSL #3
000082  f8399013          LDRH     r9,[r9,r3,LSL #1]
000086  f8dfa17c          LDR      r10,|L29.516|
00008a  f89aa000          LDRB     r10,[r10,#0]  ; next_screen
00008e  eb0a0bca          ADD      r11,r10,r10,LSL #3
000092  eb0b1a0a          ADD      r10,r11,r10,LSL #4
000096  f8dfb170          LDR      r11,|L29.520|
00009a  eb0b1a8a          ADD      r10,r11,r10,LSL #6
00009e  eb020b82          ADD      r11,r2,r2,LSL #2
0000a2  eb0a0acb          ADD      r10,r10,r11,LSL #3
0000a6  f83aa013          LDRH     r10,[r10,r3,LSL #1]
0000aa  45d1              CMP      r9,r10
0000ac  d125              BNE      |L29.250|
0000ae  f8df914c          LDR      r9,|L29.508|
0000b2  f8999000          LDRB     r9,[r9,#0]  ; cur_screen
0000b6  eb090ac9          ADD      r10,r9,r9,LSL #3
0000ba  eb0a1909          ADD      r9,r10,r9,LSL #4
0000be  f8dfa14c          LDR      r10,|L29.524|
0000c2  eb0a1989          ADD      r9,r10,r9,LSL #6
0000c6  eb020a82          ADD      r10,r2,r2,LSL #2
0000ca  eb0909ca          ADD      r9,r9,r10,LSL #3
0000ce  f8399013          LDRH     r9,[r9,r3,LSL #1]
0000d2  f8dfa130          LDR      r10,|L29.516|
0000d6  f89aa000          LDRB     r10,[r10,#0]  ; next_screen
0000da  eb0a0bca          ADD      r11,r10,r10,LSL #3
0000de  eb0b1a0a          ADD      r10,r11,r10,LSL #4
0000e2  f8dfb128          LDR      r11,|L29.524|
0000e6  eb0b1a8a          ADD      r10,r11,r10,LSL #6
0000ea  eb020b82          ADD      r11,r2,r2,LSL #2
0000ee  eb0a0acb          ADD      r10,r10,r11,LSL #3
0000f2  f83aa013          LDRH     r10,[r10,r3,LSL #1]
0000f6  45d1              CMP      r9,r10
0000f8  d002              BEQ      |L29.256|
                  |L29.250|
0000fa  f04f0901          MOV      r9,#1
0000fe  e001              B        |L29.260|
                  |L29.256|
000100  f04f0900          MOV      r9,#0
                  |L29.260|
000104  f1b90f00          CMP      r9,#0
000108  d05a              BEQ      |L29.448|
;;;697    				px = i * CHAR_WIDTH;
00010a  00cf              LSLS     r7,r1,#3
;;;698    				py = j * CHAR_HEIGHT;
00010c  ea4f1c00          LSL      r12,r0,#4
;;;699    				pix = &tft_px_index(py, px);
000110  4a3f              LDR      r2,|L29.528|
000112  8812              LDRH     r2,[r2,#0]  ; row_width
000114  fb0c7202          MLA      r2,r12,r2,r7
000118  eb060442          ADD      r4,r6,r2,LSL #1
;;;700    				char_ptr = CHAR_PTR(text_buf[cur_screen][i][j]);
00011c  4a37              LDR      r2,|L29.508|
00011e  7812              LDRB     r2,[r2,#0]  ; cur_screen
000120  eb0203c2          ADD      r3,r2,r2,LSL #3
000124  eb031202          ADD      r2,r3,r2,LSL #4
000128  4b35              LDR      r3,|L29.512|
00012a  eb031242          ADD      r2,r3,r2,LSL #5
00012e  eb010381          ADD      r3,r1,r1,LSL #2
000132  eb020283          ADD      r2,r2,r3,LSL #2
000136  5c12              LDRB     r2,[r2,r0]
000138  3a20              SUBS     r2,r2,#0x20
00013a  4b36              LDR      r3,|L29.532|
00013c  eb031502          ADD      r5,r3,r2,LSL #4
;;;701    				uint16_t fg = text_color_buf[cur_screen][i][j];
000140  4a2e              LDR      r2,|L29.508|
000142  7812              LDRB     r2,[r2,#0]  ; cur_screen
000144  eb0203c2          ADD      r3,r2,r2,LSL #3
000148  eb031202          ADD      r2,r3,r2,LSL #4
00014c  4b2e              LDR      r3,|L29.520|
00014e  eb031282          ADD      r2,r3,r2,LSL #6
000152  eb010381          ADD      r3,r1,r1,LSL #2
000156  eb0202c3          ADD      r2,r2,r3,LSL #3
00015a  f8329010          LDRH     r9,[r2,r0,LSL #1]
;;;702    				uint16_t bg = bg_color_buf[cur_screen][i][j];
00015e  4a27              LDR      r2,|L29.508|
000160  7812              LDRB     r2,[r2,#0]  ; cur_screen
000162  eb0203c2          ADD      r3,r2,r2,LSL #3
000166  eb031202          ADD      r2,r3,r2,LSL #4
00016a  4b28              LDR      r3,|L29.524|
00016c  eb031282          ADD      r2,r3,r2,LSL #6
000170  eb010381          ADD      r3,r1,r1,LSL #2
000174  eb0202c3          ADD      r2,r2,r3,LSL #3
000178  f832a010          LDRH     r10,[r2,r0,LSL #1]
;;;703    				for (uint32_t y = 0; y < CHAR_HEIGHT; y++) {
00017c  2300              MOVS     r3,#0
00017e  e01c              B        |L29.442|
                  |L29.384|
;;;704    					char_ptr++;
000180  1c6d              ADDS     r5,r5,#1
;;;705    					for (uint32_t x = CHAR_WIDTH; x > 0; x--) {
000182  2208              MOVS     r2,#8
000184  e011              B        |L29.426|
                  |L29.390|
;;;706    						color = (*char_ptr >> (x - 1) & 0x01) ? fg : bg;
000186  f895b000          LDRB     r11,[r5,#0]
00018a  f1a20e01          SUB      lr,r2,#1
00018e  fa4bfb0e          ASR      r11,r11,lr
000192  f00b0b01          AND      r11,r11,#1
000196  f1bb0f00          CMP      r11,#0
00019a  d001              BEQ      |L29.416|
00019c  46cb              MOV      r11,r9
00019e  e000              B        |L29.418|
                  |L29.416|
0001a0  46d3              MOV      r11,r10
                  |L29.418|
0001a2  46d8              MOV      r8,r11
;;;707    						*pix++ = color;
0001a4  f8248b02          STRH     r8,[r4],#2
0001a8  1e52              SUBS     r2,r2,#1              ;705
                  |L29.426|
0001aa  2a00              CMP      r2,#0                 ;705
0001ac  d1eb              BNE      |L29.390|
;;;708    					}
;;;709    					pix += row_width-CHAR_WIDTH;
0001ae  4a18              LDR      r2,|L29.528|
0001b0  8812              LDRH     r2,[r2,#0]  ; row_width
0001b2  3a08              SUBS     r2,r2,#8
0001b4  eb040442          ADD      r4,r4,r2,LSL #1
0001b8  1c5b              ADDS     r3,r3,#1              ;703
                  |L29.442|
0001ba  2b10              CMP      r3,#0x10              ;703
0001bc  d3e0              BCC      |L29.384|
;;;710    				}
;;;711    			}
0001be  bf00              NOP      
                  |L29.448|
0001c0  1c49              ADDS     r1,r1,#1              ;695
                  |L29.450|
0001c2  4a15              LDR      r2,|L29.536|
0001c4  7812              LDRB     r2,[r2,#0]            ;695  ; char_max_x
0001c6  4291              CMP      r1,r2                 ;695
0001c8  f4ffaf23          BCC      |L29.18|
0001cc  1c40              ADDS     r0,r0,#1              ;694
                  |L29.462|
0001ce  4913              LDR      r1,|L29.540|
0001d0  7809              LDRB     r1,[r1,#0]            ;694  ; char_max_y
0001d2  4288              CMP      r0,r1                 ;694
0001d4  f4ffaf1b          BCC      |L29.14|
;;;712    		}
;;;713    	}
;;;714    	
;;;715    	cur_screen = (cur_screen == 0);
0001d8  4808              LDR      r0,|L29.508|
0001da  7800              LDRB     r0,[r0,#0]  ; cur_screen
0001dc  b908              CBNZ     r0,|L29.482|
0001de  2001              MOVS     r0,#1
0001e0  e000              B        |L29.484|
                  |L29.482|
0001e2  2000              MOVS     r0,#0
                  |L29.484|
0001e4  4905              LDR      r1,|L29.508|
0001e6  7008              STRB     r0,[r1,#0]
;;;716    	next_screen = (next_screen == 0);
0001e8  4806              LDR      r0,|L29.516|
0001ea  7800              LDRB     r0,[r0,#0]  ; next_screen
0001ec  b908              CBNZ     r0,|L29.498|
0001ee  2001              MOVS     r0,#1
0001f0  e000              B        |L29.500|
                  |L29.498|
0001f2  2000              MOVS     r0,#0
                  |L29.500|
0001f4  4903              LDR      r1,|L29.516|
0001f6  7008              STRB     r0,[r1,#0]
;;;717    }
0001f8  e8bd8ff0          POP      {r4-r11,pc}
;;;718    void tft_pxbuf_write(uint16_t* tft_px_buffer) {
                          ENDP

                  |L29.508|
                          DCD      cur_screen
                  |L29.512|
                          DCD      text_buf
                  |L29.516|
                          DCD      next_screen
                  |L29.520|
                          DCD      text_color_buf
                  |L29.524|
                          DCD      bg_color_buf
                  |L29.528|
                          DCD      row_width
                  |L29.532|
                          DCD      ascii_8x16
                  |L29.536|
                          DCD      char_max_x
                  |L29.540|
                          DCD      char_max_y

                          AREA ||i.tft_pxbuf_write||, CODE, READONLY, ALIGN=2

                  tft_pxbuf_write PROC
;;;717    }
;;;718    void tft_pxbuf_write(uint16_t* tft_px_buffer) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4605              MOV      r5,r0
;;;719    	const uint8_t *char_ptr;
;;;720    	uint16_t color;
;;;721    	uint32_t px = 0, py = 0;
000006  2600              MOVS     r6,#0
000008  2700              MOVS     r7,#0
;;;722    	uint16_t* pix;
;;;723    	
;;;724    	for (uint32_t j = 0; j < char_max_y; j++) {
00000a  2000              MOVS     r0,#0
00000c  e06f              B        |L30.238|
                  |L30.14|
;;;725    		for (uint32_t i = 0; i < char_max_x; i++) {
00000e  2100              MOVS     r1,#0
000010  e068              B        |L30.228|
                  |L30.18|
;;;726    			char txt = text_buf[cur_screen][i][j];
000012  4c42              LDR      r4,|L30.284|
000014  7824              LDRB     r4,[r4,#0]  ; cur_screen
000016  eb0408c4          ADD      r8,r4,r4,LSL #3
00001a  eb081404          ADD      r4,r8,r4,LSL #4
00001e  f8df8100          LDR      r8,|L30.288|
000022  eb081444          ADD      r4,r8,r4,LSL #5
000026  eb010881          ADD      r8,r1,r1,LSL #2
00002a  eb040488          ADD      r4,r4,r8,LSL #2
00002e  f814c000          LDRB     r12,[r4,r0]
;;;727    			if (txt != ' ') {
000032  f1bc0f20          CMP      r12,#0x20
000036  d054              BEQ      |L30.226|
;;;728    				px = i * CHAR_WIDTH;
000038  00ce              LSLS     r6,r1,#3
;;;729    				py = j * CHAR_HEIGHT;
00003a  0107              LSLS     r7,r0,#4
;;;730    				pix = &tft_px_index(py, px);
00003c  4c39              LDR      r4,|L30.292|
00003e  8824              LDRH     r4,[r4,#0]  ; row_width
000040  fb076404          MLA      r4,r7,r4,r6
000044  eb050244          ADD      r2,r5,r4,LSL #1
;;;731    				char_ptr = CHAR_PTR(txt);
000048  f1ac0420          SUB      r4,r12,#0x20
00004c  f8df80d8          LDR      r8,|L30.296|
000050  eb081304          ADD      r3,r8,r4,LSL #4
;;;732    				uint16_t fg = text_color_buf[cur_screen][i][j];
000054  4c31              LDR      r4,|L30.284|
000056  7824              LDRB     r4,[r4,#0]  ; cur_screen
000058  eb0408c4          ADD      r8,r4,r4,LSL #3
00005c  eb081404          ADD      r4,r8,r4,LSL #4
000060  f8df80c8          LDR      r8,|L30.300|
000064  eb081484          ADD      r4,r8,r4,LSL #6
000068  eb010881          ADD      r8,r1,r1,LSL #2
00006c  eb0404c8          ADD      r4,r4,r8,LSL #3
000070  f834a010          LDRH     r10,[r4,r0,LSL #1]
;;;733    				uint16_t bg = bg_color_buf[cur_screen][i][j];
000074  4c29              LDR      r4,|L30.284|
000076  7824              LDRB     r4,[r4,#0]  ; cur_screen
000078  eb0408c4          ADD      r8,r4,r4,LSL #3
00007c  eb081404          ADD      r4,r8,r4,LSL #4
000080  f8df80ac          LDR      r8,|L30.304|
000084  eb081484          ADD      r4,r8,r4,LSL #6
000088  eb010881          ADD      r8,r1,r1,LSL #2
00008c  eb0404c8          ADD      r4,r4,r8,LSL #3
000090  f8344010          LDRH     r4,[r4,r0,LSL #1]
000094  9400              STR      r4,[sp,#0]
;;;734    				for (uint32_t y = 0; y < CHAR_HEIGHT; y++) {
000096  f04f0800          MOV      r8,#0
00009a  e01e              B        |L30.218|
                  |L30.156|
;;;735    					char_ptr++;
00009c  1c5b              ADDS     r3,r3,#1
;;;736    					for (uint32_t x = CHAR_WIDTH; x > 0; x--) {
00009e  2408              MOVS     r4,#8
0000a0  e012              B        |L30.200|
                  |L30.162|
;;;737    						color = (*char_ptr >> (x - 1) & 0x01) ? fg : bg;
0000a2  f893b000          LDRB     r11,[r3,#0]
0000a6  f1a40e01          SUB      lr,r4,#1
0000aa  fa4bfb0e          ASR      r11,r11,lr
0000ae  f00b0b01          AND      r11,r11,#1
0000b2  f1bb0f00          CMP      r11,#0
0000b6  d001              BEQ      |L30.188|
0000b8  46d3              MOV      r11,r10
0000ba  e001              B        |L30.192|
                  |L30.188|
0000bc  f8ddb000          LDR      r11,[sp,#0]
                  |L30.192|
0000c0  46d9              MOV      r9,r11
;;;738    						*pix++ = color;
0000c2  f8229b02          STRH     r9,[r2],#2
0000c6  1e64              SUBS     r4,r4,#1              ;736
                  |L30.200|
0000c8  2c00              CMP      r4,#0                 ;736
0000ca  d1ea              BNE      |L30.162|
;;;739    					}
;;;740    					pix += row_width-CHAR_WIDTH;
0000cc  4c15              LDR      r4,|L30.292|
0000ce  8824              LDRH     r4,[r4,#0]  ; row_width
0000d0  3c08              SUBS     r4,r4,#8
0000d2  eb020244          ADD      r2,r2,r4,LSL #1
0000d6  f1080801          ADD      r8,r8,#1              ;734
                  |L30.218|
0000da  f1b80f10          CMP      r8,#0x10              ;734
0000de  d3dd              BCC      |L30.156|
;;;741    				}
;;;742    			}
0000e0  bf00              NOP      
                  |L30.226|
0000e2  1c49              ADDS     r1,r1,#1              ;725
                  |L30.228|
0000e4  4c13              LDR      r4,|L30.308|
0000e6  7824              LDRB     r4,[r4,#0]            ;725  ; char_max_x
0000e8  42a1              CMP      r1,r4                 ;725
0000ea  d392              BCC      |L30.18|
0000ec  1c40              ADDS     r0,r0,#1              ;724
                  |L30.238|
0000ee  4912              LDR      r1,|L30.312|
0000f0  7809              LDRB     r1,[r1,#0]            ;724  ; char_max_y
0000f2  4288              CMP      r0,r1                 ;724
0000f4  d38b              BCC      |L30.14|
;;;743    		}
;;;744    	}
;;;745    	
;;;746    	cur_screen = (cur_screen == 0);
0000f6  4809              LDR      r0,|L30.284|
0000f8  7800              LDRB     r0,[r0,#0]  ; cur_screen
0000fa  b908              CBNZ     r0,|L30.256|
0000fc  2001              MOVS     r0,#1
0000fe  e000              B        |L30.258|
                  |L30.256|
000100  2000              MOVS     r0,#0
                  |L30.258|
000102  4906              LDR      r1,|L30.284|
000104  7008              STRB     r0,[r1,#0]
;;;747    	next_screen = (next_screen == 0);
000106  480d              LDR      r0,|L30.316|
000108  7800              LDRB     r0,[r0,#0]  ; next_screen
00010a  b908              CBNZ     r0,|L30.272|
00010c  2001              MOVS     r0,#1
00010e  e000              B        |L30.274|
                  |L30.272|
000110  2000              MOVS     r0,#0
                  |L30.274|
000112  490a              LDR      r1,|L30.316|
000114  7008              STRB     r0,[r1,#0]
;;;748    }
000116  e8bd8ff8          POP      {r3-r11,pc}
                          ENDP

00011a  0000              DCW      0x0000
                  |L30.284|
                          DCD      cur_screen
                  |L30.288|
                          DCD      text_buf
                  |L30.292|
                          DCD      row_width
                  |L30.296|
                          DCD      ascii_8x16
                  |L30.300|
                          DCD      text_color_buf
                  |L30.304|
                          DCD      bg_color_buf
                  |L30.308|
                          DCD      char_max_x
                  |L30.312|
                          DCD      char_max_y
                  |L30.316|
                          DCD      next_screen

                          AREA ||i.tft_reset||, CODE, READONLY, ALIGN=2

                  tft_reset PROC
;;;209      */
;;;210    void tft_reset(void)
000000  b510              PUSH     {r4,lr}
;;;211    {
;;;212    	gpio_set(TFT_RST);
000002  2110              MOVS     r1,#0x10
000004  4814              LDR      r0,|L31.88|
000006  f7fffffe          BL       LL_GPIO_SetOutputPin
;;;213    	delay(100);
00000a  2064              MOVS     r0,#0x64
00000c  4913              LDR      r1,|L31.92|
00000e  6008              STR      r0,[r1,#0]  ; __delay
000010  bf00              NOP      
000012  bf00              NOP      
                  |L31.20|
000014  4911              LDR      r1,|L31.92|
000016  6809              LDR      r1,[r1,#0]  ; __delay
000018  2900              CMP      r1,#0
00001a  d1fb              BNE      |L31.20|
00001c  bf00              NOP      
;;;214    	gpio_reset(TFT_RST);
00001e  2110              MOVS     r1,#0x10
000020  480d              LDR      r0,|L31.88|
000022  f7fffffe          BL       LL_GPIO_ResetOutputPin
;;;215    	delay(100);
000026  2064              MOVS     r0,#0x64
000028  490c              LDR      r1,|L31.92|
00002a  6008              STR      r0,[r1,#0]  ; __delay
00002c  bf00              NOP      
00002e  bf00              NOP      
                  |L31.48|
000030  490a              LDR      r1,|L31.92|
000032  6809              LDR      r1,[r1,#0]  ; __delay
000034  2900              CMP      r1,#0
000036  d1fb              BNE      |L31.48|
000038  bf00              NOP      
;;;216    	gpio_set(TFT_RST);
00003a  2110              MOVS     r1,#0x10
00003c  4806              LDR      r0,|L31.88|
00003e  f7fffffe          BL       LL_GPIO_SetOutputPin
;;;217    	delay(100);
000042  2064              MOVS     r0,#0x64
000044  4905              LDR      r1,|L31.92|
000046  6008              STR      r0,[r1,#0]  ; __delay
000048  bf00              NOP      
00004a  bf00              NOP      
                  |L31.76|
00004c  4903              LDR      r1,|L31.92|
00004e  6809              LDR      r1,[r1,#0]  ; __delay
000050  2900              CMP      r1,#0
000052  d1fb              BNE      |L31.76|
000054  bf00              NOP      
;;;218    }
000056  bd10              POP      {r4,pc}
;;;219    
                          ENDP

                  |L31.88|
                          DCD      0x40020800
                  |L31.92|
                          DCD      __delay

                          AREA ||i.tft_set_bg_color||, CODE, READONLY, ALIGN=2

                  tft_set_bg_color PROC
;;;305      */
;;;306    void tft_set_bg_color(uint16_t in_bg_color) {
000000  4901              LDR      r1,|L32.8|
;;;307    	curr_bg_color = in_bg_color;
000002  8008              STRH     r0,[r1,#0]
;;;308    }
000004  4770              BX       lr
;;;309    
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      curr_bg_color

                          AREA ||i.tft_set_highlight_color||, CODE, READONLY, ALIGN=2

                  tft_set_highlight_color PROC
;;;314      */
;;;315    void tft_set_highlight_color(uint16_t highlight_color) {
000000  4901              LDR      r1,|L33.8|
;;;316    	curr_highlight_color = highlight_color;
000002  8008              STRH     r0,[r1,#0]
;;;317    }
000004  4770              BX       lr
;;;318    
                          ENDP

000006  0000              DCW      0x0000
                  |L33.8|
                          DCD      curr_highlight_color

                          AREA ||i.tft_set_special_color||, CODE, READONLY, ALIGN=2

                  tft_set_special_color PROC
;;;332      */
;;;333    void tft_set_special_color(uint16_t text_color_sp) {
000000  4901              LDR      r1,|L34.8|
;;;334    	curr_text_color_sp = text_color_sp;
000002  8008              STRH     r0,[r1,#0]
;;;335    }
000004  4770              BX       lr
;;;336    
                          ENDP

000006  0000              DCW      0x0000
                  |L34.8|
                          DCD      curr_text_color_sp

                          AREA ||i.tft_set_text_color||, CODE, READONLY, ALIGN=2

                  tft_set_text_color PROC
;;;323      */
;;;324    void tft_set_text_color(uint16_t in_text_color) {
000000  4901              LDR      r1,|L35.8|
;;;325    	curr_text_color = in_text_color;
000002  8008              STRH     r0,[r1,#0]
;;;326    }
000004  4770              BX       lr
;;;327    
                          ENDP

000006  0000              DCW      0x0000
                  |L35.8|
                          DCD      curr_text_color

                          AREA ||i.tft_spi_init||, CODE, READONLY, ALIGN=2

                  tft_spi_init PROC
;;;158      */
;;;159    void tft_spi_init(void) {
000000  b510              PUSH     {r4,lr}
;;;160    	LL_SPI_EnableDMAReq_TX(TFT_SPI);
000002  bf00              NOP      
000004  4814              LDR      r0,|L36.88|
000006  6840              LDR      r0,[r0,#4]
000008  f0400002          ORR      r0,r0,#2
00000c  4912              LDR      r1,|L36.88|
00000e  6048              STR      r0,[r1,#4]
000010  bf00              NOP      
;;;161    	TFT_DMA->PAR = (uint32_t) &TFT_SPI->DR;
000012  4811              LDR      r0,|L36.88|
000014  300c              ADDS     r0,r0,#0xc
000016  4911              LDR      r1,|L36.92|
000018  6008              STR      r0,[r1,#0]
;;;162    	// TFT_DMA->CR |= DMA_SxCR_DIR_0;
;;;163    	LL_SPI_Enable(TFT_SPI);
00001a  bf00              NOP      
00001c  480e              LDR      r0,|L36.88|
00001e  6800              LDR      r0,[r0,#0]
000020  f0400040          ORR      r0,r0,#0x40
000024  490c              LDR      r1,|L36.88|
000026  6008              STR      r0,[r1,#0]
000028  bf00              NOP      
;;;164    
;;;165    	gpio_set(TFT_DC);
00002a  1449              ASRS     r1,r1,#17
00002c  480c              LDR      r0,|L36.96|
00002e  f7fffffe          BL       LL_GPIO_SetOutputPin
;;;166    	gpio_reset(TFT_LED);
000032  2140              MOVS     r1,#0x40
000034  480b              LDR      r0,|L36.100|
000036  f7fffffe          BL       LL_GPIO_ResetOutputPin
;;;167    	
;;;168    	dma_transfer(TFT_DMA, (void*)0x20000000, 16);
00003a  f04f5100          MOV      r1,#0x20000000
00003e  2010              MOVS     r0,#0x10
000040  4a06              LDR      r2,|L36.92|
000042  3a08              SUBS     r2,r2,#8
000044  60d1              STR      r1,[r2,#0xc]
000046  6050              STR      r0,[r2,#4]
000048  6812              LDR      r2,[r2,#0]
00004a  f0420201          ORR      r2,r2,#1
00004e  4b03              LDR      r3,|L36.92|
000050  3b08              SUBS     r3,r3,#8
000052  601a              STR      r2,[r3,#0]
000054  bf00              NOP      
;;;169    }
000056  bd10              POP      {r4,pc}
;;;170    
                          ENDP

                  |L36.88|
                          DCD      0x40015000
                  |L36.92|
                          DCD      0x40026478
                  |L36.96|
                          DCD      0x40020c00
                  |L36.100|
                          DCD      0x40020000

                          AREA ||i.tft_update||, CODE, READONLY, ALIGN=2

                  tft_update PROC
;;;568      */
;;;569    void tft_update(void) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;570    	int16_t adj_cnt = 0;
000004  2600              MOVS     r6,#0
;;;571    	uint16_t color;
;;;572    	uint8_t char_cnt = 0;
000006  2700              MOVS     r7,#0
;;;573    	uint8_t y = 0;
000008  46b0              MOV      r8,r6
;;;574    
;;;575    	for (uint8_t j = 0; j < char_max_y; j++) {
00000a  2500              MOVS     r5,#0
00000c  e2bf              B        |L37.1422|
                  |L37.14|
;;;576    		for (uint8_t i = 0; i < char_max_x; i++) {
00000e  2400              MOVS     r4,#0
000010  e2b6              B        |L37.1408|
                  |L37.18|
;;;577    			if (tft_char_is_changed(i, j)) {
000012  4620              MOV      r0,r4
000014  4629              MOV      r1,r5
000016  4afe              LDR      r2,|L37.1040|
000018  7812              LDRB     r2,[r2,#0]  ; cur_screen
00001a  eb0203c2          ADD      r3,r2,r2,LSL #3
00001e  eb031202          ADD      r2,r3,r2,LSL #4
000022  4bfc              LDR      r3,|L37.1044|
000024  eb031242          ADD      r2,r3,r2,LSL #5
000028  eb000380          ADD      r3,r0,r0,LSL #2
00002c  eb020283          ADD      r2,r2,r3,LSL #2
000030  5c52              LDRB     r2,[r2,r1]
000032  4bf9              LDR      r3,|L37.1048|
000034  781b              LDRB     r3,[r3,#0]  ; next_screen
000036  eb030cc3          ADD      r12,r3,r3,LSL #3
00003a  eb0c1303          ADD      r3,r12,r3,LSL #4
00003e  f8dfc3d4          LDR      r12,|L37.1044|
000042  eb0c1343          ADD      r3,r12,r3,LSL #5
000046  eb000c80          ADD      r12,r0,r0,LSL #2
00004a  eb03038c          ADD      r3,r3,r12,LSL #2
00004e  5c5b              LDRB     r3,[r3,r1]
000050  429a              CMP      r2,r3
000052  d141              BNE      |L37.216|
000054  4aee              LDR      r2,|L37.1040|
000056  7812              LDRB     r2,[r2,#0]  ; cur_screen
000058  eb0203c2          ADD      r3,r2,r2,LSL #3
00005c  eb031202          ADD      r2,r3,r2,LSL #4
000060  4bee              LDR      r3,|L37.1052|
000062  eb031282          ADD      r2,r3,r2,LSL #6
000066  eb000380          ADD      r3,r0,r0,LSL #2
00006a  eb0202c3          ADD      r2,r2,r3,LSL #3
00006e  f8322011          LDRH     r2,[r2,r1,LSL #1]
000072  4be9              LDR      r3,|L37.1048|
000074  781b              LDRB     r3,[r3,#0]  ; next_screen
000076  eb030cc3          ADD      r12,r3,r3,LSL #3
00007a  eb0c1303          ADD      r3,r12,r3,LSL #4
00007e  f8dfc39c          LDR      r12,|L37.1052|
000082  eb0c1383          ADD      r3,r12,r3,LSL #6
000086  eb000c80          ADD      r12,r0,r0,LSL #2
00008a  eb0303cc          ADD      r3,r3,r12,LSL #3
00008e  f8333011          LDRH     r3,[r3,r1,LSL #1]
000092  429a              CMP      r2,r3
000094  d120              BNE      |L37.216|
000096  4ade              LDR      r2,|L37.1040|
000098  7812              LDRB     r2,[r2,#0]  ; cur_screen
00009a  eb0203c2          ADD      r3,r2,r2,LSL #3
00009e  eb031202          ADD      r2,r3,r2,LSL #4
0000a2  4bdf              LDR      r3,|L37.1056|
0000a4  eb031282          ADD      r2,r3,r2,LSL #6
0000a8  eb000380          ADD      r3,r0,r0,LSL #2
0000ac  eb0202c3          ADD      r2,r2,r3,LSL #3
0000b0  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000b4  4bd8              LDR      r3,|L37.1048|
0000b6  781b              LDRB     r3,[r3,#0]  ; next_screen
0000b8  eb030cc3          ADD      r12,r3,r3,LSL #3
0000bc  eb0c1303          ADD      r3,r12,r3,LSL #4
0000c0  f8dfc35c          LDR      r12,|L37.1056|
0000c4  eb0c1383          ADD      r3,r12,r3,LSL #6
0000c8  eb000c80          ADD      r12,r0,r0,LSL #2
0000cc  eb0303cc          ADD      r3,r3,r12,LSL #3
0000d0  f8333011          LDRH     r3,[r3,r1,LSL #1]
0000d4  429a              CMP      r2,r3
0000d6  d001              BEQ      |L37.220|
                  |L37.216|
0000d8  2201              MOVS     r2,#1
0000da  e000              B        |L37.222|
                  |L37.220|
0000dc  2200              MOVS     r2,#0
                  |L37.222|
0000de  2a00              CMP      r2,#0
0000e0  d07e              BEQ      |L37.480|
;;;578    				adj_cnt = 1;
0000e2  2601              MOVS     r6,#1
;;;579    				while ((i + adj_cnt < char_max_x) && tft_char_is_changed(i + (adj_cnt), j)) adj_cnt++; //Search for diff char
0000e4  e001              B        |L37.234|
                  |L37.230|
0000e6  1c70              ADDS     r0,r6,#1
0000e8  b206              SXTH     r6,r0
                  |L37.234|
0000ea  19a0              ADDS     r0,r4,r6
0000ec  49cd              LDR      r1,|L37.1060|
0000ee  7809              LDRB     r1,[r1,#0]  ; char_max_x
0000f0  4288              CMP      r0,r1
0000f2  da68              BGE      |L37.454|
0000f4  19a2              ADDS     r2,r4,r6
0000f6  b2d0              UXTB     r0,r2
0000f8  4629              MOV      r1,r5
0000fa  4ac5              LDR      r2,|L37.1040|
0000fc  7812              LDRB     r2,[r2,#0]  ; cur_screen
0000fe  eb0203c2          ADD      r3,r2,r2,LSL #3
000102  eb031202          ADD      r2,r3,r2,LSL #4
000106  4bc3              LDR      r3,|L37.1044|
000108  eb031242          ADD      r2,r3,r2,LSL #5
00010c  eb000380          ADD      r3,r0,r0,LSL #2
000110  eb020283          ADD      r2,r2,r3,LSL #2
000114  5c52              LDRB     r2,[r2,r1]
000116  4bc0              LDR      r3,|L37.1048|
000118  781b              LDRB     r3,[r3,#0]  ; next_screen
00011a  eb030cc3          ADD      r12,r3,r3,LSL #3
00011e  eb0c1303          ADD      r3,r12,r3,LSL #4
000122  f8dfc2f0          LDR      r12,|L37.1044|
000126  eb0c1343          ADD      r3,r12,r3,LSL #5
00012a  eb000c80          ADD      r12,r0,r0,LSL #2
00012e  eb03038c          ADD      r3,r3,r12,LSL #2
000132  5c5b              LDRB     r3,[r3,r1]
000134  429a              CMP      r2,r3
000136  d141              BNE      |L37.444|
000138  4ab5              LDR      r2,|L37.1040|
00013a  7812              LDRB     r2,[r2,#0]  ; cur_screen
00013c  eb0203c2          ADD      r3,r2,r2,LSL #3
000140  eb031202          ADD      r2,r3,r2,LSL #4
000144  4bb5              LDR      r3,|L37.1052|
000146  eb031282          ADD      r2,r3,r2,LSL #6
00014a  eb000380          ADD      r3,r0,r0,LSL #2
00014e  eb0202c3          ADD      r2,r2,r3,LSL #3
000152  f8322011          LDRH     r2,[r2,r1,LSL #1]
000156  4bb0              LDR      r3,|L37.1048|
000158  781b              LDRB     r3,[r3,#0]  ; next_screen
00015a  eb030cc3          ADD      r12,r3,r3,LSL #3
00015e  eb0c1303          ADD      r3,r12,r3,LSL #4
000162  f8dfc2b8          LDR      r12,|L37.1052|
000166  eb0c1383          ADD      r3,r12,r3,LSL #6
00016a  eb000c80          ADD      r12,r0,r0,LSL #2
00016e  eb0303cc          ADD      r3,r3,r12,LSL #3
000172  f8333011          LDRH     r3,[r3,r1,LSL #1]
000176  429a              CMP      r2,r3
000178  d120              BNE      |L37.444|
00017a  4aa5              LDR      r2,|L37.1040|
00017c  7812              LDRB     r2,[r2,#0]  ; cur_screen
00017e  eb0203c2          ADD      r3,r2,r2,LSL #3
000182  eb031202          ADD      r2,r3,r2,LSL #4
000186  4ba6              LDR      r3,|L37.1056|
000188  eb031282          ADD      r2,r3,r2,LSL #6
00018c  eb000380          ADD      r3,r0,r0,LSL #2
000190  eb0202c3          ADD      r2,r2,r3,LSL #3
000194  f8322011          LDRH     r2,[r2,r1,LSL #1]
000198  4b9f              LDR      r3,|L37.1048|
00019a  781b              LDRB     r3,[r3,#0]  ; next_screen
00019c  eb030cc3          ADD      r12,r3,r3,LSL #3
0001a0  eb0c1303          ADD      r3,r12,r3,LSL #4
0001a4  f8dfc278          LDR      r12,|L37.1056|
0001a8  eb0c1383          ADD      r3,r12,r3,LSL #6
0001ac  eb000c80          ADD      r12,r0,r0,LSL #2
0001b0  eb0303cc          ADD      r3,r3,r12,LSL #3
0001b4  f8333011          LDRH     r3,[r3,r1,LSL #1]
0001b8  429a              CMP      r2,r3
0001ba  d001              BEQ      |L37.448|
                  |L37.444|
0001bc  2201              MOVS     r2,#1
0001be  e000              B        |L37.450|
                  |L37.448|
0001c0  2200              MOVS     r2,#0
                  |L37.450|
0001c2  2a00              CMP      r2,#0
0001c4  d18f              BNE      |L37.230|
                  |L37.454|
;;;580    				tft_set_region(i*CHAR_WIDTH, j*CHAR_HEIGHT, adj_cnt*CHAR_WIDTH-1, CHAR_HEIGHT-1);
0001c6  00e1              LSLS     r1,r4,#3
0001c8  012a              LSLS     r2,r5,#4
0001ca  2001              MOVS     r0,#1
0001cc  ebc000c6          RSB      r0,r0,r6,LSL #3
0001d0  fa1ffc80          UXTH     r12,r0
0001d4  f04f0a0f          MOV      r10,#0xf
0001d8  f8cda004          STR      r10,[sp,#4]
0001dc  460b              MOV      r3,r1
0001de  e000              B        |L37.482|
                  |L37.480|
0001e0  e1cc              B        |L37.1404|
                  |L37.482|
0001e2  4610              MOV      r0,r2
0001e4  eb010a0c          ADD      r10,r1,r12
0001e8  fa1ff98a          UXTH     r9,r10
0001ec  f8dda004          LDR      r10,[sp,#4]
0001f0  4492              ADD      r10,r10,r2
0001f2  fa1ffa8a          UXTH     r10,r10
0001f6  f8cda000          STR      r10,[sp,#0]
0001fa  f04f0a2a          MOV      r10,#0x2a
0001fe  b672              CPSID    i
000200  bf00              NOP      
000202  bf00              NOP      
000204  bf00              NOP      
                  |L37.518|
000206  f8dfb220          LDR      r11,|L37.1064|
00020a  f8dbb008          LDR      r11,[r11,#8]
00020e  f00b0b80          AND      r11,r11,#0x80
000212  f1bb0f00          CMP      r11,#0
000216  d1f6              BNE      |L37.518|
000218  f04f5b00          MOV      r11,#0x20000000
00021c  f8dfe20c          LDR      lr,|L37.1068|
000220  f8ceb000          STR      r11,[lr,#0]
000224  bf00              NOP      
                  |L37.550|
000226  f8dfb200          LDR      r11,|L37.1064|
00022a  f8dbb008          LDR      r11,[r11,#8]
00022e  f00b0b02          AND      r11,r11,#2
000232  f1bb0f00          CMP      r11,#0
000236  d0f6              BEQ      |L37.550|
000238  f8dfb1ec          LDR      r11,|L37.1064|
00023c  f8cba00c          STR      r10,[r11,#0xc]
000240  bf00              NOP      
                  |L37.578|
000242  f8dfb1e4          LDR      r11,|L37.1064|
000246  f8dbb008          LDR      r11,[r11,#8]
00024a  f00b0b80          AND      r11,r11,#0x80
00024e  f1bb0f00          CMP      r11,#0
000252  d0f6              BEQ      |L37.578|
000254  bf00              NOP      
                  |L37.598|
000256  f8dfb1d0          LDR      r11,|L37.1064|
00025a  f8dbb008          LDR      r11,[r11,#8]
00025e  f00b0b80          AND      r11,r11,#0x80
000262  f1bb0f00          CMP      r11,#0
000266  d1f6              BNE      |L37.598|
000268  f44f5b00          MOV      r11,#0x2000
00026c  f8dfe1bc          LDR      lr,|L37.1068|
000270  f8ceb000          STR      r11,[lr,#0]
000274  b662              CPSIE    i
000276  bf00              NOP      
000278  ea4f2a13          LSR      r10,r3,#8
00027c  bf00              NOP      
00027e  bf00              NOP      
                  |L37.640|
000280  f8dfb1a4          LDR      r11,|L37.1064|
000284  f8dbb008          LDR      r11,[r11,#8]
000288  f00b0b02          AND      r11,r11,#2
00028c  f1bb0f00          CMP      r11,#0
000290  d0f6              BEQ      |L37.640|
000292  f8dfb194          LDR      r11,|L37.1064|
000296  f8cba00c          STR      r10,[r11,#0xc]
00029a  bf00              NOP      
00029c  f0030aff          AND      r10,r3,#0xff
0002a0  bf00              NOP      
0002a2  bf00              NOP      
                  |L37.676|
0002a4  f8dfb180          LDR      r11,|L37.1064|
0002a8  f8dbb008          LDR      r11,[r11,#8]
0002ac  f00b0b02          AND      r11,r11,#2
0002b0  f1bb0f00          CMP      r11,#0
0002b4  d0f6              BEQ      |L37.676|
0002b6  f8dfb170          LDR      r11,|L37.1064|
0002ba  f8cba00c          STR      r10,[r11,#0xc]
0002be  bf00              NOP      
0002c0  ea4f2a19          LSR      r10,r9,#8
0002c4  bf00              NOP      
0002c6  bf00              NOP      
                  |L37.712|
0002c8  f8dfb15c          LDR      r11,|L37.1064|
0002cc  f8dbb008          LDR      r11,[r11,#8]
0002d0  f00b0b02          AND      r11,r11,#2
0002d4  f1bb0f00          CMP      r11,#0
0002d8  d0f6              BEQ      |L37.712|
0002da  f8dfb14c          LDR      r11,|L37.1064|
0002de  f8cba00c          STR      r10,[r11,#0xc]
0002e2  bf00              NOP      
0002e4  f0090aff          AND      r10,r9,#0xff
0002e8  bf00              NOP      
0002ea  bf00              NOP      
                  |L37.748|
0002ec  f8dfb138          LDR      r11,|L37.1064|
0002f0  f8dbb008          LDR      r11,[r11,#8]
0002f4  f00b0b02          AND      r11,r11,#2
0002f8  f1bb0f00          CMP      r11,#0
0002fc  d0f6              BEQ      |L37.748|
0002fe  f8dfb128          LDR      r11,|L37.1064|
000302  f8cba00c          STR      r10,[r11,#0xc]
000306  bf00              NOP      
000308  f04f0a2b          MOV      r10,#0x2b
00030c  b672              CPSID    i
00030e  bf00              NOP      
000310  bf00              NOP      
                  |L37.786|
000312  f8dfb114          LDR      r11,|L37.1064|
000316  f8dbb008          LDR      r11,[r11,#8]
00031a  f00b0b80          AND      r11,r11,#0x80
00031e  f1bb0f00          CMP      r11,#0
000322  d1f6              BNE      |L37.786|
000324  f04f5b00          MOV      r11,#0x20000000
000328  f8dfe100          LDR      lr,|L37.1068|
00032c  f8ceb000          STR      r11,[lr,#0]
000330  bf00              NOP      
                  |L37.818|
000332  f8dfb0f4          LDR      r11,|L37.1064|
000336  f8dbb008          LDR      r11,[r11,#8]
00033a  f00b0b02          AND      r11,r11,#2
00033e  f1bb0f00          CMP      r11,#0
000342  d0f6              BEQ      |L37.818|
000344  f8dfb0e0          LDR      r11,|L37.1064|
000348  f8cba00c          STR      r10,[r11,#0xc]
00034c  bf00              NOP      
                  |L37.846|
00034e  f8dfb0d8          LDR      r11,|L37.1064|
000352  f8dbb008          LDR      r11,[r11,#8]
000356  f00b0b80          AND      r11,r11,#0x80
00035a  f1bb0f00          CMP      r11,#0
00035e  d0f6              BEQ      |L37.846|
000360  bf00              NOP      
                  |L37.866|
000362  f8dfb0c4          LDR      r11,|L37.1064|
000366  f8dbb008          LDR      r11,[r11,#8]
00036a  f00b0b80          AND      r11,r11,#0x80
00036e  f1bb0f00          CMP      r11,#0
000372  d1f6              BNE      |L37.866|
000374  f44f5b00          MOV      r11,#0x2000
000378  f8dfe0b0          LDR      lr,|L37.1068|
00037c  f8ceb000          STR      r11,[lr,#0]
000380  b662              CPSIE    i
000382  bf00              NOP      
000384  ea4f2a10          LSR      r10,r0,#8
000388  bf00              NOP      
00038a  bf00              NOP      
                  |L37.908|
00038c  f8dfb098          LDR      r11,|L37.1064|
000390  f8dbb008          LDR      r11,[r11,#8]
000394  f00b0b02          AND      r11,r11,#2
000398  f1bb0f00          CMP      r11,#0
00039c  d0f6              BEQ      |L37.908|
00039e  f8dfb088          LDR      r11,|L37.1064|
0003a2  f8cba00c          STR      r10,[r11,#0xc]
0003a6  bf00              NOP      
0003a8  f0000aff          AND      r10,r0,#0xff
0003ac  bf00              NOP      
0003ae  bf00              NOP      
                  |L37.944|
0003b0  f8dfb074          LDR      r11,|L37.1064|
0003b4  f8dbb008          LDR      r11,[r11,#8]
0003b8  f00b0b02          AND      r11,r11,#2
0003bc  f1bb0f00          CMP      r11,#0
0003c0  d0f6              BEQ      |L37.944|
0003c2  f8dfb064          LDR      r11,|L37.1064|
0003c6  f8cba00c          STR      r10,[r11,#0xc]
0003ca  bf00              NOP      
0003cc  f8ddb000          LDR      r11,[sp,#0]
0003d0  ea4f2a1b          LSR      r10,r11,#8
0003d4  bf00              NOP      
0003d6  bf00              NOP      
                  |L37.984|
0003d8  f8dfb04c          LDR      r11,|L37.1064|
0003dc  f8dbb008          LDR      r11,[r11,#8]
0003e0  f00b0b02          AND      r11,r11,#2
0003e4  f1bb0f00          CMP      r11,#0
0003e8  d0f6              BEQ      |L37.984|
0003ea  f8dfb03c          LDR      r11,|L37.1064|
0003ee  f8cba00c          STR      r10,[r11,#0xc]
0003f2  bf00              NOP      
0003f4  f8ddb000          LDR      r11,[sp,#0]
0003f8  f00b0aff          AND      r10,r11,#0xff
0003fc  bf00              NOP      
0003fe  bf00              NOP      
                  |L37.1024|
000400  f8dfb024          LDR      r11,|L37.1064|
000404  f8dbb008          LDR      r11,[r11,#8]
000408  f00b0b02          AND      r11,r11,#2
00040c  e010              B        |L37.1072|
00040e  0000              DCW      0x0000
                  |L37.1040|
                          DCD      cur_screen
                  |L37.1044|
                          DCD      text_buf
                  |L37.1048|
                          DCD      next_screen
                  |L37.1052|
                          DCD      text_color_buf
                  |L37.1056|
                          DCD      bg_color_buf
                  |L37.1060|
                          DCD      char_max_x
                  |L37.1064|
                          DCD      0x40015000
                  |L37.1068|
                          DCD      0x40020c18
                  |L37.1072|
000430  f1bb0f00          CMP      r11,#0
000434  d0e4              BEQ      |L37.1024|
000436  f8dfb184          LDR      r11,|L37.1468|
00043a  f8cba00c          STR      r10,[r11,#0xc]
00043e  bf00              NOP      
000440  f04f0a2c          MOV      r10,#0x2c
000444  b672              CPSID    i
000446  bf00              NOP      
000448  bf00              NOP      
                  |L37.1098|
00044a  f8dfb170          LDR      r11,|L37.1468|
00044e  f8dbb008          LDR      r11,[r11,#8]
000452  f00b0b80          AND      r11,r11,#0x80
000456  f1bb0f00          CMP      r11,#0
00045a  d1f6              BNE      |L37.1098|
00045c  f04f5b00          MOV      r11,#0x20000000
000460  f8dfe15c          LDR      lr,|L37.1472|
000464  f8ceb000          STR      r11,[lr,#0]
000468  bf00              NOP      
                  |L37.1130|
00046a  f8dfb150          LDR      r11,|L37.1468|
00046e  f8dbb008          LDR      r11,[r11,#8]
000472  f00b0b02          AND      r11,r11,#2
000476  f1bb0f00          CMP      r11,#0
00047a  d0f6              BEQ      |L37.1130|
00047c  f8dfb13c          LDR      r11,|L37.1468|
000480  f8cba00c          STR      r10,[r11,#0xc]
000484  bf00              NOP      
                  |L37.1158|
000486  f8dfb134          LDR      r11,|L37.1468|
00048a  f8dbb008          LDR      r11,[r11,#8]
00048e  f00b0b80          AND      r11,r11,#0x80
000492  f1bb0f00          CMP      r11,#0
000496  d0f6              BEQ      |L37.1158|
000498  bf00              NOP      
                  |L37.1178|
00049a  f8dfb120          LDR      r11,|L37.1468|
00049e  f8dbb008          LDR      r11,[r11,#8]
0004a2  f00b0b80          AND      r11,r11,#0x80
0004a6  f1bb0f00          CMP      r11,#0
0004aa  d1f6              BNE      |L37.1178|
0004ac  f44f5b00          MOV      r11,#0x2000
0004b0  f8dfe10c          LDR      lr,|L37.1472|
0004b4  f8ceb000          STR      r11,[lr,#0]
0004b8  b662              CPSIE    i
0004ba  bf00              NOP      
0004bc  bf00              NOP      
;;;581    				
;;;582    				y = 0;
0004be  f04f0800          MOV      r8,#0
;;;583    				while (y < CHAR_HEIGHT) {
0004c2  e055              B        |L37.1392|
                  |L37.1220|
;;;584    					uint8_t char_line = CHAR_PTR(text_buf[cur_screen][i + char_cnt][j])[y];
0004c4  483f              LDR      r0,|L37.1476|
0004c6  7800              LDRB     r0,[r0,#0]  ; cur_screen
0004c8  eb0001c0          ADD      r1,r0,r0,LSL #3
0004cc  eb011000          ADD      r0,r1,r0,LSL #4
0004d0  493d              LDR      r1,|L37.1480|
0004d2  eb011040          ADD      r0,r1,r0,LSL #5
0004d6  19e1              ADDS     r1,r4,r7
0004d8  eb010181          ADD      r1,r1,r1,LSL #2
0004dc  eb000081          ADD      r0,r0,r1,LSL #2
0004e0  5d40              LDRB     r0,[r0,r5]
0004e2  3820              SUBS     r0,r0,#0x20
0004e4  4939              LDR      r1,|L37.1484|
0004e6  eb011000          ADD      r0,r1,r0,LSL #4
0004ea  f810a008          LDRB     r10,[r0,r8]
;;;585    					for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
0004ee  f04f0908          MOV      r9,#8
0004f2  e02f              B        |L37.1364|
                  |L37.1268|
;;;586    						color = (char_line >> (x - 1) & 0x01) ? text_color_buf[cur_screen][i + char_cnt][j] : bg_color_buf[cur_screen][i + char_cnt][j];
0004f4  f1a90001          SUB      r0,r9,#1
0004f8  fa4af000          ASR      r0,r10,r0
0004fc  f0000001          AND      r0,r0,#1
000500  b180              CBZ      r0,|L37.1316|
000502  4830              LDR      r0,|L37.1476|
000504  7800              LDRB     r0,[r0,#0]  ; cur_screen
000506  eb0001c0          ADD      r1,r0,r0,LSL #3
00050a  eb011000          ADD      r0,r1,r0,LSL #4
00050e  4930              LDR      r1,|L37.1488|
000510  eb011080          ADD      r0,r1,r0,LSL #6
000514  19e1              ADDS     r1,r4,r7
000516  eb010181          ADD      r1,r1,r1,LSL #2
00051a  eb0000c1          ADD      r0,r0,r1,LSL #3
00051e  f8300015          LDRH     r0,[r0,r5,LSL #1]
000522  e00f              B        |L37.1348|
                  |L37.1316|
000524  4827              LDR      r0,|L37.1476|
000526  7800              LDRB     r0,[r0,#0]  ; cur_screen
000528  eb0001c0          ADD      r1,r0,r0,LSL #3
00052c  eb011000          ADD      r0,r1,r0,LSL #4
000530  4928              LDR      r1,|L37.1492|
000532  eb011080          ADD      r0,r1,r0,LSL #6
000536  19e1              ADDS     r1,r4,r7
000538  eb010181          ADD      r1,r1,r1,LSL #2
00053c  eb0000c1          ADD      r0,r0,r1,LSL #3
000540  f8300015          LDRH     r0,[r0,r5,LSL #1]
                  |L37.1348|
000544  9002              STR      r0,[sp,#8]
;;;587    						tft_write_color(color);
000546  9802              LDR      r0,[sp,#8]
000548  f7fffffe          BL       tft_write_color
00054c  f1a90001          SUB      r0,r9,#1              ;585
000550  f00009ff          AND      r9,r0,#0xff           ;585
                  |L37.1364|
000554  f1b90f00          CMP      r9,#0                 ;585
000558  dccc              BGT      |L37.1268|
;;;588    					}
;;;589    					if (++char_cnt == adj_cnt) {
00055a  1c78              ADDS     r0,r7,#1
00055c  b2c0              UXTB     r0,r0
00055e  4607              MOV      r7,r0
000560  42b0              CMP      r0,r6
000562  d104              BNE      |L37.1390|
;;;590    						char_cnt = 0;
000564  2700              MOVS     r7,#0
;;;591    						y++;
000566  f1080001          ADD      r0,r8,#1
00056a  f00008ff          AND      r8,r0,#0xff
                  |L37.1390|
;;;592    					}
;;;593    				}
00056e  bf00              NOP      
                  |L37.1392|
000570  f1b80f10          CMP      r8,#0x10              ;583
000574  dba6              BLT      |L37.1220|
;;;594    				i += adj_cnt-1;
000576  1e70              SUBS     r0,r6,#1
000578  4420              ADD      r0,r0,r4
00057a  b2c4              UXTB     r4,r0
                  |L37.1404|
00057c  1c60              ADDS     r0,r4,#1              ;576
00057e  b2c4              UXTB     r4,r0                 ;576
                  |L37.1408|
000580  4815              LDR      r0,|L37.1496|
000582  7800              LDRB     r0,[r0,#0]            ;576  ; char_max_x
000584  4284              CMP      r4,r0                 ;576
000586  f6ffad44          BLT      |L37.18|
00058a  1c68              ADDS     r0,r5,#1              ;575
00058c  b2c5              UXTB     r5,r0                 ;575
                  |L37.1422|
00058e  4813              LDR      r0,|L37.1500|
000590  7800              LDRB     r0,[r0,#0]            ;575  ; char_max_y
000592  4285              CMP      r5,r0                 ;575
000594  f6ffad3b          BLT      |L37.14|
;;;595    			}
;;;596    		}
;;;597    	}
;;;598    	
;;;599    	// Swap pointers
;;;600    	cur_screen = (cur_screen == 0);
000598  480a              LDR      r0,|L37.1476|
00059a  7800              LDRB     r0,[r0,#0]  ; cur_screen
00059c  b908              CBNZ     r0,|L37.1442|
00059e  2001              MOVS     r0,#1
0005a0  e000              B        |L37.1444|
                  |L37.1442|
0005a2  2000              MOVS     r0,#0
                  |L37.1444|
0005a4  4907              LDR      r1,|L37.1476|
0005a6  7008              STRB     r0,[r1,#0]
;;;601    	next_screen = (next_screen == 0);
0005a8  480d              LDR      r0,|L37.1504|
0005aa  7800              LDRB     r0,[r0,#0]  ; next_screen
0005ac  b908              CBNZ     r0,|L37.1458|
0005ae  2001              MOVS     r0,#1
0005b0  e000              B        |L37.1460|
                  |L37.1458|
0005b2  2000              MOVS     r0,#0
                  |L37.1460|
0005b4  490a              LDR      r1,|L37.1504|
0005b6  7008              STRB     r0,[r1,#0]
;;;602    }
0005b8  e8bd8ffe          POP      {r1-r11,pc}
;;;603    
                          ENDP

                  |L37.1468|
                          DCD      0x40015000
                  |L37.1472|
                          DCD      0x40020c18
                  |L37.1476|
                          DCD      cur_screen
                  |L37.1480|
                          DCD      text_buf
                  |L37.1484|
                          DCD      ascii_8x16
                  |L37.1488|
                          DCD      text_color_buf
                  |L37.1492|
                          DCD      bg_color_buf
                  |L37.1496|
                          DCD      char_max_x
                  |L37.1500|
                          DCD      char_max_y
                  |L37.1504|
                          DCD      next_screen

                          AREA ||i.tft_update_dma||, CODE, READONLY, ALIGN=2

                  tft_update_dma PROC
;;;643    #define THREADED_TFT_BUF_LEN  CHAR_MAX_X
;;;644    void tft_update_dma(void) {
000000  e92d4ffc          PUSH     {r2-r11,lr}
;;;645    	uint8_t buf_ptr = 0;
000004  2700              MOVS     r7,#0
;;;646    	static uint8_t tft_dma_bufs[2][CHAR_BYTES * THREADED_TFT_BUF_LEN];
;;;647    	
;;;648    	for (uint8_t j = 0; j < char_max_y; j++) {
000006  2500              MOVS     r5,#0
000008  e171              B        |L38.750|
                  |L38.10|
;;;649    		for (uint8_t i = 0; i < char_max_x; i++) {
00000a  2400              MOVS     r4,#0
00000c  e168              B        |L38.736|
                  |L38.14|
;;;650    			if (tft_char_is_changed(i, j)) {
00000e  4620              MOV      r0,r4
000010  4629              MOV      r1,r5
000012  4ac2              LDR      r2,|L38.796|
000014  7812              LDRB     r2,[r2,#0]  ; cur_screen
000016  eb0203c2          ADD      r3,r2,r2,LSL #3
00001a  eb031202          ADD      r2,r3,r2,LSL #4
00001e  4bc0              LDR      r3,|L38.800|
000020  eb031242          ADD      r2,r3,r2,LSL #5
000024  eb000380          ADD      r3,r0,r0,LSL #2
000028  eb020283          ADD      r2,r2,r3,LSL #2
00002c  5c52              LDRB     r2,[r2,r1]
00002e  4bbd              LDR      r3,|L38.804|
000030  781b              LDRB     r3,[r3,#0]  ; next_screen
000032  eb0306c3          ADD      r6,r3,r3,LSL #3
000036  eb061303          ADD      r3,r6,r3,LSL #4
00003a  4eb9              LDR      r6,|L38.800|
00003c  eb061343          ADD      r3,r6,r3,LSL #5
000040  eb000680          ADD      r6,r0,r0,LSL #2
000044  eb030386          ADD      r3,r3,r6,LSL #2
000048  5c5b              LDRB     r3,[r3,r1]
00004a  429a              CMP      r2,r3
00004c  d13f              BNE      |L38.206|
00004e  4ab3              LDR      r2,|L38.796|
000050  7812              LDRB     r2,[r2,#0]  ; cur_screen
000052  eb0203c2          ADD      r3,r2,r2,LSL #3
000056  eb031202          ADD      r2,r3,r2,LSL #4
00005a  4bb3              LDR      r3,|L38.808|
00005c  eb031282          ADD      r2,r3,r2,LSL #6
000060  eb000380          ADD      r3,r0,r0,LSL #2
000064  eb0202c3          ADD      r2,r2,r3,LSL #3
000068  f8322011          LDRH     r2,[r2,r1,LSL #1]
00006c  4bad              LDR      r3,|L38.804|
00006e  781b              LDRB     r3,[r3,#0]  ; next_screen
000070  eb0306c3          ADD      r6,r3,r3,LSL #3
000074  eb061303          ADD      r3,r6,r3,LSL #4
000078  4eab              LDR      r6,|L38.808|
00007a  eb061383          ADD      r3,r6,r3,LSL #6
00007e  eb000680          ADD      r6,r0,r0,LSL #2
000082  eb0303c6          ADD      r3,r3,r6,LSL #3
000086  f8333011          LDRH     r3,[r3,r1,LSL #1]
00008a  429a              CMP      r2,r3
00008c  d11f              BNE      |L38.206|
00008e  4aa3              LDR      r2,|L38.796|
000090  7812              LDRB     r2,[r2,#0]  ; cur_screen
000092  eb0203c2          ADD      r3,r2,r2,LSL #3
000096  eb031202          ADD      r2,r3,r2,LSL #4
00009a  4ba4              LDR      r3,|L38.812|
00009c  eb031282          ADD      r2,r3,r2,LSL #6
0000a0  eb000380          ADD      r3,r0,r0,LSL #2
0000a4  eb0202c3          ADD      r2,r2,r3,LSL #3
0000a8  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000ac  4b9d              LDR      r3,|L38.804|
0000ae  781b              LDRB     r3,[r3,#0]  ; next_screen
0000b0  eb0306c3          ADD      r6,r3,r3,LSL #3
0000b4  eb061303          ADD      r3,r6,r3,LSL #4
0000b8  4e9c              LDR      r6,|L38.812|
0000ba  eb061383          ADD      r3,r6,r3,LSL #6
0000be  eb000680          ADD      r6,r0,r0,LSL #2
0000c2  eb0303c6          ADD      r3,r3,r6,LSL #3
0000c6  f8333011          LDRH     r3,[r3,r1,LSL #1]
0000ca  429a              CMP      r2,r3
0000cc  d001              BEQ      |L38.210|
                  |L38.206|
0000ce  2201              MOVS     r2,#1
0000d0  e000              B        |L38.212|
                  |L38.210|
0000d2  2200              MOVS     r2,#0
                  |L38.212|
0000d4  2a00              CMP      r2,#0
0000d6  d06e              BEQ      |L38.438|
;;;651    				uint8_t adj_cnt = 1;
0000d8  2601              MOVS     r6,#1
;;;652    				while ((i + adj_cnt < char_max_x) && tft_char_is_changed(i + (adj_cnt), j) && (adj_cnt < THREADED_TFT_BUF_LEN))
0000da  e001              B        |L38.224|
                  |L38.220|
;;;653    					adj_cnt++; //Search for diff char
0000dc  1c70              ADDS     r0,r6,#1
0000de  b2c6              UXTB     r6,r0
                  |L38.224|
0000e0  19a0              ADDS     r0,r4,r6              ;652
0000e2  4993              LDR      r1,|L38.816|
0000e4  7809              LDRB     r1,[r1,#0]            ;652  ; char_max_x
0000e6  4288              CMP      r0,r1                 ;652
0000e8  da6a              BGE      |L38.448|
0000ea  19a2              ADDS     r2,r4,r6              ;652
0000ec  b2d0              UXTB     r0,r2                 ;652
0000ee  4629              MOV      r1,r5                 ;652
0000f0  4a8a              LDR      r2,|L38.796|
0000f2  7812              LDRB     r2,[r2,#0]            ;652  ; cur_screen
0000f4  eb0203c2          ADD      r3,r2,r2,LSL #3       ;652
0000f8  eb031202          ADD      r2,r3,r2,LSL #4       ;652
0000fc  4b88              LDR      r3,|L38.800|
0000fe  eb031242          ADD      r2,r3,r2,LSL #5       ;652
000102  eb000380          ADD      r3,r0,r0,LSL #2       ;652
000106  eb020283          ADD      r2,r2,r3,LSL #2       ;652
00010a  5c52              LDRB     r2,[r2,r1]            ;652
00010c  4b85              LDR      r3,|L38.804|
00010e  781b              LDRB     r3,[r3,#0]            ;652  ; next_screen
000110  eb030cc3          ADD      r12,r3,r3,LSL #3      ;652
000114  eb0c1303          ADD      r3,r12,r3,LSL #4      ;652
000118  f8dfc204          LDR      r12,|L38.800|
00011c  eb0c1343          ADD      r3,r12,r3,LSL #5      ;652
000120  eb000c80          ADD      r12,r0,r0,LSL #2      ;652
000124  eb03038c          ADD      r3,r3,r12,LSL #2      ;652
000128  5c5b              LDRB     r3,[r3,r1]            ;652
00012a  429a              CMP      r2,r3                 ;652
00012c  d141              BNE      |L38.434|
00012e  4a7b              LDR      r2,|L38.796|
000130  7812              LDRB     r2,[r2,#0]            ;652  ; cur_screen
000132  eb0203c2          ADD      r3,r2,r2,LSL #3       ;652
000136  eb031202          ADD      r2,r3,r2,LSL #4       ;652
00013a  4b7b              LDR      r3,|L38.808|
00013c  eb031282          ADD      r2,r3,r2,LSL #6       ;652
000140  eb000380          ADD      r3,r0,r0,LSL #2       ;652
000144  eb0202c3          ADD      r2,r2,r3,LSL #3       ;652
000148  f8322011          LDRH     r2,[r2,r1,LSL #1]     ;652
00014c  4b75              LDR      r3,|L38.804|
00014e  781b              LDRB     r3,[r3,#0]            ;652  ; next_screen
000150  eb030cc3          ADD      r12,r3,r3,LSL #3      ;652
000154  eb0c1303          ADD      r3,r12,r3,LSL #4      ;652
000158  f8dfc1cc          LDR      r12,|L38.808|
00015c  eb0c1383          ADD      r3,r12,r3,LSL #6      ;652
000160  eb000c80          ADD      r12,r0,r0,LSL #2      ;652
000164  eb0303cc          ADD      r3,r3,r12,LSL #3      ;652
000168  f8333011          LDRH     r3,[r3,r1,LSL #1]     ;652
00016c  429a              CMP      r2,r3                 ;652
00016e  d120              BNE      |L38.434|
000170  4a6a              LDR      r2,|L38.796|
000172  7812              LDRB     r2,[r2,#0]            ;652  ; cur_screen
000174  eb0203c2          ADD      r3,r2,r2,LSL #3       ;652
000178  eb031202          ADD      r2,r3,r2,LSL #4       ;652
00017c  4b6b              LDR      r3,|L38.812|
00017e  eb031282          ADD      r2,r3,r2,LSL #6       ;652
000182  eb000380          ADD      r3,r0,r0,LSL #2       ;652
000186  eb0202c3          ADD      r2,r2,r3,LSL #3       ;652
00018a  f8322011          LDRH     r2,[r2,r1,LSL #1]     ;652
00018e  4b65              LDR      r3,|L38.804|
000190  781b              LDRB     r3,[r3,#0]            ;652  ; next_screen
000192  eb030cc3          ADD      r12,r3,r3,LSL #3      ;652
000196  eb0c1303          ADD      r3,r12,r3,LSL #4      ;652
00019a  f8dfc190          LDR      r12,|L38.812|
00019e  eb0c1383          ADD      r3,r12,r3,LSL #6      ;652
0001a2  eb000c80          ADD      r12,r0,r0,LSL #2      ;652
0001a6  eb0303cc          ADD      r3,r3,r12,LSL #3      ;652
0001aa  f8333011          LDRH     r3,[r3,r1,LSL #1]     ;652
0001ae  429a              CMP      r2,r3                 ;652
0001b0  d002              BEQ      |L38.440|
                  |L38.434|
0001b2  2201              MOVS     r2,#1                 ;652
0001b4  e001              B        |L38.442|
                  |L38.438|
0001b6  e091              B        |L38.732|
                  |L38.440|
0001b8  2200              MOVS     r2,#0                 ;652
                  |L38.442|
0001ba  b10a              CBZ      r2,|L38.448|
0001bc  2e28              CMP      r6,#0x28              ;652
0001be  db8d              BLT      |L38.220|
                  |L38.448|
;;;654    
;;;655    				uint16_t px = 0;
0001c0  f04f0900          MOV      r9,#0
;;;656    				uint16_t y = 0;
0001c4  46c8              MOV      r8,r9
;;;657    				while (y < CHAR_HEIGHT) {
0001c6  e073              B        |L38.688|
                  |L38.456|
;;;658    					uint8_t char_cnt = 0;
0001c8  2000              MOVS     r0,#0
;;;659    					while (char_cnt != adj_cnt) {
0001ca  e06a              B        |L38.674|
                  |L38.460|
;;;660    						const uint8_t char_ptr = (CHAR_PTR(text_buf[cur_screen][i + char_cnt][j]))[y];
0001cc  4953              LDR      r1,|L38.796|
0001ce  7809              LDRB     r1,[r1,#0]  ; cur_screen
0001d0  eb0102c1          ADD      r2,r1,r1,LSL #3
0001d4  eb021101          ADD      r1,r2,r1,LSL #4
0001d8  4a51              LDR      r2,|L38.800|
0001da  eb021141          ADD      r1,r2,r1,LSL #5
0001de  1822              ADDS     r2,r4,r0
0001e0  eb020282          ADD      r2,r2,r2,LSL #2
0001e4  eb010182          ADD      r1,r1,r2,LSL #2
0001e8  5d49              LDRB     r1,[r1,r5]
0001ea  3920              SUBS     r1,r1,#0x20
0001ec  4a51              LDR      r2,|L38.820|
0001ee  eb021101          ADD      r1,r2,r1,LSL #4
0001f2  f8113008          LDRB     r3,[r1,r8]
;;;661    						uint16_t fg = text_color_buf[cur_screen][i + char_cnt][j];
0001f6  4949              LDR      r1,|L38.796|
0001f8  7809              LDRB     r1,[r1,#0]  ; cur_screen
0001fa  eb0102c1          ADD      r2,r1,r1,LSL #3
0001fe  eb021101          ADD      r1,r2,r1,LSL #4
000202  4a49              LDR      r2,|L38.808|
000204  eb021181          ADD      r1,r2,r1,LSL #6
000208  1822              ADDS     r2,r4,r0
00020a  eb020282          ADD      r2,r2,r2,LSL #2
00020e  eb0101c2          ADD      r1,r1,r2,LSL #3
000212  f8311015          LDRH     r1,[r1,r5,LSL #1]
000216  9101              STR      r1,[sp,#4]
;;;662    						uint16_t bg = bg_color_buf[cur_screen][i + char_cnt][j];
000218  4940              LDR      r1,|L38.796|
00021a  780a              LDRB     r2,[r1,#0]  ; cur_screen
00021c  eb0201c2          ADD      r1,r2,r2,LSL #3
000220  eb011202          ADD      r2,r1,r2,LSL #4
000224  4941              LDR      r1,|L38.812|
000226  eb011182          ADD      r1,r1,r2,LSL #6
00022a  1822              ADDS     r2,r4,r0
00022c  eb020282          ADD      r2,r2,r2,LSL #2
000230  eb0101c2          ADD      r1,r1,r2,LSL #3
000234  f8311015          LDRH     r1,[r1,r5,LSL #1]
000238  9100              STR      r1,[sp,#0]
;;;663    						for (uint8_t x = CHAR_WIDTH; x > 0; x--) {
00023a  2108              MOVS     r1,#8
00023c  e02c              B        |L38.664|
                  |L38.574|
;;;664    							// uint16_t color = 0xFFFF;
;;;665    							uint16_t color = ((char_ptr >> (x - 1)) & 0x01) ? fg : bg;
00023e  f1a10c01          SUB      r12,r1,#1
000242  fa43fc0c          ASR      r12,r3,r12
000246  f00c0c01          AND      r12,r12,#1
00024a  f1bc0f00          CMP      r12,#0
00024e  d002              BEQ      |L38.598|
000250  f8ddc004          LDR      r12,[sp,#4]
000254  e001              B        |L38.602|
                  |L38.598|
000256  f8ddc000          LDR      r12,[sp,#0]
                  |L38.602|
00025a  4662              MOV      r2,r12
;;;666    							tft_dma_bufs[buf_ptr][px++] = color >> 8;
00025c  ea4f2a22          ASR      r10,r2,#8
000260  eb070c87          ADD      r12,r7,r7,LSL #2
000264  f8dfb0d0          LDR      r11,|L38.824|
000268  eb0b2bcc          ADD      r11,r11,r12,LSL #11
00026c  46cc              MOV      r12,r9
00026e  f1090e01          ADD      lr,r9,#1
000272  fa1ff98e          UXTH     r9,lr
000276  f80ba00c          STRB     r10,[r11,r12]
;;;667    							tft_dma_bufs[buf_ptr][px++] = color;
00027a  eb070c87          ADD      r12,r7,r7,LSL #2
00027e  f8dfb0b8          LDR      r11,|L38.824|
000282  eb0b2bcc          ADD      r11,r11,r12,LSL #11
000286  46cc              MOV      r12,r9
000288  f1090e01          ADD      lr,r9,#1
00028c  fa1ff98e          UXTH     r9,lr
000290  f80b200c          STRB     r2,[r11,r12]
000294  1e4a              SUBS     r2,r1,#1              ;663
000296  b2d1              UXTB     r1,r2                 ;663
                  |L38.664|
000298  2900              CMP      r1,#0                 ;663
00029a  dcd0              BGT      |L38.574|
;;;668    						}
;;;669    						char_cnt++;
00029c  1c41              ADDS     r1,r0,#1
00029e  b2c8              UXTB     r0,r1
;;;670    					}
0002a0  bf00              NOP      
                  |L38.674|
0002a2  42b0              CMP      r0,r6                 ;659
0002a4  d192              BNE      |L38.460|
;;;671    					y++;
0002a6  f1080101          ADD      r1,r8,#1
0002aa  fa1ff881          UXTH     r8,r1
;;;672    				}
0002ae  bf00              NOP      
                  |L38.688|
0002b0  f1b80f10          CMP      r8,#0x10              ;657
0002b4  db88              BLT      |L38.456|
;;;673    
;;;674    				tft_push_pxbuf(&tft_dma_bufs[buf_ptr], i * CHAR_WIDTH, j * CHAR_HEIGHT, adj_cnt * CHAR_WIDTH, CHAR_HEIGHT);
0002b6  2010              MOVS     r0,#0x10
0002b8  00f3              LSLS     r3,r6,#3
0002ba  012a              LSLS     r2,r5,#4
0002bc  00e1              LSLS     r1,r4,#3
0002be  eb070c87          ADD      r12,r7,r7,LSL #2
0002c2  f8dfa074          LDR      r10,|L38.824|
0002c6  9000              STR      r0,[sp,#0]
0002c8  eb0a20cc          ADD      r0,r10,r12,LSL #11
0002cc  f7fffffe          BL       tft_push_pxbuf
;;;675    				
;;;676    				buf_ptr ^= 0x1;
0002d0  f0870701          EOR      r7,r7,#1
;;;677    				i += adj_cnt - 1;
0002d4  1e70              SUBS     r0,r6,#1
0002d6  4420              ADD      r0,r0,r4
0002d8  b2c4              UXTB     r4,r0
;;;678    			}
0002da  bf00              NOP      
                  |L38.732|
0002dc  1c60              ADDS     r0,r4,#1              ;649
0002de  b2c4              UXTB     r4,r0                 ;649
                  |L38.736|
0002e0  4813              LDR      r0,|L38.816|
0002e2  7800              LDRB     r0,[r0,#0]            ;649  ; char_max_x
0002e4  4284              CMP      r4,r0                 ;649
0002e6  f6ffae92          BLT      |L38.14|
0002ea  1c68              ADDS     r0,r5,#1              ;648
0002ec  b2c5              UXTB     r5,r0                 ;648
                  |L38.750|
0002ee  4813              LDR      r0,|L38.828|
0002f0  7800              LDRB     r0,[r0,#0]            ;648  ; char_max_y
0002f2  4285              CMP      r5,r0                 ;648
0002f4  f6ffae89          BLT      |L38.10|
;;;679    		}
;;;680    	}
;;;681    
;;;682    	// Swap pointers
;;;683    	cur_screen = (cur_screen == 0);
0002f8  4808              LDR      r0,|L38.796|
0002fa  7800              LDRB     r0,[r0,#0]  ; cur_screen
0002fc  b908              CBNZ     r0,|L38.770|
0002fe  2001              MOVS     r0,#1
000300  e000              B        |L38.772|
                  |L38.770|
000302  2000              MOVS     r0,#0
                  |L38.772|
000304  4905              LDR      r1,|L38.796|
000306  7008              STRB     r0,[r1,#0]
;;;684    	next_screen = (next_screen == 0);
000308  4806              LDR      r0,|L38.804|
00030a  7800              LDRB     r0,[r0,#0]  ; next_screen
00030c  b908              CBNZ     r0,|L38.786|
00030e  2001              MOVS     r0,#1
000310  e000              B        |L38.788|
                  |L38.786|
000312  2000              MOVS     r0,#0
                  |L38.788|
000314  4903              LDR      r1,|L38.804|
000316  7008              STRB     r0,[r1,#0]
;;;685    }
000318  e8bd8ffc          POP      {r2-r11,pc}
;;;686    
                          ENDP

                  |L38.796|
                          DCD      cur_screen
                  |L38.800|
                          DCD      text_buf
                  |L38.804|
                          DCD      next_screen
                  |L38.808|
                          DCD      text_color_buf
                  |L38.812|
                          DCD      bg_color_buf
                  |L38.816|
                          DCD      char_max_x
                  |L38.820|
                          DCD      ascii_8x16
                  |L38.824|
                          DCD      tft_dma_bufs
                  |L38.828|
                          DCD      char_max_y

                          AREA ||i.tft_write_color||, CODE, READONLY, ALIGN=2

                  tft_write_color PROC
;;;394    
;;;395    static void tft_write_color(uint16_t color) {
000000  1201              ASRS     r1,r0,#8
000002  bf00              NOP      
000004  bf00              NOP      
                  |L39.6|
000006  4a0b              LDR      r2,|L39.52|
000008  6892              LDR      r2,[r2,#8]
00000a  f0020202          AND      r2,r2,#2
00000e  2a00              CMP      r2,#0
000010  d0f9              BEQ      |L39.6|
000012  4a08              LDR      r2,|L39.52|
000014  60d1              STR      r1,[r2,#0xc]
000016  bf00              NOP      
;;;396    	#ifdef MODEL_ILI9486 //RGB666
;;;397    	tft_write_data((color & 0xF800) >> (11-3));
;;;398    	tft_write_data((color & 0x7E0) >> (5-2));
;;;399    	tft_write_data((color & 0x1F) << 3);
;;;400    	#else
;;;401    	tft_write_data(color >> 8);
;;;402    	tft_write_data(color);
000018  b2c1              UXTB     r1,r0
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L39.30|
00001e  4a05              LDR      r2,|L39.52|
000020  6892              LDR      r2,[r2,#8]
000022  f0020202          AND      r2,r2,#2
000026  2a00              CMP      r2,#0
000028  d0f9              BEQ      |L39.30|
00002a  4a02              LDR      r2,|L39.52|
00002c  60d1              STR      r1,[r2,#0xc]
00002e  bf00              NOP      
;;;403    	#endif
;;;404    }
000030  4770              BX       lr
;;;405    
                          ENDP

000032  0000              DCW      0x0000
                  |L39.52|
                          DCD      0x40015000

                          AREA ||i.utos||, CODE, READONLY, ALIGN=1

                  utos PROC
;;;65      */
;;;66     static inline char* utos(char *data, uint32_t i) {
000000  b51f              PUSH     {r0-r4,lr}
000002  460a              MOV      r2,r1
;;;67     	char buf[14] = {0};
000004  2300              MOVS     r3,#0
000006  9300              STR      r3,[sp,#0]
000008  9301              STR      r3,[sp,#4]
00000a  9302              STR      r3,[sp,#8]
00000c  9303              STR      r3,[sp,#0xc]
;;;68     	char* ptr = &buf[1];
00000e  f10d0101          ADD      r1,sp,#1
;;;69     	do {
000012  bf00              NOP      
                  |L40.20|
;;;70     		*ptr++ = '0' + (i%10);
000014  230a              MOVS     r3,#0xa
000016  fbb2f4f3          UDIV     r4,r2,r3
00001a  fb032314          MLS      r3,r3,r4,r2
00001e  3330              ADDS     r3,r3,#0x30
000020  f8013b01          STRB     r3,[r1],#1
;;;71     		i /= 10;
000024  230a              MOVS     r3,#0xa
000026  fbb2f2f3          UDIV     r2,r2,r3
;;;72     	} while(i);
00002a  2a00              CMP      r2,#0
00002c  d1f2              BNE      |L40.20|
;;;73     	ptr--;
00002e  1e49              SUBS     r1,r1,#1
;;;74     	while (*ptr) {
000030  e003              B        |L40.58|
                  |L40.50|
;;;75     		*data++ = *ptr--;
000032  f8113901          LDRB     r3,[r1],#-1
000036  f8003b01          STRB     r3,[r0],#1
                  |L40.58|
00003a  780b              LDRB     r3,[r1,#0]            ;74
00003c  2b00              CMP      r3,#0                 ;74
00003e  d1f8              BNE      |L40.50|
;;;76     	}
;;;77     	*data = '\0';
000040  7003              STRB     r3,[r0,#0]
;;;78     	return data;
;;;79     }
000042  b004              ADD      sp,sp,#0x10
000044  bd10              POP      {r4,pc}
;;;80     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  text_buf
                          %        1600
                  text_color_buf
                          %        3200
                  bg_color_buf
                          %        3200
                  tft_dma_bufs
                          %        20480

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8
                  aRCC_PLLSAIDIVRPrescTable
000008  02040810          DCB      0x02,0x04,0x08,0x10
                  OFFSET_TAB_CCMRx
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  040404            DCB      0x04,0x04,0x04
                  SHIFT_TAB_OCxx
000013  00                DCB      0x00
000014  00080000          DCB      0x00,0x08,0x00,0x00
000018  0008              DCB      0x00,0x08
                  SHIFT_TAB_ICxx
00001a  0000              DCB      0x00,0x00
00001c  08000000          DCB      0x08,0x00,0x00,0x00
000020  08                DCB      0x08
                  SHIFT_TAB_CCxP
000021  000204            DCB      0x00,0x02,0x04
000024  06080a0c          DCB      0x06,0x08,0x0a,0x0c
                  SHIFT_TAB_OISx
000028  00010203          DCB      0x00,0x01,0x02,0x03
00002c  040506            DCB      0x04,0x05,0x06
                  ascii_8x16
00002f  00                DCB      0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000000          DCB      0x00,0x00,0x00,0x00
000040  00183c3c          DCB      0x00,0x18,0x3c,0x3c
000044  3c181818          DCB      0x3c,0x18,0x18,0x18
000048  00181800          DCB      0x00,0x18,0x18,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  66666624          DCB      0x66,0x66,0x66,0x24
000054  00000000          DCB      0x00,0x00,0x00,0x00
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000000          DCB      0x00,0x00,0x00,0x00
000060  00006c6c          DCB      0x00,0x00,0x6c,0x6c
000064  fe6c6c6c          DCB      0xfe,0x6c,0x6c,0x6c
000068  fe6c6c00          DCB      0xfe,0x6c,0x6c,0x00
00006c  00000018          DCB      0x00,0x00,0x00,0x18
000070  187cc6c2          DCB      0x18,0x7c,0xc6,0xc2
000074  c07c0686          DCB      0xc0,0x7c,0x06,0x86
000078  c67c1818          DCB      0xc6,0x7c,0x18,0x18
00007c  00000000          DCB      0x00,0x00,0x00,0x00
000080  000000c2          DCB      0x00,0x00,0x00,0xc2
000084  c60c1830          DCB      0xc6,0x0c,0x18,0x30
000088  60c68600          DCB      0x60,0xc6,0x86,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00386c6c          DCB      0x00,0x38,0x6c,0x6c
000094  3876dccc          DCB      0x38,0x76,0xdc,0xcc
000098  cccc7600          DCB      0xcc,0xcc,0x76,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  30303060          DCB      0x30,0x30,0x30,0x60
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  000c1830          DCB      0x00,0x0c,0x18,0x30
0000b4  30303030          DCB      0x30,0x30,0x30,0x30
0000b8  30180c00          DCB      0x30,0x18,0x0c,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  0030180c          DCB      0x00,0x30,0x18,0x0c
0000c4  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
0000c8  0c183000          DCB      0x0c,0x18,0x30,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  663cff3c          DCB      0x66,0x3c,0xff,0x3c
0000d8  66000000          DCB      0x66,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  18187e18          DCB      0x18,0x18,0x7e,0x18
0000e8  18000000          DCB      0x18,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  18181830          DCB      0x18,0x18,0x18,0x30
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  0000fe00          DCB      0x00,0x00,0xfe,0x00
000108  00000000          DCB      0x00,0x00,0x00,0x00
00010c  00000000          DCB      0x00,0x00,0x00,0x00
000110  00000000          DCB      0x00,0x00,0x00,0x00
000114  00000000          DCB      0x00,0x00,0x00,0x00
000118  00181800          DCB      0x00,0x18,0x18,0x00
00011c  00000000          DCB      0x00,0x00,0x00,0x00
000120  00000002          DCB      0x00,0x00,0x00,0x02
000124  060c1830          DCB      0x06,0x0c,0x18,0x30
000128  60c08000          DCB      0x60,0xc0,0x80,0x00
00012c  00000000          DCB      0x00,0x00,0x00,0x00
000130  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000134  ced6d6e6          DCB      0xce,0xd6,0xd6,0xe6
000138  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00183878          DCB      0x00,0x18,0x38,0x78
000144  18181818          DCB      0x18,0x18,0x18,0x18
000148  18187e00          DCB      0x18,0x18,0x7e,0x00
00014c  00000000          DCB      0x00,0x00,0x00,0x00
000150  007cc606          DCB      0x00,0x7c,0xc6,0x06
000154  0c183060          DCB      0x0c,0x18,0x30,0x60
000158  c0c6fe00          DCB      0xc0,0xc6,0xfe,0x00
00015c  00000000          DCB      0x00,0x00,0x00,0x00
000160  007cc606          DCB      0x00,0x7c,0xc6,0x06
000164  063c0606          DCB      0x06,0x3c,0x06,0x06
000168  06c67c00          DCB      0x06,0xc6,0x7c,0x00
00016c  00000000          DCB      0x00,0x00,0x00,0x00
000170  000c1c3c          DCB      0x00,0x0c,0x1c,0x3c
000174  6cccfe0c          DCB      0x6c,0xcc,0xfe,0x0c
000178  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
00017c  00000000          DCB      0x00,0x00,0x00,0x00
000180  00fec0c0          DCB      0x00,0xfe,0xc0,0xc0
000184  c0fc0e06          DCB      0xc0,0xfc,0x0e,0x06
000188  06c67c00          DCB      0x06,0xc6,0x7c,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  003860c0          DCB      0x00,0x38,0x60,0xc0
000194  c0fcc6c6          DCB      0xc0,0xfc,0xc6,0xc6
000198  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00fec606          DCB      0x00,0xfe,0xc6,0x06
0001a4  060c1830          DCB      0x06,0x0c,0x18,0x30
0001a8  30303000          DCB      0x30,0x30,0x30,0x00
0001ac  00000000          DCB      0x00,0x00,0x00,0x00
0001b0  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
0001b4  c67cc6c6          DCB      0xc6,0x7c,0xc6,0xc6
0001b8  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
0001c4  c67e0606          DCB      0xc6,0x7e,0x06,0x06
0001c8  060c7800          DCB      0x06,0x0c,0x78,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000018          DCB      0x00,0x00,0x00,0x18
0001d4  18000000          DCB      0x18,0x00,0x00,0x00
0001d8  18180000          DCB      0x18,0x18,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000018          DCB      0x00,0x00,0x00,0x18
0001e4  18000000          DCB      0x18,0x00,0x00,0x00
0001e8  18183000          DCB      0x18,0x18,0x30,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  0000060c          DCB      0x00,0x00,0x06,0x0c
0001f4  18306030          DCB      0x18,0x30,0x60,0x30
0001f8  180c0600          DCB      0x18,0x0c,0x06,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00fe0000          DCB      0x00,0xfe,0x00,0x00
000208  fe000000          DCB      0xfe,0x00,0x00,0x00
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  00006030          DCB      0x00,0x00,0x60,0x30
000214  180c060c          DCB      0x18,0x0c,0x06,0x0c
000218  18306000          DCB      0x18,0x30,0x60,0x00
00021c  00000000          DCB      0x00,0x00,0x00,0x00
000220  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000224  0c181818          DCB      0x0c,0x18,0x18,0x18
000228  00181800          DCB      0x00,0x18,0x18,0x00
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000234  c6dedede          DCB      0xc6,0xde,0xde,0xde
000238  dcc07c00          DCB      0xdc,0xc0,0x7c,0x00
00023c  00000000          DCB      0x00,0x00,0x00,0x00
000240  0010386c          DCB      0x00,0x10,0x38,0x6c
000244  c6c6fec6          DCB      0xc6,0xc6,0xfe,0xc6
000248  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  00fc6666          DCB      0x00,0xfc,0x66,0x66
000254  667c6666          DCB      0x66,0x7c,0x66,0x66
000258  6666fc00          DCB      0x66,0x66,0xfc,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  003c66c2          DCB      0x00,0x3c,0x66,0xc2
000264  c0c0c0c0          DCB      0xc0,0xc0,0xc0,0xc0
000268  c2663c00          DCB      0xc2,0x66,0x3c,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00f86c66          DCB      0x00,0xf8,0x6c,0x66
000274  66666666          DCB      0x66,0x66,0x66,0x66
000278  666cf800          DCB      0x66,0x6c,0xf8,0x00
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  00fe6662          DCB      0x00,0xfe,0x66,0x62
000284  68786860          DCB      0x68,0x78,0x68,0x60
000288  6266fe00          DCB      0x62,0x66,0xfe,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00fe6662          DCB      0x00,0xfe,0x66,0x62
000294  68786860          DCB      0x68,0x78,0x68,0x60
000298  6060f000          DCB      0x60,0x60,0xf0,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  003c66c2          DCB      0x00,0x3c,0x66,0xc2
0002a4  c0c0dec6          DCB      0xc0,0xc0,0xde,0xc6
0002a8  c6663a00          DCB      0xc6,0x66,0x3a,0x00
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
0002b4  c6fec6c6          DCB      0xc6,0xfe,0xc6,0xc6
0002b8  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  003c1818          DCB      0x00,0x3c,0x18,0x18
0002c4  18181818          DCB      0x18,0x18,0x18,0x18
0002c8  18183c00          DCB      0x18,0x18,0x3c,0x00
0002cc  00000000          DCB      0x00,0x00,0x00,0x00
0002d0  001e0c0c          DCB      0x00,0x1e,0x0c,0x0c
0002d4  0c0c0ccc          DCB      0x0c,0x0c,0x0c,0xcc
0002d8  cccc7800          DCB      0xcc,0xcc,0x78,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00e6666c          DCB      0x00,0xe6,0x66,0x6c
0002e4  6c78786c          DCB      0x6c,0x78,0x78,0x6c
0002e8  6666e600          DCB      0x66,0x66,0xe6,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00f06060          DCB      0x00,0xf0,0x60,0x60
0002f4  60606060          DCB      0x60,0x60,0x60,0x60
0002f8  6266fe00          DCB      0x62,0x66,0xfe,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00c6eefe          DCB      0x00,0xc6,0xee,0xfe
000304  fed6c6c6          DCB      0xfe,0xd6,0xc6,0xc6
000308  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00c6e6f6          DCB      0x00,0xc6,0xe6,0xf6
000314  fedecec6          DCB      0xfe,0xde,0xce,0xc6
000318  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
00031c  00000000          DCB      0x00,0x00,0x00,0x00
000320  00386cc6          DCB      0x00,0x38,0x6c,0xc6
000324  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000328  c66c3800          DCB      0xc6,0x6c,0x38,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00fc6666          DCB      0x00,0xfc,0x66,0x66
000334  667c6060          DCB      0x66,0x7c,0x60,0x60
000338  6060f000          DCB      0x60,0x60,0xf0,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000344  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000348  d6de7c0c          DCB      0xd6,0xde,0x7c,0x0c
00034c  0e000000          DCB      0x0e,0x00,0x00,0x00
000350  00fc6666          DCB      0x00,0xfc,0x66,0x66
000354  667c6c66          DCB      0x66,0x7c,0x6c,0x66
000358  6666e600          DCB      0x66,0x66,0xe6,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000364  60380c06          DCB      0x60,0x38,0x0c,0x06
000368  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  007e7e5a          DCB      0x00,0x7e,0x7e,0x5a
000374  18181818          DCB      0x18,0x18,0x18,0x18
000378  18183c00          DCB      0x18,0x18,0x3c,0x00
00037c  00000000          DCB      0x00,0x00,0x00,0x00
000380  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
000384  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000388  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
000394  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000398  6c381000          DCB      0x6c,0x38,0x10,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
0003a4  c6c6d6d6          DCB      0xc6,0xc6,0xd6,0xd6
0003a8  fe6c6c00          DCB      0xfe,0x6c,0x6c,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  00c6c66c          DCB      0x00,0xc6,0xc6,0x6c
0003b4  6c38386c          DCB      0x6c,0x38,0x38,0x6c
0003b8  6cc6c600          DCB      0x6c,0xc6,0xc6,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00666666          DCB      0x00,0x66,0x66,0x66
0003c4  663c1818          DCB      0x66,0x3c,0x18,0x18
0003c8  18183c00          DCB      0x18,0x18,0x3c,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00fec686          DCB      0x00,0xfe,0xc6,0x86
0003d4  0c183060          DCB      0x0c,0x18,0x30,0x60
0003d8  c2c6fe00          DCB      0xc2,0xc6,0xfe,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  003c3030          DCB      0x00,0x3c,0x30,0x30
0003e4  30303030          DCB      0x30,0x30,0x30,0x30
0003e8  30303c00          DCB      0x30,0x30,0x3c,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  000080c0          DCB      0x00,0x00,0x80,0xc0
0003f4  e070381c          DCB      0xe0,0x70,0x38,0x1c
0003f8  0e060200          DCB      0x0e,0x06,0x02,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  003c0c0c          DCB      0x00,0x3c,0x0c,0x0c
000404  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000408  0c0c3c00          DCB      0x0c,0x0c,0x3c,0x00
00040c  00000010          DCB      0x00,0x00,0x00,0x10
000410  386cc600          DCB      0x38,0x6c,0xc6,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  00000000          DCB      0x00,0x00,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  00000000          DCB      0x00,0x00,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  ff000030          DCB      0xff,0x00,0x00,0x30
000430  30180000          DCB      0x30,0x18,0x00,0x00
000434  00000000          DCB      0x00,0x00,0x00,0x00
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  00000000          DCB      0x00,0x00,0x00,0x00
000444  780c7ccc          DCB      0x78,0x0c,0x7c,0xcc
000448  cccc7600          DCB      0xcc,0xcc,0x76,0x00
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  00e06060          DCB      0x00,0xe0,0x60,0x60
000454  786c6666          DCB      0x78,0x6c,0x66,0x66
000458  6666dc00          DCB      0x66,0x66,0xdc,0x00
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  00000000          DCB      0x00,0x00,0x00,0x00
000464  7cc6c0c0          DCB      0x7c,0xc6,0xc0,0xc0
000468  c0c67c00          DCB      0xc0,0xc6,0x7c,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  001c0c0c          DCB      0x00,0x1c,0x0c,0x0c
000474  3c6ccccc          DCB      0x3c,0x6c,0xcc,0xcc
000478  cccc7600          DCB      0xcc,0xcc,0x76,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000000          DCB      0x00,0x00,0x00,0x00
000484  7cc6fec0          DCB      0x7c,0xc6,0xfe,0xc0
000488  c0c67c00          DCB      0xc0,0xc6,0x7c,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00386c64          DCB      0x00,0x38,0x6c,0x64
000494  60f06060          DCB      0x60,0xf0,0x60,0x60
000498  6060f000          DCB      0x60,0x60,0xf0,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  76cccccc          DCB      0x76,0xcc,0xcc,0xcc
0004a8  cccc7c0c          DCB      0xcc,0xcc,0x7c,0x0c
0004ac  cc780000          DCB      0xcc,0x78,0x00,0x00
0004b0  00e06060          DCB      0x00,0xe0,0x60,0x60
0004b4  6c766666          DCB      0x6c,0x76,0x66,0x66
0004b8  6666e600          DCB      0x66,0x66,0xe6,0x00
0004bc  00000000          DCB      0x00,0x00,0x00,0x00
0004c0  00181800          DCB      0x00,0x18,0x18,0x00
0004c4  38181818          DCB      0x38,0x18,0x18,0x18
0004c8  18183c00          DCB      0x18,0x18,0x3c,0x00
0004cc  00000000          DCB      0x00,0x00,0x00,0x00
0004d0  00060600          DCB      0x00,0x06,0x06,0x00
0004d4  0e060606          DCB      0x0e,0x06,0x06,0x06
0004d8  06060666          DCB      0x06,0x06,0x06,0x66
0004dc  663c0000          DCB      0x66,0x3c,0x00,0x00
0004e0  00e06060          DCB      0x00,0xe0,0x60,0x60
0004e4  666c7878          DCB      0x66,0x6c,0x78,0x78
0004e8  6c66e600          DCB      0x6c,0x66,0xe6,0x00
0004ec  00000000          DCB      0x00,0x00,0x00,0x00
0004f0  00381818          DCB      0x00,0x38,0x18,0x18
0004f4  18181818          DCB      0x18,0x18,0x18,0x18
0004f8  18183c00          DCB      0x18,0x18,0x3c,0x00
0004fc  00000000          DCB      0x00,0x00,0x00,0x00
000500  00000000          DCB      0x00,0x00,0x00,0x00
000504  ecfed6d6          DCB      0xec,0xfe,0xd6,0xd6
000508  d6d6d600          DCB      0xd6,0xd6,0xd6,0x00
00050c  00000000          DCB      0x00,0x00,0x00,0x00
000510  00000000          DCB      0x00,0x00,0x00,0x00
000514  dc666666          DCB      0xdc,0x66,0x66,0x66
000518  66666600          DCB      0x66,0x66,0x66,0x00
00051c  00000000          DCB      0x00,0x00,0x00,0x00
000520  00000000          DCB      0x00,0x00,0x00,0x00
000524  7cc6c6c6          DCB      0x7c,0xc6,0xc6,0xc6
000528  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
00052c  00000000          DCB      0x00,0x00,0x00,0x00
000530  00000000          DCB      0x00,0x00,0x00,0x00
000534  dc666666          DCB      0xdc,0x66,0x66,0x66
000538  66667c60          DCB      0x66,0x66,0x7c,0x60
00053c  60f00000          DCB      0x60,0xf0,0x00,0x00
000540  00000000          DCB      0x00,0x00,0x00,0x00
000544  76cccccc          DCB      0x76,0xcc,0xcc,0xcc
000548  cccc7c0c          DCB      0xcc,0xcc,0x7c,0x0c
00054c  0c1e0000          DCB      0x0c,0x1e,0x00,0x00
000550  00000000          DCB      0x00,0x00,0x00,0x00
000554  dc766260          DCB      0xdc,0x76,0x62,0x60
000558  6060f000          DCB      0x60,0x60,0xf0,0x00
00055c  00000000          DCB      0x00,0x00,0x00,0x00
000560  00000000          DCB      0x00,0x00,0x00,0x00
000564  7cc66038          DCB      0x7c,0xc6,0x60,0x38
000568  0cc67c00          DCB      0x0c,0xc6,0x7c,0x00
00056c  00000000          DCB      0x00,0x00,0x00,0x00
000570  00103030          DCB      0x00,0x10,0x30,0x30
000574  fc303030          DCB      0xfc,0x30,0x30,0x30
000578  30361c00          DCB      0x30,0x36,0x1c,0x00
00057c  00000000          DCB      0x00,0x00,0x00,0x00
000580  00000000          DCB      0x00,0x00,0x00,0x00
000584  cccccccc          DCB      0xcc,0xcc,0xcc,0xcc
000588  cccc7600          DCB      0xcc,0xcc,0x76,0x00
00058c  00000000          DCB      0x00,0x00,0x00,0x00
000590  00000000          DCB      0x00,0x00,0x00,0x00
000594  66666666          DCB      0x66,0x66,0x66,0x66
000598  663c1800          DCB      0x66,0x3c,0x18,0x00
00059c  00000000          DCB      0x00,0x00,0x00,0x00
0005a0  00000000          DCB      0x00,0x00,0x00,0x00
0005a4  c6c6c6d6          DCB      0xc6,0xc6,0xc6,0xd6
0005a8  d6fe6c00          DCB      0xd6,0xfe,0x6c,0x00
0005ac  00000000          DCB      0x00,0x00,0x00,0x00
0005b0  00000000          DCB      0x00,0x00,0x00,0x00
0005b4  c66c3838          DCB      0xc6,0x6c,0x38,0x38
0005b8  386cc600          DCB      0x38,0x6c,0xc6,0x00
0005bc  00000000          DCB      0x00,0x00,0x00,0x00
0005c0  00000000          DCB      0x00,0x00,0x00,0x00
0005c4  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
0005c8  c6c67e06          DCB      0xc6,0xc6,0x7e,0x06
0005cc  0cf80000          DCB      0x0c,0xf8,0x00,0x00
0005d0  00000000          DCB      0x00,0x00,0x00,0x00
0005d4  fecc1830          DCB      0xfe,0xcc,0x18,0x30
0005d8  60c6fe00          DCB      0x60,0xc6,0xfe,0x00
0005dc  00000000          DCB      0x00,0x00,0x00,0x00
0005e0  000e1818          DCB      0x00,0x0e,0x18,0x18
0005e4  18701818          DCB      0x18,0x70,0x18,0x18
0005e8  18180e00          DCB      0x18,0x18,0x0e,0x00
0005ec  00000000          DCB      0x00,0x00,0x00,0x00
0005f0  00181818          DCB      0x00,0x18,0x18,0x18
0005f4  18001818          DCB      0x18,0x00,0x18,0x18
0005f8  18181800          DCB      0x18,0x18,0x18,0x00
0005fc  00000000          DCB      0x00,0x00,0x00,0x00
000600  00701818          DCB      0x00,0x70,0x18,0x18
000604  180e1818          DCB      0x18,0x0e,0x18,0x18
000608  18187000          DCB      0x18,0x18,0x70,0x00
00060c  00000000          DCB      0x00,0x00,0x00,0x00
000610  0076dc00          DCB      0x00,0x76,0xdc,0x00
000614  00000000          DCB      0x00,0x00,0x00,0x00
000618  00000000          DCB      0x00,0x00,0x00,0x00
00061c  000000ff          DCB      0x00,0x00,0x00,0xff
000620  ffffffff          DCB      0xff,0xff,0xff,0xff
000624  ffffffff          DCB      0xff,0xff,0xff,0xff
000628  ffffffff          DCB      0xff,0xff,0xff,0xff
00062c  ffff0000          DCB      0xff,0xff,0x00,0x00
000630  00000000          DCB      0x00,0x00,0x00,0x00
000634  00000000          DCB      0x00,0x00,0x00,0x00
000638  00000000          DCB      0x00,0x00,0x00,0x00
00063c  00000000          DCB      0x00,0x00,0x00,0x00
000640  00000000          DCB      0x00,0x00,0x00,0x00
000644  00000000          DCB      0x00,0x00,0x00,0x00
000648  00000000          DCB      0x00,0x00,0x00,0x00
00064c  00000000          DCB      0x00,0x00,0x00,0x00
000650  00000000          DCB      0x00,0x00,0x00,0x00
000654  00000000          DCB      0x00,0x00,0x00,0x00
000658  00000000          DCB      0x00,0x00,0x00,0x00
00065c  00000000          DCB      0x00,0x00,0x00,0x00
000660  7f404040          DCB      0x7f,0x40,0x40,0x40
000664  5e404040          DCB      0x5e,0x40,0x40,0x40
000668  40404740          DCB      0x40,0x40,0x47,0x40
00066c  407f0000          DCB      0x40,0x7f,0x00,0x00
000670  fe020202          DCB      0xfe,0x02,0x02,0x02
000674  7a020202          DCB      0x7a,0x02,0x02,0x02
000678  0202e202          DCB      0x02,0x02,0xe2,0x02
00067c  02fe0000          DCB      0x02,0xfe,0x00,0x00
000680  00000000          DCB      0x00,0x00,0x00,0x00
000684  00000000          DCB      0x00,0x00,0x00,0x00
000688  00000000          DCB      0x00,0x00,0x00,0x00
00068c  00000000          DCB      0x00,0x00,0x00,0x00
000690  00000000          DCB      0x00,0x00,0x00,0x00
000694  00000000          DCB      0x00,0x00,0x00,0x00
000698  00000000          DCB      0x00,0x00,0x00,0x00
00069c  00000000          DCB      0x00,0x00,0x00,0x00
0006a0  00000000          DCB      0x00,0x00,0x00,0x00
0006a4  00000000          DCB      0x00,0x00,0x00,0x00
0006a8  00000000          DCB      0x00,0x00,0x00,0x00
0006ac  00000000          DCB      0x00,0x00,0x00,0x00
0006b0  00000000          DCB      0x00,0x00,0x00,0x00
0006b4  00000000          DCB      0x00,0x00,0x00,0x00
0006b8  00000000          DCB      0x00,0x00,0x00,0x00
0006bc  00000000          DCB      0x00,0x00,0x00,0x00
0006c0  00000000          DCB      0x00,0x00,0x00,0x00
0006c4  00000000          DCB      0x00,0x00,0x00,0x00
0006c8  00000000          DCB      0x00,0x00,0x00,0x00
0006cc  00000000          DCB      0x00,0x00,0x00,0x00
0006d0  00000000          DCB      0x00,0x00,0x00,0x00
0006d4  00000000          DCB      0x00,0x00,0x00,0x00
0006d8  00000000          DCB      0x00,0x00,0x00,0x00
0006dc  00000000          DCB      0x00,0x00,0x00,0x00
0006e0  00000000          DCB      0x00,0x00,0x00,0x00
0006e4  00000000          DCB      0x00,0x00,0x00,0x00
0006e8  00000000          DCB      0x00,0x00,0x00,0x00
0006ec  00000000          DCB      0x00,0x00,0x00,0x00
0006f0  00000000          DCB      0x00,0x00,0x00,0x00
0006f4  00000000          DCB      0x00,0x00,0x00,0x00
0006f8  00000000          DCB      0x00,0x00,0x00,0x00
0006fc  00000000          DCB      0x00,0x00,0x00,0x00
000700  00000000          DCB      0x00,0x00,0x00,0x00
000704  00000000          DCB      0x00,0x00,0x00,0x00
000708  00000000          DCB      0x00,0x00,0x00,0x00
00070c  00000000          DCB      0x00,0x00,0x00,0x00
000710  00000000          DCB      0x00,0x00,0x00,0x00
000714  00000000          DCB      0x00,0x00,0x00,0x00
000718  00000000          DCB      0x00,0x00,0x00,0x00
00071c  00000000          DCB      0x00,0x00,0x00,0x00
000720  00000000          DCB      0x00,0x00,0x00,0x00
000724  00000000          DCB      0x00,0x00,0x00,0x00
000728  00000000          DCB      0x00,0x00,0x00,0x00
00072c  00000000          DCB      0x00,0x00,0x00,0x00
000730  00000000          DCB      0x00,0x00,0x00,0x00
000734  00000000          DCB      0x00,0x00,0x00,0x00
000738  00000000          DCB      0x00,0x00,0x00,0x00
00073c  00000000          DCB      0x00,0x00,0x00,0x00
000740  00000000          DCB      0x00,0x00,0x00,0x00
000744  00000000          DCB      0x00,0x00,0x00,0x00
000748  00000000          DCB      0x00,0x00,0x00,0x00
00074c  00000000          DCB      0x00,0x00,0x00,0x00
000750  00000000          DCB      0x00,0x00,0x00,0x00
000754  00000000          DCB      0x00,0x00,0x00,0x00
000758  00000000          DCB      0x00,0x00,0x00,0x00
00075c  00000000          DCB      0x00,0x00,0x00,0x00
000760  00000000          DCB      0x00,0x00,0x00,0x00
000764  00000000          DCB      0x00,0x00,0x00,0x00
000768  00000000          DCB      0x00,0x00,0x00,0x00
00076c  00000000          DCB      0x00,0x00,0x00,0x00
000770  00000000          DCB      0x00,0x00,0x00,0x00
000774  00000000          DCB      0x00,0x00,0x00,0x00
000778  00000000          DCB      0x00,0x00,0x00,0x00
00077c  00000000          DCB      0x00,0x00,0x00,0x00
000780  00000000          DCB      0x00,0x00,0x00,0x00
000784  00000000          DCB      0x00,0x00,0x00,0x00
000788  00000000          DCB      0x00,0x00,0x00,0x00
00078c  00000000          DCB      0x00,0x00,0x00,0x00
000790  00000000          DCB      0x00,0x00,0x00,0x00
000794  00000000          DCB      0x00,0x00,0x00,0x00
000798  00000000          DCB      0x00,0x00,0x00,0x00
00079c  00000000          DCB      0x00,0x00,0x00,0x00
0007a0  00000000          DCB      0x00,0x00,0x00,0x00
0007a4  00000000          DCB      0x00,0x00,0x00,0x00
0007a8  00000000          DCB      0x00,0x00,0x00,0x00
0007ac  00000000          DCB      0x00,0x00,0x00,0x00
0007b0  00000000          DCB      0x00,0x00,0x00,0x00
0007b4  00000000          DCB      0x00,0x00,0x00,0x00
0007b8  00000000          DCB      0x00,0x00,0x00,0x00
0007bc  00000000          DCB      0x00,0x00,0x00,0x00
0007c0  00000000          DCB      0x00,0x00,0x00,0x00
0007c4  00000000          DCB      0x00,0x00,0x00,0x00
0007c8  00000000          DCB      0x00,0x00,0x00,0x00
0007cc  00000000          DCB      0x00,0x00,0x00,0x00
0007d0  00000000          DCB      0x00,0x00,0x00,0x00
0007d4  00000000          DCB      0x00,0x00,0x00,0x00
0007d8  00000000          DCB      0x00,0x00,0x00,0x00
0007dc  00000000          DCB      0x00,0x00,0x00,0x00
0007e0  00000000          DCB      0x00,0x00,0x00,0x00
0007e4  00000000          DCB      0x00,0x00,0x00,0x00
0007e8  00000000          DCB      0x00,0x00,0x00,0x00
0007ec  00000000          DCB      0x00,0x00,0x00,0x00
0007f0  00000000          DCB      0x00,0x00,0x00,0x00
0007f4  00000000          DCB      0x00,0x00,0x00,0x00
0007f8  00000000          DCB      0x00,0x00,0x00,0x00
0007fc  00000000          DCB      0x00,0x00,0x00,0x00
000800  00000000          DCB      0x00,0x00,0x00,0x00
000804  00000000          DCB      0x00,0x00,0x00,0x00
000808  00000000          DCB      0x00,0x00,0x00,0x00
00080c  00000000          DCB      0x00,0x00,0x00,0x00
000810  00000000          DCB      0x00,0x00,0x00,0x00
000814  00000000          DCB      0x00,0x00,0x00,0x00
000818  00000000          DCB      0x00,0x00,0x00,0x00
00081c  00000000          DCB      0x00,0x00,0x00,0x00
000820  00000000          DCB      0x00,0x00,0x00,0x00
000824  00000000          DCB      0x00,0x00,0x00,0x00
000828  00000000          DCB      0x00,0x00,0x00,0x00
00082c  00000000          DCB      0x00,0x00,0x00,0x00
000830  00000000          DCB      0x00,0x00,0x00,0x00
000834  00000000          DCB      0x00,0x00,0x00,0x00
000838  00000000          DCB      0x00,0x00,0x00,0x00
00083c  ff000000          DCB      0xff,0x00,0x00,0x00
000840  00183c3c          DCB      0x00,0x18,0x3c,0x3c
000844  3c181818          DCB      0x3c,0x18,0x18,0x18
000848  00181800          DCB      0x00,0x18,0x18,0x00
00084c  ff000000          DCB      0xff,0x00,0x00,0x00
000850  66666624          DCB      0x66,0x66,0x66,0x24
000854  00000000          DCB      0x00,0x00,0x00,0x00
000858  00000000          DCB      0x00,0x00,0x00,0x00
00085c  ff000000          DCB      0xff,0x00,0x00,0x00
000860  00006c6c          DCB      0x00,0x00,0x6c,0x6c
000864  fe6c6c6c          DCB      0xfe,0x6c,0x6c,0x6c
000868  fe6c6c00          DCB      0xfe,0x6c,0x6c,0x00
00086c  ff000018          DCB      0xff,0x00,0x00,0x18
000870  187cc6c2          DCB      0x18,0x7c,0xc6,0xc2
000874  c07c0686          DCB      0xc0,0x7c,0x06,0x86
000878  c67c1818          DCB      0xc6,0x7c,0x18,0x18
00087c  ff000000          DCB      0xff,0x00,0x00,0x00
000880  000000c2          DCB      0x00,0x00,0x00,0xc2
000884  c60c1830          DCB      0xc6,0x0c,0x18,0x30
000888  60c68600          DCB      0x60,0xc6,0x86,0x00
00088c  ff000000          DCB      0xff,0x00,0x00,0x00
000890  00386c6c          DCB      0x00,0x38,0x6c,0x6c
000894  3876dccc          DCB      0x38,0x76,0xdc,0xcc
000898  cccc7600          DCB      0xcc,0xcc,0x76,0x00
00089c  ff000000          DCB      0xff,0x00,0x00,0x00
0008a0  30303060          DCB      0x30,0x30,0x30,0x60
0008a4  00000000          DCB      0x00,0x00,0x00,0x00
0008a8  00000000          DCB      0x00,0x00,0x00,0x00
0008ac  ff000000          DCB      0xff,0x00,0x00,0x00
0008b0  000c1830          DCB      0x00,0x0c,0x18,0x30
0008b4  30303030          DCB      0x30,0x30,0x30,0x30
0008b8  30180c00          DCB      0x30,0x18,0x0c,0x00
0008bc  ff000000          DCB      0xff,0x00,0x00,0x00
0008c0  0030180c          DCB      0x00,0x30,0x18,0x0c
0008c4  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
0008c8  0c183000          DCB      0x0c,0x18,0x30,0x00
0008cc  ff000000          DCB      0xff,0x00,0x00,0x00
0008d0  00000000          DCB      0x00,0x00,0x00,0x00
0008d4  663cff3c          DCB      0x66,0x3c,0xff,0x3c
0008d8  66000000          DCB      0x66,0x00,0x00,0x00
0008dc  ff000000          DCB      0xff,0x00,0x00,0x00
0008e0  00000000          DCB      0x00,0x00,0x00,0x00
0008e4  18187e18          DCB      0x18,0x18,0x7e,0x18
0008e8  18000000          DCB      0x18,0x00,0x00,0x00
0008ec  ff000000          DCB      0xff,0x00,0x00,0x00
0008f0  00000000          DCB      0x00,0x00,0x00,0x00
0008f4  00000000          DCB      0x00,0x00,0x00,0x00
0008f8  18181830          DCB      0x18,0x18,0x18,0x30
0008fc  ff000000          DCB      0xff,0x00,0x00,0x00
000900  00000000          DCB      0x00,0x00,0x00,0x00
000904  0000fe00          DCB      0x00,0x00,0xfe,0x00
000908  00000000          DCB      0x00,0x00,0x00,0x00
00090c  ff000000          DCB      0xff,0x00,0x00,0x00
000910  00000000          DCB      0x00,0x00,0x00,0x00
000914  00000000          DCB      0x00,0x00,0x00,0x00
000918  00181800          DCB      0x00,0x18,0x18,0x00
00091c  ff000000          DCB      0xff,0x00,0x00,0x00
000920  00000002          DCB      0x00,0x00,0x00,0x02
000924  060c1830          DCB      0x06,0x0c,0x18,0x30
000928  60c08000          DCB      0x60,0xc0,0x80,0x00
00092c  ff000000          DCB      0xff,0x00,0x00,0x00
000930  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000934  ced6d6e6          DCB      0xce,0xd6,0xd6,0xe6
000938  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
00093c  ff000000          DCB      0xff,0x00,0x00,0x00
000940  00183878          DCB      0x00,0x18,0x38,0x78
000944  18181818          DCB      0x18,0x18,0x18,0x18
000948  18187e00          DCB      0x18,0x18,0x7e,0x00
00094c  ff000000          DCB      0xff,0x00,0x00,0x00
000950  007cc606          DCB      0x00,0x7c,0xc6,0x06
000954  0c183060          DCB      0x0c,0x18,0x30,0x60
000958  c0c6fe00          DCB      0xc0,0xc6,0xfe,0x00
00095c  ff000000          DCB      0xff,0x00,0x00,0x00
000960  007cc606          DCB      0x00,0x7c,0xc6,0x06
000964  063c0606          DCB      0x06,0x3c,0x06,0x06
000968  06c67c00          DCB      0x06,0xc6,0x7c,0x00
00096c  ff000000          DCB      0xff,0x00,0x00,0x00
000970  000c1c3c          DCB      0x00,0x0c,0x1c,0x3c
000974  6cccfe0c          DCB      0x6c,0xcc,0xfe,0x0c
000978  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
00097c  ff000000          DCB      0xff,0x00,0x00,0x00
000980  00fec0c0          DCB      0x00,0xfe,0xc0,0xc0
000984  c0fc0e06          DCB      0xc0,0xfc,0x0e,0x06
000988  06c67c00          DCB      0x06,0xc6,0x7c,0x00
00098c  ff000000          DCB      0xff,0x00,0x00,0x00
000990  003860c0          DCB      0x00,0x38,0x60,0xc0
000994  c0fcc6c6          DCB      0xc0,0xfc,0xc6,0xc6
000998  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
00099c  ff000000          DCB      0xff,0x00,0x00,0x00
0009a0  00fec606          DCB      0x00,0xfe,0xc6,0x06
0009a4  060c1830          DCB      0x06,0x0c,0x18,0x30
0009a8  30303000          DCB      0x30,0x30,0x30,0x00
0009ac  ff000000          DCB      0xff,0x00,0x00,0x00
0009b0  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
0009b4  c67cc6c6          DCB      0xc6,0x7c,0xc6,0xc6
0009b8  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
0009bc  ff000000          DCB      0xff,0x00,0x00,0x00
0009c0  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
0009c4  c67e0606          DCB      0xc6,0x7e,0x06,0x06
0009c8  060c7800          DCB      0x06,0x0c,0x78,0x00
0009cc  ff000000          DCB      0xff,0x00,0x00,0x00
0009d0  00000018          DCB      0x00,0x00,0x00,0x18
0009d4  18000000          DCB      0x18,0x00,0x00,0x00
0009d8  18180000          DCB      0x18,0x18,0x00,0x00
0009dc  ff000000          DCB      0xff,0x00,0x00,0x00
0009e0  00000018          DCB      0x00,0x00,0x00,0x18
0009e4  18000000          DCB      0x18,0x00,0x00,0x00
0009e8  18183000          DCB      0x18,0x18,0x30,0x00
0009ec  ff000000          DCB      0xff,0x00,0x00,0x00
0009f0  0000060c          DCB      0x00,0x00,0x06,0x0c
0009f4  18306030          DCB      0x18,0x30,0x60,0x30
0009f8  180c0600          DCB      0x18,0x0c,0x06,0x00
0009fc  ff000000          DCB      0xff,0x00,0x00,0x00
000a00  00000000          DCB      0x00,0x00,0x00,0x00
000a04  00fe0000          DCB      0x00,0xfe,0x00,0x00
000a08  fe000000          DCB      0xfe,0x00,0x00,0x00
000a0c  ff000000          DCB      0xff,0x00,0x00,0x00
000a10  00006030          DCB      0x00,0x00,0x60,0x30
000a14  180c060c          DCB      0x18,0x0c,0x06,0x0c
000a18  18306000          DCB      0x18,0x30,0x60,0x00
000a1c  ff000000          DCB      0xff,0x00,0x00,0x00
000a20  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000a24  0c181818          DCB      0x0c,0x18,0x18,0x18
000a28  00181800          DCB      0x00,0x18,0x18,0x00
000a2c  ff000000          DCB      0xff,0x00,0x00,0x00
000a30  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000a34  c6dedede          DCB      0xc6,0xde,0xde,0xde
000a38  dcc07c00          DCB      0xdc,0xc0,0x7c,0x00
000a3c  ff000000          DCB      0xff,0x00,0x00,0x00
000a40  0010386c          DCB      0x00,0x10,0x38,0x6c
000a44  c6c6fec6          DCB      0xc6,0xc6,0xfe,0xc6
000a48  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
000a4c  ff000000          DCB      0xff,0x00,0x00,0x00
000a50  00fc6666          DCB      0x00,0xfc,0x66,0x66
000a54  667c6666          DCB      0x66,0x7c,0x66,0x66
000a58  6666fc00          DCB      0x66,0x66,0xfc,0x00
000a5c  ff000000          DCB      0xff,0x00,0x00,0x00
000a60  003c66c2          DCB      0x00,0x3c,0x66,0xc2
000a64  c0c0c0c0          DCB      0xc0,0xc0,0xc0,0xc0
000a68  c2663c00          DCB      0xc2,0x66,0x3c,0x00
000a6c  ff000000          DCB      0xff,0x00,0x00,0x00
000a70  00f86c66          DCB      0x00,0xf8,0x6c,0x66
000a74  66666666          DCB      0x66,0x66,0x66,0x66
000a78  666cf800          DCB      0x66,0x6c,0xf8,0x00
000a7c  ff000000          DCB      0xff,0x00,0x00,0x00
000a80  00fe6662          DCB      0x00,0xfe,0x66,0x62
000a84  68786860          DCB      0x68,0x78,0x68,0x60
000a88  6266fe00          DCB      0x62,0x66,0xfe,0x00
000a8c  ff000000          DCB      0xff,0x00,0x00,0x00
000a90  00fe6662          DCB      0x00,0xfe,0x66,0x62
000a94  68786860          DCB      0x68,0x78,0x68,0x60
000a98  6060f000          DCB      0x60,0x60,0xf0,0x00
000a9c  ff000000          DCB      0xff,0x00,0x00,0x00
000aa0  003c66c2          DCB      0x00,0x3c,0x66,0xc2
000aa4  c0c0dec6          DCB      0xc0,0xc0,0xde,0xc6
000aa8  c6663a00          DCB      0xc6,0x66,0x3a,0x00
000aac  ff000000          DCB      0xff,0x00,0x00,0x00
000ab0  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
000ab4  c6fec6c6          DCB      0xc6,0xfe,0xc6,0xc6
000ab8  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
000abc  ff000000          DCB      0xff,0x00,0x00,0x00
000ac0  003c1818          DCB      0x00,0x3c,0x18,0x18
000ac4  18181818          DCB      0x18,0x18,0x18,0x18
000ac8  18183c00          DCB      0x18,0x18,0x3c,0x00
000acc  ff000000          DCB      0xff,0x00,0x00,0x00
000ad0  001e0c0c          DCB      0x00,0x1e,0x0c,0x0c
000ad4  0c0c0ccc          DCB      0x0c,0x0c,0x0c,0xcc
000ad8  cccc7800          DCB      0xcc,0xcc,0x78,0x00
000adc  ff000000          DCB      0xff,0x00,0x00,0x00
000ae0  00e6666c          DCB      0x00,0xe6,0x66,0x6c
000ae4  6c78786c          DCB      0x6c,0x78,0x78,0x6c
000ae8  6666e600          DCB      0x66,0x66,0xe6,0x00
000aec  ff000000          DCB      0xff,0x00,0x00,0x00
000af0  00f06060          DCB      0x00,0xf0,0x60,0x60
000af4  60606060          DCB      0x60,0x60,0x60,0x60
000af8  6266fe00          DCB      0x62,0x66,0xfe,0x00
000afc  ff000000          DCB      0xff,0x00,0x00,0x00
000b00  00c6eefe          DCB      0x00,0xc6,0xee,0xfe
000b04  fed6c6c6          DCB      0xfe,0xd6,0xc6,0xc6
000b08  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
000b0c  ff000000          DCB      0xff,0x00,0x00,0x00
000b10  00c6e6f6          DCB      0x00,0xc6,0xe6,0xf6
000b14  fedecec6          DCB      0xfe,0xde,0xce,0xc6
000b18  c6c6c600          DCB      0xc6,0xc6,0xc6,0x00
000b1c  ff000000          DCB      0xff,0x00,0x00,0x00
000b20  00386cc6          DCB      0x00,0x38,0x6c,0xc6
000b24  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000b28  c66c3800          DCB      0xc6,0x6c,0x38,0x00
000b2c  ff000000          DCB      0xff,0x00,0x00,0x00
000b30  00fc6666          DCB      0x00,0xfc,0x66,0x66
000b34  667c6060          DCB      0x66,0x7c,0x60,0x60
000b38  6060f000          DCB      0x60,0x60,0xf0,0x00
000b3c  ff000000          DCB      0xff,0x00,0x00,0x00
000b40  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000b44  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000b48  d6de7c0c          DCB      0xd6,0xde,0x7c,0x0c
000b4c  ff000000          DCB      0xff,0x00,0x00,0x00
000b50  00fc6666          DCB      0x00,0xfc,0x66,0x66
000b54  667c6c66          DCB      0x66,0x7c,0x6c,0x66
000b58  6666e600          DCB      0x66,0x66,0xe6,0x00
000b5c  ff000000          DCB      0xff,0x00,0x00,0x00
000b60  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
000b64  60380c06          DCB      0x60,0x38,0x0c,0x06
000b68  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
000b6c  ff000000          DCB      0xff,0x00,0x00,0x00
000b70  007e7e5a          DCB      0x00,0x7e,0x7e,0x5a
000b74  18181818          DCB      0x18,0x18,0x18,0x18
000b78  18183c00          DCB      0x18,0x18,0x3c,0x00
000b7c  ff000000          DCB      0xff,0x00,0x00,0x00
000b80  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
000b84  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000b88  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
000b8c  ff000000          DCB      0xff,0x00,0x00,0x00
000b90  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
000b94  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000b98  6c381000          DCB      0x6c,0x38,0x10,0x00
000b9c  ff000000          DCB      0xff,0x00,0x00,0x00
000ba0  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
000ba4  c6c6d6d6          DCB      0xc6,0xc6,0xd6,0xd6
000ba8  fe6c6c00          DCB      0xfe,0x6c,0x6c,0x00
000bac  ff000000          DCB      0xff,0x00,0x00,0x00
000bb0  00c6c66c          DCB      0x00,0xc6,0xc6,0x6c
000bb4  6c38386c          DCB      0x6c,0x38,0x38,0x6c
000bb8  6cc6c600          DCB      0x6c,0xc6,0xc6,0x00
000bbc  ff000000          DCB      0xff,0x00,0x00,0x00
000bc0  00666666          DCB      0x00,0x66,0x66,0x66
000bc4  663c1818          DCB      0x66,0x3c,0x18,0x18
000bc8  18183c00          DCB      0x18,0x18,0x3c,0x00
000bcc  ff000000          DCB      0xff,0x00,0x00,0x00
000bd0  00fec686          DCB      0x00,0xfe,0xc6,0x86
000bd4  0c183060          DCB      0x0c,0x18,0x30,0x60
000bd8  c2c6fe00          DCB      0xc2,0xc6,0xfe,0x00
000bdc  ff000000          DCB      0xff,0x00,0x00,0x00
000be0  000080c0          DCB      0x00,0x00,0x80,0xc0
000be4  e070381c          DCB      0xe0,0x70,0x38,0x1c
000be8  0e060200          DCB      0x0e,0x06,0x02,0x00
000bec  ff000000          DCB      0xff,0x00,0x00,0x00
000bf0  003c0c0c          DCB      0x00,0x3c,0x0c,0x0c
000bf4  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000bf8  0c0c3c00          DCB      0x0c,0x0c,0x3c,0x00
000bfc  ff000010          DCB      0xff,0x00,0x00,0x10
000c00  386cc600          DCB      0x38,0x6c,0xc6,0x00
000c04  00000000          DCB      0x00,0x00,0x00,0x00
000c08  00000000          DCB      0x00,0x00,0x00,0x00
000c0c  ff000000          DCB      0xff,0x00,0x00,0x00
000c10  00000000          DCB      0x00,0x00,0x00,0x00
000c14  00000000          DCB      0x00,0x00,0x00,0x00
000c18  00000000          DCB      0x00,0x00,0x00,0x00
000c1c  ff000030          DCB      0xff,0x00,0x00,0x30
000c20  30180000          DCB      0x30,0x18,0x00,0x00
000c24  00000000          DCB      0x00,0x00,0x00,0x00
000c28  00000000          DCB      0x00,0x00,0x00,0x00
000c2c  ff000000          DCB      0xff,0x00,0x00,0x00
000c30  00000000          DCB      0x00,0x00,0x00,0x00
000c34  780c7ccc          DCB      0x78,0x0c,0x7c,0xcc
000c38  cccc7600          DCB      0xcc,0xcc,0x76,0x00
000c3c  ff000000          DCB      0xff,0x00,0x00,0x00
000c40  00e06060          DCB      0x00,0xe0,0x60,0x60
000c44  786c6666          DCB      0x78,0x6c,0x66,0x66
000c48  6666dc00          DCB      0x66,0x66,0xdc,0x00
000c4c  ff000000          DCB      0xff,0x00,0x00,0x00
000c50  00000000          DCB      0x00,0x00,0x00,0x00
000c54  7cc6c0c0          DCB      0x7c,0xc6,0xc0,0xc0
000c58  c0c67c00          DCB      0xc0,0xc6,0x7c,0x00
000c5c  ff000000          DCB      0xff,0x00,0x00,0x00
000c60  001c0c0c          DCB      0x00,0x1c,0x0c,0x0c
000c64  3c6ccccc          DCB      0x3c,0x6c,0xcc,0xcc
000c68  cccc7600          DCB      0xcc,0xcc,0x76,0x00
000c6c  ff000000          DCB      0xff,0x00,0x00,0x00
000c70  00000000          DCB      0x00,0x00,0x00,0x00
000c74  7cc6fec0          DCB      0x7c,0xc6,0xfe,0xc0
000c78  c0c67c00          DCB      0xc0,0xc6,0x7c,0x00
000c7c  ff000000          DCB      0xff,0x00,0x00,0x00
000c80  00386c64          DCB      0x00,0x38,0x6c,0x64
000c84  60f06060          DCB      0x60,0xf0,0x60,0x60
000c88  6060f000          DCB      0x60,0x60,0xf0,0x00
000c8c  ff000000          DCB      0xff,0x00,0x00,0x00
000c90  00000000          DCB      0x00,0x00,0x00,0x00
000c94  76cccccc          DCB      0x76,0xcc,0xcc,0xcc
000c98  cccc7c0c          DCB      0xcc,0xcc,0x7c,0x0c
000c9c  ff780000          DCB      0xff,0x78,0x00,0x00
000ca0  00e06060          DCB      0x00,0xe0,0x60,0x60
000ca4  6c766666          DCB      0x6c,0x76,0x66,0x66
000ca8  6666e600          DCB      0x66,0x66,0xe6,0x00
000cac  ff000000          DCB      0xff,0x00,0x00,0x00
000cb0  00181800          DCB      0x00,0x18,0x18,0x00
000cb4  38181818          DCB      0x38,0x18,0x18,0x18
000cb8  18183c00          DCB      0x18,0x18,0x3c,0x00
000cbc  ff000000          DCB      0xff,0x00,0x00,0x00
000cc0  00060600          DCB      0x00,0x06,0x06,0x00
000cc4  0e060606          DCB      0x0e,0x06,0x06,0x06
000cc8  06060666          DCB      0x06,0x06,0x06,0x66
000ccc  ff3c0000          DCB      0xff,0x3c,0x00,0x00
000cd0  00e06060          DCB      0x00,0xe0,0x60,0x60
000cd4  666c7878          DCB      0x66,0x6c,0x78,0x78
000cd8  6c66e600          DCB      0x6c,0x66,0xe6,0x00
000cdc  ff000000          DCB      0xff,0x00,0x00,0x00
000ce0  00381818          DCB      0x00,0x38,0x18,0x18
000ce4  18181818          DCB      0x18,0x18,0x18,0x18
000ce8  18183c00          DCB      0x18,0x18,0x3c,0x00
000cec  ff000000          DCB      0xff,0x00,0x00,0x00
000cf0  00000000          DCB      0x00,0x00,0x00,0x00
000cf4  ecfed6d6          DCB      0xec,0xfe,0xd6,0xd6
000cf8  d6d6d600          DCB      0xd6,0xd6,0xd6,0x00
000cfc  ff000000          DCB      0xff,0x00,0x00,0x00
000d00  00000000          DCB      0x00,0x00,0x00,0x00
000d04  dc666666          DCB      0xdc,0x66,0x66,0x66
000d08  66666600          DCB      0x66,0x66,0x66,0x00
000d0c  ff000000          DCB      0xff,0x00,0x00,0x00
000d10  00000000          DCB      0x00,0x00,0x00,0x00
000d14  7cc6c6c6          DCB      0x7c,0xc6,0xc6,0xc6
000d18  c6c67c00          DCB      0xc6,0xc6,0x7c,0x00
000d1c  ff000000          DCB      0xff,0x00,0x00,0x00
000d20  00000000          DCB      0x00,0x00,0x00,0x00
000d24  dc666666          DCB      0xdc,0x66,0x66,0x66
000d28  66667c60          DCB      0x66,0x66,0x7c,0x60
000d2c  fff00000          DCB      0xff,0xf0,0x00,0x00
000d30  00000000          DCB      0x00,0x00,0x00,0x00
000d34  76cccccc          DCB      0x76,0xcc,0xcc,0xcc
000d38  cccc7c0c          DCB      0xcc,0xcc,0x7c,0x0c
000d3c  ff1e0000          DCB      0xff,0x1e,0x00,0x00
000d40  00000000          DCB      0x00,0x00,0x00,0x00
000d44  dc766260          DCB      0xdc,0x76,0x62,0x60
000d48  6060f000          DCB      0x60,0x60,0xf0,0x00
000d4c  ff000000          DCB      0xff,0x00,0x00,0x00
000d50  00000000          DCB      0x00,0x00,0x00,0x00
000d54  7cc66038          DCB      0x7c,0xc6,0x60,0x38
000d58  0cc67c00          DCB      0x0c,0xc6,0x7c,0x00
000d5c  ff000000          DCB      0xff,0x00,0x00,0x00
000d60  00103030          DCB      0x00,0x10,0x30,0x30
000d64  fc303030          DCB      0xfc,0x30,0x30,0x30
000d68  30361c00          DCB      0x30,0x36,0x1c,0x00
000d6c  ff000000          DCB      0xff,0x00,0x00,0x00
000d70  00000000          DCB      0x00,0x00,0x00,0x00
000d74  cccccccc          DCB      0xcc,0xcc,0xcc,0xcc
000d78  cccc7600          DCB      0xcc,0xcc,0x76,0x00
000d7c  ff000000          DCB      0xff,0x00,0x00,0x00
000d80  00000000          DCB      0x00,0x00,0x00,0x00
000d84  66666666          DCB      0x66,0x66,0x66,0x66
000d88  663c1800          DCB      0x66,0x3c,0x18,0x00
000d8c  ff000000          DCB      0xff,0x00,0x00,0x00
000d90  00000000          DCB      0x00,0x00,0x00,0x00
000d94  c6c6c6d6          DCB      0xc6,0xc6,0xc6,0xd6
000d98  d6fe6c00          DCB      0xd6,0xfe,0x6c,0x00
000d9c  ff000000          DCB      0xff,0x00,0x00,0x00
000da0  00000000          DCB      0x00,0x00,0x00,0x00
000da4  c66c3838          DCB      0xc6,0x6c,0x38,0x38
000da8  386cc600          DCB      0x38,0x6c,0xc6,0x00
000dac  ff000000          DCB      0xff,0x00,0x00,0x00
000db0  00000000          DCB      0x00,0x00,0x00,0x00
000db4  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000db8  c6c67e06          DCB      0xc6,0xc6,0x7e,0x06
000dbc  fff80000          DCB      0xff,0xf8,0x00,0x00
000dc0  00000000          DCB      0x00,0x00,0x00,0x00
000dc4  fecc1830          DCB      0xfe,0xcc,0x18,0x30
000dc8  60c6fe00          DCB      0x60,0xc6,0xfe,0x00
000dcc  ff000000          DCB      0xff,0x00,0x00,0x00
000dd0  000e1818          DCB      0x00,0x0e,0x18,0x18
000dd4  18701818          DCB      0x18,0x70,0x18,0x18
000dd8  18180e00          DCB      0x18,0x18,0x0e,0x00
000ddc  ff000000          DCB      0xff,0x00,0x00,0x00
000de0  00181818          DCB      0x00,0x18,0x18,0x18
000de4  18001818          DCB      0x18,0x00,0x18,0x18
000de8  18181800          DCB      0x18,0x18,0x18,0x00
000dec  ff000000          DCB      0xff,0x00,0x00,0x00
000df0  00701818          DCB      0x00,0x70,0x18,0x18
000df4  180e1818          DCB      0x18,0x0e,0x18,0x18
000df8  18187000          DCB      0x18,0x18,0x70,0x00
000dfc  ff000000          DCB      0xff,0x00,0x00,0x00
000e00  0076dc00          DCB      0x00,0x76,0xdc,0x00
000e04  00000000          DCB      0x00,0x00,0x00,0x00
000e08  00000000          DCB      0x00,0x00,0x00,0x00
000e0c  ff0000ff          DCB      0xff,0x00,0x00,0xff
000e10  ffffffff          DCB      0xff,0xff,0xff,0xff
000e14  ffffffff          DCB      0xff,0xff,0xff,0xff
000e18  ffffffff          DCB      0xff,0xff,0xff,0xff
000e1c  ffff0000          DCB      0xff,0xff,0x00,0x00
                          %        12
000e2c  000000            DCB      0x00,0x00,0x00
                  tft_init_code
000e2f  00                DCB      0x00
000e30  cb392c00          DCB      0xcb,0x39,0x2c,0x00
000e34  340243cf          DCB      0x34,0x02,0x43,0xcf
000e38  00c13043          DCB      0x00,0xc1,0x30,0x43
000e3c  e8850078          DCB      0xe8,0x85,0x00,0x78
000e40  43ea0000          DCB      0x43,0xea,0x00,0x00
000e44  43ea0000          DCB      0x43,0xea,0x00,0x00
000e48  43ed6403          DCB      0x43,0xed,0x64,0x03
000e4c  128143f7          DCB      0x12,0x81,0x43,0xf7
000e50  2043c023          DCB      0x20,0x43,0xc0,0x23
000e54  43c11043          DCB      0x43,0xc1,0x10,0x43
000e58  c53e2843          DCB      0xc5,0x3e,0x28,0x43
000e5c  c7864336          DCB      0xc7,0x86,0x43,0x36
000e60  433a5543          DCB      0x43,0x3a,0x55,0x43
000e64  b1001843          DCB      0xb1,0x00,0x18,0x43
000e68  b6088227          DCB      0xb6,0x08,0x82,0x27
000e6c  4311ff78          DCB      0x43,0x11,0xff,0x78
000e70  4329432c          DCB      0x43,0x29,0x43,0x2c
000e74  4342              DCB      0x43,0x42
                  tft_orientation_init_code
000e76  4828              DCB      0x48,0x28
000e78  88e8              DCB      0x88,0xe8

                          AREA ||.data||, DATA, ALIGN=1

                  curr_bg_color
000000  0000              DCW      0x0000
                  curr_highlight_color
000002  0000              DCW      0x0000
                  curr_text_color
000004  0000              DCW      0x0000
                  curr_text_color_sp
000006  0000              DCW      0x0000
                  tft_orientation
000008  00                DCB      0x00
                  tft_enabled
000009  01                DCB      0x01
                  char_max_x
00000a  00                DCB      0x00
                  char_max_y
00000b  00                DCB      0x00
                  row_width
00000c  0000              DCB      0x00,0x00
                  cur_screen
00000e  00                DCB      0x00
                  next_screen
00000f  00                DCB      0x00
                  pointer_to_curr_screen
000010  00                DCB      0x00

                          AREA ||i.tft_printc||, COMGROUP=tft_printc, CODE, READONLY, ALIGN=2

                  tft_printc PROC
;;;448    
;;;449    void tft_printc(uint8_t x, uint8_t y, char * fp) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4603              MOV      r3,r0
000006  460c              MOV      r4,r1
;;;450    	uint8_t i = x;
000008  4619              MOV      r1,r3
;;;451    	uint8_t j = y;
00000a  4620              MOV      r0,r4
;;;452    	uint8_t is_special = 0;
00000c  2500              MOVS     r5,#0
;;;453    	uint8_t is_highlighted = 0;
00000e  2600              MOVS     r6,#0
;;;454    	uint8_t is_underlined = 0;
000010  2700              MOVS     r7,#0
;;;455    	// uint8_t escaped = 0;
;;;456    	
;;;457    	while (*fp && i < char_max_x && j < char_max_y) {
000012  e093              B        |L241.316|
                  |L241.20|
;;;458    		switch(*fp) {
000014  f892c000          LDRB     r12,[r2,#0]
000018  f1bc0f5d          CMP      r12,#0x5d
00001c  d019              BEQ      |L241.82|
00001e  dc09              BGT      |L241.52|
000020  f1bc0f0a          CMP      r12,#0xa
000024  d00e              BEQ      |L241.68|
000026  f1bc0f0d          CMP      r12,#0xd
00002a  d00a              BEQ      |L241.66|
00002c  f1bc0f5b          CMP      r12,#0x5b
000030  d128              BNE      |L241.132|
000032  e00d              B        |L241.80|
                  |L241.52|
000034  f1bc0f7b          CMP      r12,#0x7b
000038  d017              BEQ      |L241.106|
00003a  f1bc0f7d          CMP      r12,#0x7d
00003e  d121              BNE      |L241.132|
000040  e014              B        |L241.108|
                  |L241.66|
;;;459    			case '\r':
;;;460    			case '\n':
000042  bf00              NOP      
                  |L241.68|
;;;461    			j++;
000044  f1000c01          ADD      r12,r0,#1
000048  f00c00ff          AND      r0,r12,#0xff
;;;462    			i = x;
00004c  4619              MOV      r1,r3
;;;463    			break;
00004e  e073              B        |L241.312|
                  |L241.80|
;;;464    			case '[':
;;;465    			case ']':
000050  bf00              NOP      
                  |L241.82|
;;;466    			is_special = (*fp == '[');
000052  f892c000          LDRB     r12,[r2,#0]
000056  f1bc0f5b          CMP      r12,#0x5b
00005a  d102              BNE      |L241.98|
00005c  f04f0c01          MOV      r12,#1
000060  e001              B        |L241.102|
                  |L241.98|
000062  f04f0c00          MOV      r12,#0
                  |L241.102|
000066  4665              MOV      r5,r12
;;;467    			break;
000068  e066              B        |L241.312|
                  |L241.106|
;;;468    			case '{':
;;;469    			case '}':
00006a  bf00              NOP      
                  |L241.108|
;;;470    			is_highlighted = (*fp == '{');
00006c  f892c000          LDRB     r12,[r2,#0]
000070  f1bc0f7b          CMP      r12,#0x7b
000074  d102              BNE      |L241.124|
000076  f04f0c01          MOV      r12,#1
00007a  e001              B        |L241.128|
                  |L241.124|
00007c  f04f0c00          MOV      r12,#0
                  |L241.128|
000080  4666              MOV      r6,r12
;;;471    			break;
000082  e059              B        |L241.312|
                  |L241.132|
;;;472    			// case '|':
;;;473    			// is_underlined = !is_underlined;
;;;474    			// break;
;;;475    			default:
;;;476    			text_buf[cur_screen][i][j] = ((*fp) | (is_underlined ? 0x80 : 0x00));
000084  f892c000          LDRB     r12,[r2,#0]
000088  b117              CBZ      r7,|L241.144|
00008a  f04f0880          MOV      r8,#0x80
00008e  e001              B        |L241.148|
                  |L241.144|
000090  f04f0800          MOV      r8,#0
                  |L241.148|
000094  ea4c0c08          ORR      r12,r12,r8
000098  f8df80c8          LDR      r8,|L241.356|
00009c  f8988000          LDRB     r8,[r8,#0]  ; cur_screen
0000a0  eb0809c8          ADD      r9,r8,r8,LSL #3
0000a4  eb091808          ADD      r8,r9,r8,LSL #4
0000a8  f8df90bc          LDR      r9,|L241.360|
0000ac  eb091848          ADD      r8,r9,r8,LSL #5
0000b0  eb010981          ADD      r9,r1,r1,LSL #2
0000b4  eb080889          ADD      r8,r8,r9,LSL #2
0000b8  f808c000          STRB     r12,[r8,r0]
;;;477    			text_color_buf[cur_screen][i][j] = is_special     ? curr_text_color_sp   : curr_text_color;
0000bc  b125              CBZ      r5,|L241.200|
0000be  f8dfc0ac          LDR      r12,|L241.364|
0000c2  f8bcc000          LDRH     r12,[r12,#0]  ; curr_text_color_sp
0000c6  e003              B        |L241.208|
                  |L241.200|
0000c8  f8dfc0a4          LDR      r12,|L241.368|
0000cc  f8bcc000          LDRH     r12,[r12,#0]  ; curr_text_color
                  |L241.208|
0000d0  f8df8090          LDR      r8,|L241.356|
0000d4  f8988000          LDRB     r8,[r8,#0]  ; cur_screen
0000d8  eb0809c8          ADD      r9,r8,r8,LSL #3
0000dc  eb091808          ADD      r8,r9,r8,LSL #4
0000e0  f8df9090          LDR      r9,|L241.372|
0000e4  eb091888          ADD      r8,r9,r8,LSL #6
0000e8  eb010981          ADD      r9,r1,r1,LSL #2
0000ec  eb0808c9          ADD      r8,r8,r9,LSL #3
0000f0  f828c010          STRH     r12,[r8,r0,LSL #1]
;;;478    			bg_color_buf[cur_screen][i++][j] = is_highlighted ? curr_highlight_color : curr_bg_color;
0000f4  b126              CBZ      r6,|L241.256|
0000f6  f8dfc080          LDR      r12,|L241.376|
0000fa  f8bc9000          LDRH     r9,[r12,#0]  ; curr_highlight_color
0000fe  e003              B        |L241.264|
                  |L241.256|
000100  f8dfc078          LDR      r12,|L241.380|
000104  f8bc9000          LDRH     r9,[r12,#0]  ; curr_bg_color
                  |L241.264|
000108  f8dfc058          LDR      r12,|L241.356|
00010c  f89cc000          LDRB     r12,[r12,#0]  ; cur_screen
000110  eb0c08cc          ADD      r8,r12,r12,LSL #3
000114  eb081c0c          ADD      r12,r8,r12,LSL #4
000118  f8df8064          LDR      r8,|L241.384|
00011c  eb081a8c          ADD      r10,r8,r12,LSL #6
000120  468c              MOV      r12,r1
000122  f1010801          ADD      r8,r1,#1
000126  f00801ff          AND      r1,r8,#0xff
00012a  eb0c0c8c          ADD      r12,r12,r12,LSL #2
00012e  eb0a0ccc          ADD      r12,r10,r12,LSL #3
000132  f82c9010          STRH     r9,[r12,r0,LSL #1]
;;;479    			break;
000136  bf00              NOP      
                  |L241.312|
000138  bf00              NOP                            ;463
;;;480    		}
;;;481    		fp++;
00013a  1c52              ADDS     r2,r2,#1
                  |L241.316|
00013c  f892c000          LDRB     r12,[r2,#0]           ;457
000140  f1bc0f00          CMP      r12,#0                ;457
000144  d00c              BEQ      |L241.352|
000146  f8dfc03c          LDR      r12,|L241.388|
00014a  f89cc000          LDRB     r12,[r12,#0]          ;457  ; char_max_x
00014e  4561              CMP      r1,r12                ;457
000150  da06              BGE      |L241.352|
000152  f8dfc034          LDR      r12,|L241.392|
000156  f89cc000          LDRB     r12,[r12,#0]          ;457  ; char_max_y
00015a  4560              CMP      r0,r12                ;457
00015c  f6ffaf5a          BLT      |L241.20|
                  |L241.352|
;;;482    	}
;;;483    }
000160  e8bd87f0          POP      {r4-r10,pc}
;;;484    
                          ENDP

                  |L241.356|
                          DCD      cur_screen
                  |L241.360|
                          DCD      text_buf
                  |L241.364|
                          DCD      curr_text_color_sp
                  |L241.368|
                          DCD      curr_text_color
                  |L241.372|
                          DCD      text_color_buf
                  |L241.376|
                          DCD      curr_highlight_color
                  |L241.380|
                          DCD      curr_bg_color
                  |L241.384|
                          DCD      bg_color_buf
                  |L241.388|
                          DCD      char_max_x
                  |L241.392|
                          DCD      char_max_y

;*** Start embedded assembler ***

#line 1 "..\\Src\\lcd_main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_lcd_main_c_e39c11c5____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___10_lcd_main_c_e39c11c5____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_lcd_main_c_e39c11c5____REVSH|
#line 402
|__asm___10_lcd_main_c_e39c11c5____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_lcd_main_c_e39c11c5____RRX|
#line 587
|__asm___10_lcd_main_c_e39c11c5____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
