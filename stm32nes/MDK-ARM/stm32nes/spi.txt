; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\spi.o --depend=stm32nes\spi.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\spi.crf ../Src/spi.c]
                          THUMB

                          AREA ||i.LL_AHB1_GRP1_EnableClock||, CODE, READONLY, ALIGN=2

                  LL_AHB1_GRP1_EnableClock PROC
;;;426    */
;;;427    __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
000000  b508              PUSH     {r3,lr}
;;;428    {
;;;429      __IO uint32_t tmpreg;
;;;430      SET_BIT(RCC->AHB1ENR, Periphs);
000002  4905              LDR      r1,|L1.24|
000004  6809              LDR      r1,[r1,#0]
000006  4301              ORRS     r1,r1,r0
000008  4a03              LDR      r2,|L1.24|
00000a  6011              STR      r1,[r2,#0]
;;;431      /* Delay after an RCC peripheral clock enabling */
;;;432      tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  4001              ANDS     r1,r1,r0
000012  9100              STR      r1,[sp,#0]
;;;433      (void)tmpreg;
000014  bf00              NOP      
;;;434    }
000016  bd08              POP      {r3,pc}
;;;435    
                          ENDP

                  |L1.24|
                          DCD      0x40023830

                          AREA ||i.LL_APB2_GRP1_EnableClock||, CODE, READONLY, ALIGN=2

                  LL_APB2_GRP1_EnableClock PROC
;;;1721   */
;;;1722   __STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
000000  b508              PUSH     {r3,lr}
;;;1723   {
;;;1724     __IO uint32_t tmpreg;
;;;1725     SET_BIT(RCC->APB2ENR, Periphs);
000002  4905              LDR      r1,|L2.24|
000004  6809              LDR      r1,[r1,#0]
000006  4301              ORRS     r1,r1,r0
000008  4a03              LDR      r2,|L2.24|
00000a  6011              STR      r1,[r2,#0]
;;;1726     /* Delay after an RCC peripheral clock enabling */
;;;1727     tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  4001              ANDS     r1,r1,r0
000012  9100              STR      r1,[sp,#0]
;;;1728     (void)tmpreg;
000014  bf00              NOP      
;;;1729   }
000016  bd08              POP      {r3,pc}
;;;1730   
                          ENDP

                  |L2.24|
                          DCD      0x40023844

                          AREA ||i.LL_DMA_DisableFifoMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_DisableFifoMode PROC
;;;1282     */
;;;1283   __STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
000000  4a05              LDR      r2,|L3.24|
;;;1284   {
;;;1285     CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
000002  5c52              LDRB     r2,[r2,r1]
000004  4402              ADD      r2,r2,r0
000006  6952              LDR      r2,[r2,#0x14]
000008  f0220204          BIC      r2,r2,#4
00000c  4b02              LDR      r3,|L3.24|
00000e  5c5b              LDRB     r3,[r3,r1]
000010  4403              ADD      r3,r3,r0
000012  615a              STR      r2,[r3,#0x14]
;;;1286   }
000014  4770              BX       lr
;;;1287   
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetChannelSelection||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetChannelSelection PROC
;;;1025     */
;;;1026   __STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
000000  b510              PUSH     {r4,lr}
;;;1027   {
;;;1028     MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
000002  4b05              LDR      r3,|L4.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f0236360          BIC      r3,r3,#0xe000000
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L4.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;1029   }
000014  bd10              POP      {r4,pc}
;;;1030   
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetDataTransferDirection||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetDataTransferDirection PROC
;;;601      */
;;;602    __STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
000000  b510              PUSH     {r4,lr}
;;;603    {
;;;604      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
000002  4b05              LDR      r3,|L5.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f02303c0          BIC      r3,r3,#0xc0
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L5.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;605    }
000014  bd10              POP      {r4,pc}
;;;606    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetMemoryIncMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetMemoryIncMode PROC
;;;741      */
;;;742    __STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
000000  b510              PUSH     {r4,lr}
;;;743    {
;;;744      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
000002  4b05              LDR      r3,|L6.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4236380          BIC      r3,r3,#0x400
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L6.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;745    }
000014  bd10              POP      {r4,pc}
;;;746    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetMemorySize||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetMemorySize PROC
;;;834      */
;;;835    __STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
000000  b510              PUSH     {r4,lr}
;;;836    {
;;;837      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
000002  4b05              LDR      r3,|L7.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f42343c0          BIC      r3,r3,#0x6000
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L7.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;838    }
000014  bd10              POP      {r4,pc}
;;;839    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetMode PROC
;;;649      */
;;;650    __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
000000  b510              PUSH     {r4,lr}
;;;651    {
;;;652      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
000002  4b05              LDR      r3,|L8.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4237390          BIC      r3,r3,#0x120
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L8.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;653    }
000014  bd10              POP      {r4,pc}
;;;654    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetPeriphIncMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetPeriphIncMode PROC
;;;696      */
;;;697    __STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
000000  b510              PUSH     {r4,lr}
;;;698    {
;;;699      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
000002  4b05              LDR      r3,|L9.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4237300          BIC      r3,r3,#0x200
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L9.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;700    }
000014  bd10              POP      {r4,pc}
;;;701    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetPeriphSize||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetPeriphSize PROC
;;;787      */
;;;788    __STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
000000  b510              PUSH     {r4,lr}
;;;789    {
;;;790      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
000002  4b05              LDR      r3,|L10.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f42353c0          BIC      r3,r3,#0x1800
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L10.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;791    }
000014  bd10              POP      {r4,pc}
;;;792    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_SetStreamPriorityLevel||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetStreamPriorityLevel PROC
;;;927      */
;;;928    __STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
000000  b510              PUSH     {r4,lr}
;;;929    {
;;;930      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
000002  4b05              LDR      r3,|L11.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4233340          BIC      r3,r3,#0x30000
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L11.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;931    }
000014  bd10              POP      {r4,pc}
;;;932    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_SPI_SetStandard||, CODE, READONLY, ALIGN=1

                  LL_SPI_SetStandard PROC
;;;381      */
;;;382    __STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
000000  6842              LDR      r2,[r0,#4]
;;;383    {
;;;384      MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
000002  f0220210          BIC      r2,r2,#0x10
000006  430a              ORRS     r2,r2,r1
000008  6042              STR      r2,[r0,#4]
;;;385    }
00000a  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.MX_SPI1_Init||, CODE, READONLY, ALIGN=2

                  MX_SPI1_Init PROC
;;;47     /* SPI1 init function */
;;;48     void MX_SPI1_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;49     {
000002  b091              SUB      sp,sp,#0x44
;;;50       LL_SPI_InitTypeDef SPI_InitStruct = {0};
000004  2128              MOVS     r1,#0x28
000006  a807              ADD      r0,sp,#0x1c
000008  f7fffffe          BL       __aeabi_memclr4
;;;51     
;;;52       LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
00000c  2118              MOVS     r1,#0x18
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       __aeabi_memclr4
;;;53       /* Peripheral clock enable */
;;;54       LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
000014  f44f5080          MOV      r0,#0x1000
000018  f7fffffe          BL       LL_APB2_GRP1_EnableClock
;;;55       
;;;56       LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       LL_AHB1_GRP1_EnableClock
;;;57       /**SPI1 GPIO Configuration  
;;;58       PA5   ------> SPI1_SCK
;;;59       PA7   ------> SPI1_MOSI 
;;;60       */
;;;61       GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_SDA_Pin;
000022  20a0              MOVS     r0,#0xa0
000024  9001              STR      r0,[sp,#4]
;;;62       GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
000026  2002              MOVS     r0,#2
000028  9002              STR      r0,[sp,#8]
;;;63       GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
00002a  2003              MOVS     r0,#3
00002c  9003              STR      r0,[sp,#0xc]
;;;64       GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
00002e  2000              MOVS     r0,#0
000030  9004              STR      r0,[sp,#0x10]
;;;65       GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
000032  9005              STR      r0,[sp,#0x14]
;;;66       GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
000034  2005              MOVS     r0,#5
000036  9006              STR      r0,[sp,#0x18]
;;;67       LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000038  a901              ADD      r1,sp,#4
00003a  4844              LDR      r0,|L13.332|
00003c  f7fffffe          BL       LL_GPIO_Init
;;;68     
;;;69       /* SPI1 DMA Init */
;;;70       
;;;71       /* SPI1_TX Init */
;;;72       LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_5, LL_DMA_CHANNEL_3);
000040  f04f62c0          MOV      r2,#0x6000000
000044  2105              MOVS     r1,#5
000046  4842              LDR      r0,|L13.336|
000048  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;73     
;;;74       LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
00004c  2240              MOVS     r2,#0x40
00004e  2105              MOVS     r1,#5
000050  483f              LDR      r0,|L13.336|
000052  f7fffffe          BL       LL_DMA_SetDataTransferDirection
;;;75     
;;;76       LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_5, LL_DMA_PRIORITY_VERYHIGH);
000056  f44f3240          MOV      r2,#0x30000
00005a  2105              MOVS     r1,#5
00005c  483c              LDR      r0,|L13.336|
00005e  f7fffffe          BL       LL_DMA_SetStreamPriorityLevel
;;;77     
;;;78       LL_DMA_SetMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MODE_NORMAL);
000062  2200              MOVS     r2,#0
000064  2105              MOVS     r1,#5
000066  483a              LDR      r0,|L13.336|
000068  f7fffffe          BL       LL_DMA_SetMode
;;;79     
;;;80       LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
00006c  2200              MOVS     r2,#0
00006e  2105              MOVS     r1,#5
000070  4837              LDR      r0,|L13.336|
000072  f7fffffe          BL       LL_DMA_SetPeriphIncMode
;;;81     
;;;82       LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
000076  f44f6280          MOV      r2,#0x400
00007a  2105              MOVS     r1,#5
00007c  4834              LDR      r0,|L13.336|
00007e  f7fffffe          BL       LL_DMA_SetMemoryIncMode
;;;83     
;;;84       LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_BYTE);
000082  2200              MOVS     r2,#0
000084  2105              MOVS     r1,#5
000086  4832              LDR      r0,|L13.336|
000088  f7fffffe          BL       LL_DMA_SetPeriphSize
;;;85     
;;;86       LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_BYTE);
00008c  2200              MOVS     r2,#0
00008e  2105              MOVS     r1,#5
000090  482f              LDR      r0,|L13.336|
000092  f7fffffe          BL       LL_DMA_SetMemorySize
;;;87     
;;;88       LL_DMA_EnableFifoMode(DMA2, LL_DMA_STREAM_5);
000096  482e              LDR      r0,|L13.336|
000098  2105              MOVS     r1,#5
00009a  4a2e              LDR      r2,|L13.340|
00009c  5c52              LDRB     r2,[r2,r1]
00009e  4402              ADD      r2,r2,r0
0000a0  6952              LDR      r2,[r2,#0x14]
0000a2  f0420204          ORR      r2,r2,#4
0000a6  4b2b              LDR      r3,|L13.340|
0000a8  5c5b              LDRB     r3,[r3,r1]
0000aa  4403              ADD      r3,r3,r0
0000ac  615a              STR      r2,[r3,#0x14]
0000ae  bf00              NOP      
;;;89     
;;;90       LL_DMA_SetFIFOThreshold(DMA2, LL_DMA_STREAM_5, LL_DMA_FIFOTHRESHOLD_FULL);
0000b0  2203              MOVS     r2,#3
0000b2  4b28              LDR      r3,|L13.340|
0000b4  5c5b              LDRB     r3,[r3,r1]
0000b6  4403              ADD      r3,r3,r0
0000b8  695b              LDR      r3,[r3,#0x14]
0000ba  f0230303          BIC      r3,r3,#3
0000be  4313              ORRS     r3,r3,r2
0000c0  4c24              LDR      r4,|L13.340|
0000c2  5c64              LDRB     r4,[r4,r1]
0000c4  4404              ADD      r4,r4,r0
0000c6  6163              STR      r3,[r4,#0x14]
0000c8  bf00              NOP      
;;;91     
;;;92       LL_DMA_SetMemoryBurstxfer(DMA2, LL_DMA_STREAM_5, LL_DMA_MBURST_INC16);
0000ca  05d2              LSLS     r2,r2,#23
0000cc  4b21              LDR      r3,|L13.340|
0000ce  5c5b              LDRB     r3,[r3,r1]
0000d0  58c3              LDR      r3,[r0,r3]
0000d2  f02373c0          BIC      r3,r3,#0x1800000
0000d6  4313              ORRS     r3,r3,r2
0000d8  4c1e              LDR      r4,|L13.340|
0000da  5c64              LDRB     r4,[r4,r1]
0000dc  5103              STR      r3,[r0,r4]
0000de  bf00              NOP      
;;;93     
;;;94       LL_DMA_SetPeriphBurstxfer(DMA2, LL_DMA_STREAM_5, LL_DMA_PBURST_SINGLE);
0000e0  2200              MOVS     r2,#0
0000e2  4b1c              LDR      r3,|L13.340|
0000e4  5c5b              LDRB     r3,[r3,r1]
0000e6  58c3              LDR      r3,[r0,r3]
0000e8  f42303c0          BIC      r3,r3,#0x600000
0000ec  4313              ORRS     r3,r3,r2
0000ee  4c19              LDR      r4,|L13.340|
0000f0  5c64              LDRB     r4,[r4,r1]
0000f2  5103              STR      r3,[r0,r4]
0000f4  bf00              NOP      
;;;95     
;;;96       /* SPI1 interrupt Init */
;;;97       NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
0000f6  f7fffffe          BL       NVIC_GetPriorityGrouping
0000fa  4605              MOV      r5,r0
0000fc  2200              MOVS     r2,#0
0000fe  4611              MOV      r1,r2
000100  f7fffffe          BL       NVIC_EncodePriority
000104  4604              MOV      r4,r0
000106  4621              MOV      r1,r4
000108  2023              MOVS     r0,#0x23
00010a  f7fffffe          BL       NVIC_SetPriority
;;;98       NVIC_EnableIRQ(SPI1_IRQn);
00010e  2023              MOVS     r0,#0x23
000110  f7fffffe          BL       NVIC_EnableIRQ
;;;99     
;;;100      SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
000114  2000              MOVS     r0,#0
000116  9007              STR      r0,[sp,#0x1c]
;;;101      SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
000118  f44f7082          MOV      r0,#0x104
00011c  9008              STR      r0,[sp,#0x20]
;;;102      SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
00011e  2000              MOVS     r0,#0
000120  9009              STR      r0,[sp,#0x24]
;;;103      SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
000122  900a              STR      r0,[sp,#0x28]
;;;104      SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
000124  900b              STR      r0,[sp,#0x2c]
;;;105      SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
000126  f44f7000          MOV      r0,#0x200
00012a  900c              STR      r0,[sp,#0x30]
;;;106      SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
00012c  2000              MOVS     r0,#0
00012e  900d              STR      r0,[sp,#0x34]
;;;107      SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
000130  900e              STR      r0,[sp,#0x38]
;;;108      SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
000132  900f              STR      r0,[sp,#0x3c]
;;;109      SPI_InitStruct.CRCPoly = 10;
000134  200a              MOVS     r0,#0xa
000136  9010              STR      r0,[sp,#0x40]
;;;110      LL_SPI_Init(SPI1, &SPI_InitStruct);
000138  a907              ADD      r1,sp,#0x1c
00013a  4807              LDR      r0,|L13.344|
00013c  f7fffffe          BL       LL_SPI_Init
;;;111      LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
000140  2100              MOVS     r1,#0
000142  4805              LDR      r0,|L13.344|
000144  f7fffffe          BL       LL_SPI_SetStandard
;;;112    
;;;113    }
000148  b011              ADD      sp,sp,#0x44
00014a  bd30              POP      {r4,r5,pc}
;;;114    /* SPI5 init function */
                          ENDP

                  |L13.332|
                          DCD      0x40020000
                  |L13.336|
                          DCD      0x40026400
                  |L13.340|
                          DCD      STREAM_OFFSET_TAB
                  |L13.344|
                          DCD      0x40013000

                          AREA ||i.MX_SPI5_Init||, CODE, READONLY, ALIGN=2

                  MX_SPI5_Init PROC
;;;114    /* SPI5 init function */
;;;115     void MX_SPI5_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;116    {
000002  b091              SUB      sp,sp,#0x44
;;;117      LL_SPI_InitTypeDef SPI_InitStruct = {0};
000004  2128              MOVS     r1,#0x28
000006  a807              ADD      r0,sp,#0x1c
000008  f7fffffe          BL       __aeabi_memclr4
;;;118    
;;;119      LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
00000c  2118              MOVS     r1,#0x18
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       __aeabi_memclr4
;;;120      /* Peripheral clock enable */
;;;121      LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
000014  f44f1080          MOV      r0,#0x100000
000018  f7fffffe          BL       LL_APB2_GRP1_EnableClock
;;;122    	
;;;123      
;;;124      LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
00001c  2020              MOVS     r0,#0x20
00001e  f7fffffe          BL       LL_AHB1_GRP1_EnableClock
;;;125      /**SPI5 GPIO Configuration  
;;;126      PF7   ------> SPI5_SCK
;;;127      PF8   ------> SPI5_MISO
;;;128      PF9   ------> SPI5_MPSI
;;;129      */
;;;130      GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
000022  f44f7060          MOV      r0,#0x380
000026  9001              STR      r0,[sp,#4]
;;;131      GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
000028  2002              MOVS     r0,#2
00002a  9002              STR      r0,[sp,#8]
;;;132      GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
00002c  2003              MOVS     r0,#3
00002e  9003              STR      r0,[sp,#0xc]
;;;133      GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
000030  2000              MOVS     r0,#0
000032  9004              STR      r0,[sp,#0x10]
;;;134      GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
000034  9005              STR      r0,[sp,#0x14]
;;;135      GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
000036  2005              MOVS     r0,#5
000038  9006              STR      r0,[sp,#0x18]
;;;136      LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
00003a  a901              ADD      r1,sp,#4
00003c  4845              LDR      r0,|L14.340|
00003e  f7fffffe          BL       LL_GPIO_Init
;;;137    
;;;138      /* SPI5 DMA Init */
;;;139      
;;;140      /* SPI5_RX Init */
;;;141      LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_3, LL_DMA_CHANNEL_2);
000042  f04f6280          MOV      r2,#0x4000000
000046  2103              MOVS     r1,#3
000048  4843              LDR      r0,|L14.344|
00004a  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;142    
;;;143      LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
00004e  2200              MOVS     r2,#0
000050  2103              MOVS     r1,#3
000052  4841              LDR      r0,|L14.344|
000054  f7fffffe          BL       LL_DMA_SetDataTransferDirection
;;;144    
;;;145      LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
000058  2200              MOVS     r2,#0
00005a  2103              MOVS     r1,#3
00005c  483e              LDR      r0,|L14.344|
00005e  f7fffffe          BL       LL_DMA_SetStreamPriorityLevel
;;;146    
;;;147      LL_DMA_SetMode(DMA2, LL_DMA_STREAM_3, LL_DMA_MODE_NORMAL);
000062  2200              MOVS     r2,#0
000064  2103              MOVS     r1,#3
000066  483c              LDR      r0,|L14.344|
000068  f7fffffe          BL       LL_DMA_SetMode
;;;148    
;;;149      LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
00006c  2200              MOVS     r2,#0
00006e  2103              MOVS     r1,#3
000070  4839              LDR      r0,|L14.344|
000072  f7fffffe          BL       LL_DMA_SetPeriphIncMode
;;;150    
;;;151      LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
000076  f44f6280          MOV      r2,#0x400
00007a  2103              MOVS     r1,#3
00007c  4836              LDR      r0,|L14.344|
00007e  f7fffffe          BL       LL_DMA_SetMemoryIncMode
;;;152    
;;;153      LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
000082  2200              MOVS     r2,#0
000084  2103              MOVS     r1,#3
000086  4834              LDR      r0,|L14.344|
000088  f7fffffe          BL       LL_DMA_SetPeriphSize
;;;154    
;;;155      LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
00008c  2200              MOVS     r2,#0
00008e  2103              MOVS     r1,#3
000090  4831              LDR      r0,|L14.344|
000092  f7fffffe          BL       LL_DMA_SetMemorySize
;;;156    
;;;157      LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_3);
000096  2103              MOVS     r1,#3
000098  482f              LDR      r0,|L14.344|
00009a  f7fffffe          BL       LL_DMA_DisableFifoMode
;;;158    
;;;159      /* SPI5_TX Init */
;;;160      LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
00009e  f04f6280          MOV      r2,#0x4000000
0000a2  2104              MOVS     r1,#4
0000a4  482c              LDR      r0,|L14.344|
0000a6  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;161    
;;;162      LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
0000aa  2240              MOVS     r2,#0x40
0000ac  2104              MOVS     r1,#4
0000ae  482a              LDR      r0,|L14.344|
0000b0  f7fffffe          BL       LL_DMA_SetDataTransferDirection
;;;163    
;;;164      LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
0000b4  2200              MOVS     r2,#0
0000b6  2104              MOVS     r1,#4
0000b8  4827              LDR      r0,|L14.344|
0000ba  f7fffffe          BL       LL_DMA_SetStreamPriorityLevel
;;;165    
;;;166      LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
0000be  2200              MOVS     r2,#0
0000c0  2104              MOVS     r1,#4
0000c2  4825              LDR      r0,|L14.344|
0000c4  f7fffffe          BL       LL_DMA_SetMode
;;;167    
;;;168      LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
0000c8  2200              MOVS     r2,#0
0000ca  2104              MOVS     r1,#4
0000cc  4822              LDR      r0,|L14.344|
0000ce  f7fffffe          BL       LL_DMA_SetPeriphIncMode
;;;169    
;;;170      LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
0000d2  f44f6280          MOV      r2,#0x400
0000d6  2104              MOVS     r1,#4
0000d8  481f              LDR      r0,|L14.344|
0000da  f7fffffe          BL       LL_DMA_SetMemoryIncMode
;;;171    
;;;172      LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
0000de  2200              MOVS     r2,#0
0000e0  2104              MOVS     r1,#4
0000e2  481d              LDR      r0,|L14.344|
0000e4  f7fffffe          BL       LL_DMA_SetPeriphSize
;;;173    
;;;174      LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
0000e8  2200              MOVS     r2,#0
0000ea  2104              MOVS     r1,#4
0000ec  481a              LDR      r0,|L14.344|
0000ee  f7fffffe          BL       LL_DMA_SetMemorySize
;;;175    
;;;176      LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
0000f2  2104              MOVS     r1,#4
0000f4  4818              LDR      r0,|L14.344|
0000f6  f7fffffe          BL       LL_DMA_DisableFifoMode
;;;177    
;;;178      /* SPI2 interrupt Init */
;;;179      NVIC_SetPriority(SPI5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
0000fa  f7fffffe          BL       NVIC_GetPriorityGrouping
0000fe  4605              MOV      r5,r0
000100  2200              MOVS     r2,#0
000102  4611              MOV      r1,r2
000104  f7fffffe          BL       NVIC_EncodePriority
000108  4604              MOV      r4,r0
00010a  4621              MOV      r1,r4
00010c  2055              MOVS     r0,#0x55
00010e  f7fffffe          BL       NVIC_SetPriority
;;;180      NVIC_EnableIRQ(SPI5_IRQn);
000112  2055              MOVS     r0,#0x55
000114  f7fffffe          BL       NVIC_EnableIRQ
;;;181    
;;;182      SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
000118  2000              MOVS     r0,#0
00011a  9007              STR      r0,[sp,#0x1c]
;;;183      SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
00011c  f44f7082          MOV      r0,#0x104
000120  9008              STR      r0,[sp,#0x20]
;;;184      SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
000122  2000              MOVS     r0,#0
000124  9009              STR      r0,[sp,#0x24]
;;;185      SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
000126  900a              STR      r0,[sp,#0x28]
;;;186      SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
000128  900b              STR      r0,[sp,#0x2c]
;;;187      SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
00012a  f44f7000          MOV      r0,#0x200
00012e  900c              STR      r0,[sp,#0x30]
;;;188      SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
000130  2018              MOVS     r0,#0x18
000132  900d              STR      r0,[sp,#0x34]
;;;189      SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
000134  2000              MOVS     r0,#0
000136  900e              STR      r0,[sp,#0x38]
;;;190      SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
000138  900f              STR      r0,[sp,#0x3c]
;;;191      SPI_InitStruct.CRCPoly = 10;
00013a  200a              MOVS     r0,#0xa
00013c  9010              STR      r0,[sp,#0x40]
;;;192      LL_SPI_Init(SPI5, &SPI_InitStruct);
00013e  a907              ADD      r1,sp,#0x1c
000140  4806              LDR      r0,|L14.348|
000142  f7fffffe          BL       LL_SPI_Init
;;;193      LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
000146  2100              MOVS     r1,#0
000148  4804              LDR      r0,|L14.348|
00014a  f7fffffe          BL       LL_SPI_SetStandard
;;;194    
;;;195    }
00014e  b011              ADD      sp,sp,#0x44
000150  bd30              POP      {r4,r5,pc}
;;;196    
                          ENDP

000152  0000              DCW      0x0000
                  |L14.340|
                          DCD      0x40021400
                  |L14.344|
                          DCD      0x40026400
                  |L14.348|
                          DCD      0x40015000

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1625    */
;;;1626   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1627   {
;;;1628     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0942              LSRS     r2,r0,#5
00000a  0092              LSLS     r2,r2,#2
00000c  f10222e0          ADD      r2,r2,#0xe000e000
000010  f8c21100          STR      r1,[r2,#0x100]
;;;1629   }
000014  4770              BX       lr
;;;1630   
                          ENDP


                          AREA ||i.NVIC_EncodePriority||, CODE, READONLY, ALIGN=1

                  NVIC_EncodePriority PROC
;;;1744    */
;;;1745   __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1746   {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;1747     uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
000006  f0030107          AND      r1,r3,#7
;;;1748     uint32_t PreemptPriorityBits;
;;;1749     uint32_t SubPriorityBits;
;;;1750   
;;;1751     PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
00000a  f1c10007          RSB      r0,r1,#7
00000e  2804              CMP      r0,#4
000010  d901              BLS      |L16.22|
000012  2004              MOVS     r0,#4
000014  e001              B        |L16.26|
                  |L16.22|
000016  f1c10007          RSB      r0,r1,#7
                  |L16.26|
00001a  4606              MOV      r6,r0
;;;1752     SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
00001c  1d08              ADDS     r0,r1,#4
00001e  2807              CMP      r0,#7
000020  d201              BCS      |L16.38|
000022  2000              MOVS     r0,#0
000024  e000              B        |L16.40|
                  |L16.38|
000026  1ec8              SUBS     r0,r1,#3
                  |L16.40|
000028  4605              MOV      r5,r0
;;;1753   
;;;1754     return (
00002a  2001              MOVS     r0,#1
00002c  40b0              LSLS     r0,r0,r6
00002e  1e40              SUBS     r0,r0,#1
000030  4020              ANDS     r0,r0,r4
000032  40a8              LSLS     r0,r0,r5
000034  2701              MOVS     r7,#1
000036  40af              LSLS     r7,r7,r5
000038  1e7f              SUBS     r7,r7,#1
00003a  4017              ANDS     r7,r7,r2
00003c  4338              ORRS     r0,r0,r7
;;;1755              ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
;;;1756              ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
;;;1757            );
;;;1758   }
00003e  bdf0              POP      {r4-r7,pc}
;;;1759   
                          ENDP


                          AREA ||i.NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  NVIC_GetPriorityGrouping PROC
;;;1614    */
;;;1615   __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L17.12|
;;;1616   {
;;;1617     return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;1618   }
000008  4770              BX       lr
;;;1619   
                          ENDP

00000a  0000              DCW      0x0000
                  |L17.12|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;1697    */
;;;1698   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1699   {
;;;1700     if ((int32_t)(IRQn) < 0)
000002  2800              CMP      r0,#0
000004  da07              BGE      |L18.22|
;;;1701     {
;;;1702       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e14              LSRS     r4,r2,#24
00000a  4a05              LDR      r2,|L18.32|
00000c  f000030f          AND      r3,r0,#0xf
000010  1f1b              SUBS     r3,r3,#4
000012  54d4              STRB     r4,[r2,r3]
000014  e003              B        |L18.30|
                  |L18.22|
;;;1703     }
;;;1704     else
;;;1705     {
;;;1706       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000016  070a              LSLS     r2,r1,#28
000018  0e13              LSRS     r3,r2,#24
00001a  4a02              LDR      r2,|L18.36|
00001c  5413              STRB     r3,[r2,r0]
                  |L18.30|
;;;1707     }
;;;1708   }
00001e  bd10              POP      {r4,pc}
;;;1709   
                          ENDP

                  |L18.32|
                          DCD      0xe000ed18
                  |L18.36|
                          DCD      0xe000e400

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8
                  aRCC_PLLSAIDIVRPrescTable
000008  02040810          DCB      0x02,0x04,0x08,0x10
                  OFFSET_TAB_CCMRx
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  040404            DCB      0x04,0x04,0x04
                  SHIFT_TAB_OCxx
000013  00                DCB      0x00
000014  00080000          DCB      0x00,0x08,0x00,0x00
000018  0008              DCB      0x00,0x08
                  SHIFT_TAB_ICxx
00001a  0000              DCB      0x00,0x00
00001c  08000000          DCB      0x08,0x00,0x00,0x00
000020  08                DCB      0x08
                  SHIFT_TAB_CCxP
000021  000204            DCB      0x00,0x02,0x04
000024  06080a0c          DCB      0x06,0x08,0x0a,0x0c
                  SHIFT_TAB_OISx
000028  00010203          DCB      0x00,0x01,0x02,0x03
00002c  040506            DCB      0x04,0x05,0x06

;*** Start embedded assembler ***

#line 1 "../Src/spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_a276374e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___5_spi_c_a276374e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_a276374e____REVSH|
#line 402
|__asm___5_spi_c_a276374e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_a276374e____RRX|
#line 587
|__asm___5_spi_c_a276374e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
