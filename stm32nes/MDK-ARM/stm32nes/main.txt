; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\main.o --depend=stm32nes\main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;417      */
;;;418    void Error_Handler(void)
000000  4770              BX       lr
;;;419    {
;;;420      /* USER CODE BEGIN Error_Handler_Debug */
;;;421      /* User can add his own implementation to report the HAL error return state */
;;;422    
;;;423      /* USER CODE END Error_Handler_Debug */
;;;424    }
;;;425    
                          ENDP


                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;407    }
;;;408    uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L2.8|
;;;409    {
;;;410      return __ticks;
000002  6840              LDR      r0,[r0,#4]  ; __ticks
;;;411    }
000004  4770              BX       lr
;;;412    /* USER CODE END 4 */
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||area_number.14||

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;402    volatile uint8_t  __tickf = 1;
;;;403    void SysTick_Handler(void) {
000000  4806              LDR      r0,|L3.28|
;;;404    	__ticks++;
000002  6841              LDR      r1,[r0,#4]  ; __ticks
000004  1c49              ADDS     r1,r1,#1
000006  6041              STR      r1,[r0,#4]  ; __ticks
;;;405    	__tickf = 0;
000008  2100              MOVS     r1,#0
00000a  7001              STRB     r1,[r0,#0]
;;;406    	if (__delay) __delay--;
00000c  6881              LDR      r1,[r0,#8]  ; __delay
00000e  2900              CMP      r1,#0                 ;403
;;;407    }
000010  bf08              IT       EQ
000012  4770              BXEQ     lr
000014  6881              LDR      r1,[r0,#8]            ;406  ; __delay
000016  1e49              SUBS     r1,r1,#1              ;406
000018  6081              STR      r1,[r0,#8]            ;406  ; __delay
00001a  4770              BX       lr
;;;408    uint32_t HAL_GetTick(void)
                          ENDP

                  |L3.28|
                          DCD      ||area_number.14||

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;359      */
;;;360    void SystemClock_Config(void)
000000  482b              LDR      r0,|L4.176|
;;;361    {
000002  b510              PUSH     {r4,lr}
000004  6801              LDR      r1,[r0,#0]
000006  f021010f          BIC      r1,r1,#0xf
00000a  f0410105          ORR      r1,r1,#5
00000e  6001              STR      r1,[r0,#0]
000010  6800              LDR      r0,[r0,#0]
000012  4828              LDR      r0,|L4.180|
000014  6801              LDR      r1,[r0,#0]
000016  f4414140          ORR      r1,r1,#0xc000
00001a  6001              STR      r1,[r0,#0]
00001c  4826              LDR      r0,|L4.184|
00001e  6801              LDR      r1,[r0,#0]
000020  f4413180          ORR      r1,r1,#0x10000
000024  6001              STR      r1,[r0,#0]
                  |L4.38|
000026  6801              LDR      r1,[r0,#0]
000028  f4113f00          TST      r1,#0x20000
00002c  d0fb              BEQ      |L4.38|
00002e  4924              LDR      r1,|L4.192|
000030  4a22              LDR      r2,|L4.188|
000032  680b              LDR      r3,[r1,#0]
000034  f8dfc08c          LDR      r12,|L4.196|
000038  ea03030c          AND      r3,r3,r12
00003c  431a              ORRS     r2,r2,r3
00003e  600a              STR      r2,[r1,#0]
000040  680a              LDR      r2,[r1,#0]
000042  f4223240          BIC      r2,r2,#0x30000
000046  600a              STR      r2,[r1,#0]
000048  6801              LDR      r1,[r0,#0]
00004a  f0417180          ORR      r1,r1,#0x1000000
00004e  6001              STR      r1,[r0,#0]
                  |L4.80|
000050  6801              LDR      r1,[r0,#0]
000052  f0117f00          TST      r1,#0x2000000
000056  d0fb              BEQ      |L4.80|
000058  481b              LDR      r0,|L4.200|
00005a  6801              LDR      r1,[r0,#0]
00005c  f02101f0          BIC      r1,r1,#0xf0
000060  6001              STR      r1,[r0,#0]
000062  6801              LDR      r1,[r0,#0]
000064  f42151e0          BIC      r1,r1,#0x1c00
000068  f44151a0          ORR      r1,r1,#0x1400
00006c  6001              STR      r1,[r0,#0]
00006e  6801              LDR      r1,[r0,#0]
000070  f4214160          BIC      r1,r1,#0xe000
000074  f4414100          ORR      r1,r1,#0x8000
000078  6001              STR      r1,[r0,#0]
00007a  6801              LDR      r1,[r0,#0]
00007c  f0210103          BIC      r1,r1,#3
000080  f0410102          ORR      r1,r1,#2
000084  6001              STR      r1,[r0,#0]
                  |L4.134|
000086  6801              LDR      r1,[r0,#0]
000088  f001010c          AND      r1,r1,#0xc
;;;362      LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
;;;363    
;;;364      if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
;;;365      {
;;;366      Error_Handler();  
;;;367      }
;;;368      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
;;;369      LL_RCC_HSE_Enable();
;;;370    
;;;371       /* Wait till HSE is ready */
;;;372      while(LL_RCC_HSE_IsReady() != 1)
;;;373      {
;;;374        
;;;375      }
;;;376      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
;;;377      LL_RCC_PLL_Enable();
;;;378    
;;;379       /* Wait till PLL is ready */
;;;380      while(LL_RCC_PLL_IsReady() != 1)
;;;381      {
;;;382        
;;;383      }
;;;384      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
;;;385      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
;;;386      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
;;;387      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
;;;388    
;;;389       /* Wait till System clock is ready */
;;;390      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
00008c  2908              CMP      r1,#8
00008e  d1fa              BNE      |L4.134|
;;;391      {
;;;392      
;;;393      }
;;;394      LL_Init1msTick(168000000);
000090  4c0e              LDR      r4,|L4.204|
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       LL_Init1msTick
000098  f04f21e0          MOV      r1,#0xe000e000
00009c  6908              LDR      r0,[r1,#0x10]
00009e  f0400004          ORR      r0,r0,#4
0000a2  6108              STR      r0,[r1,#0x10]
;;;395      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
;;;396      LL_SetSystemCoreClock(168000000);
0000a4  4620              MOV      r0,r4
0000a6  e8bd4010          POP      {r4,lr}
0000aa  f7ffbffe          B.W      LL_SetSystemCoreClock
;;;397    }
;;;398    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      0x40023c00
                  |L4.180|
                          DCD      0x40007000
                  |L4.184|
                          DCD      0x40023800
                  |L4.188|
                          DCD      0x00405408
                  |L4.192|
                          DCD      0x40023804
                  |L4.196|
                          DCD      0xffbf8000
                  |L4.200|
                          DCD      0x40023808
                  |L4.204|
                          DCD      0x0a037a00

                          AREA ||i.joypad_assigned||, CODE, READONLY, ALIGN=2

                  joypad_assigned PROC
;;;104    }
;;;105    uint32_t joypad_assigned(uint8_t i) {
000000  2204              MOVS     r2,#4
;;;106      uint32_t mask = 0;
;;;107      if (joypad_assignments[idx_from_mask(BTN_R1)]    == i) mask |= BTN_R1;
000002  fab2f282          CLZ      r2,r2
000006  f1c20220          RSB      r2,r2,#0x20
00000a  f0020cff          AND      r12,r2,#0xff
00000e  4aa0              LDR      r2,|L5.656|
000010  4601              MOV      r1,r0                 ;105
000012  2000              MOVS     r0,#0                 ;106
000014  f812c00c          LDRB     r12,[r2,r12]
000018  2320              MOVS     r3,#0x20
00001a  458c              CMP      r12,r1
00001c  bf08              IT       EQ
00001e  2004              MOVEQ    r0,#4
;;;108      if (joypad_assignments[idx_from_mask(BTN_D1)]    == i) mask |= BTN_D1;
000020  f04f0c08          MOV      r12,#8
000024  fabcfc8c          CLZ      r12,r12
000028  f1cc0c20          RSB      r12,r12,#0x20
00002c  f00c0cff          AND      r12,r12,#0xff
000030  f812c00c          LDRB     r12,[r2,r12]
000034  458c              CMP      r12,r1
000036  bf08              IT       EQ
000038  f0400008          ORREQ    r0,r0,#8
;;;109      if (joypad_assignments[idx_from_mask(BTN_L1)]    == i) mask |= BTN_L1;
00003c  f04f0c10          MOV      r12,#0x10
000040  fabcfc8c          CLZ      r12,r12
000044  f1cc0c20          RSB      r12,r12,#0x20
000048  f00c0cff          AND      r12,r12,#0xff
00004c  f812c00c          LDRB     r12,[r2,r12]
000050  458c              CMP      r12,r1
000052  bf08              IT       EQ
000054  f0400010          ORREQ    r0,r0,#0x10
;;;110      if (joypad_assignments[idx_from_mask(BTN_M1)]    == i) mask |= BTN_M1;
000058  fab3f383          CLZ      r3,r3
00005c  f1c30320          RSB      r3,r3,#0x20
000060  b2db              UXTB     r3,r3
000062  5cd3              LDRB     r3,[r2,r3]
000064  428b              CMP      r3,r1
000066  bf08              IT       EQ
000068  f0400020          ORREQ    r0,r0,#0x20
;;;111      if (joypad_assignments[idx_from_mask(BTN_X1)]    == i) mask |= BTN_X1;
00006c  2340              MOVS     r3,#0x40
00006e  fab3f383          CLZ      r3,r3
000072  f1c30320          RSB      r3,r3,#0x20
000076  b2db              UXTB     r3,r3
000078  5cd3              LDRB     r3,[r2,r3]
00007a  428b              CMP      r3,r1
00007c  bf08              IT       EQ
00007e  f0400040          ORREQ    r0,r0,#0x40
;;;112      if (joypad_assignments[idx_from_mask(BTN_X2)]    == i) mask |= BTN_X2;
000082  2380              MOVS     r3,#0x80
000084  fab3f383          CLZ      r3,r3
000088  f1c30320          RSB      r3,r3,#0x20
00008c  b2db              UXTB     r3,r3
00008e  5cd3              LDRB     r3,[r2,r3]
000090  428b              CMP      r3,r1
000092  bf08              IT       EQ
000094  f0400080          ORREQ    r0,r0,#0x80
;;;113      if (joypad_assignments[idx_from_mask(BTN_X3)]    == i) mask |= BTN_X3;
000098  f44f7380          MOV      r3,#0x100
00009c  fab3f383          CLZ      r3,r3
0000a0  f1c30320          RSB      r3,r3,#0x20
0000a4  b2db              UXTB     r3,r3
0000a6  5cd3              LDRB     r3,[r2,r3]
0000a8  428b              CMP      r3,r1
0000aa  bf08              IT       EQ
0000ac  f4407080          ORREQ    r0,r0,#0x100
;;;114      if (joypad_assignments[idx_from_mask(BTN_X4)]    == i) mask |= BTN_X4;
0000b0  f44f7300          MOV      r3,#0x200
0000b4  fab3f383          CLZ      r3,r3
0000b8  f1c30320          RSB      r3,r3,#0x20
0000bc  b2db              UXTB     r3,r3
0000be  5cd3              LDRB     r3,[r2,r3]
0000c0  428b              CMP      r3,r1
0000c2  bf08              IT       EQ
0000c4  f4407000          ORREQ    r0,r0,#0x200
;;;115      if (joypad_assignments[idx_from_mask(BTN_JS2)]   == i) mask |= BTN_JS2;
0000c8  f44f6380          MOV      r3,#0x400
0000cc  fab3f383          CLZ      r3,r3
0000d0  f1c30320          RSB      r3,r3,#0x20
0000d4  b2db              UXTB     r3,r3
0000d6  5cd3              LDRB     r3,[r2,r3]
0000d8  428b              CMP      r3,r1
0000da  bf08              IT       EQ
0000dc  f4406080          ORREQ    r0,r0,#0x400
;;;116      if (joypad_assignments[idx_from_mask(BTN_D2)]    == i) mask |= BTN_D2;
0000e0  f44f6300          MOV      r3,#0x800
0000e4  fab3f383          CLZ      r3,r3
0000e8  f1c30320          RSB      r3,r3,#0x20
0000ec  b2db              UXTB     r3,r3
0000ee  5cd3              LDRB     r3,[r2,r3]
0000f0  428b              CMP      r3,r1
0000f2  bf08              IT       EQ
0000f4  f4406000          ORREQ    r0,r0,#0x800
;;;117      if (joypad_assignments[idx_from_mask(BTN_R2)]    == i) mask |= BTN_R2;
0000f8  f44f5380          MOV      r3,#0x1000
0000fc  fab3f383          CLZ      r3,r3
000100  f1c30320          RSB      r3,r3,#0x20
000104  b2db              UXTB     r3,r3
000106  5cd3              LDRB     r3,[r2,r3]
000108  428b              CMP      r3,r1
00010a  bf08              IT       EQ
00010c  f4405080          ORREQ    r0,r0,#0x1000
;;;118      if (joypad_assignments[idx_from_mask(BTN_M2)]    == i) mask |= BTN_M2;
000110  f44f5300          MOV      r3,#0x2000
000114  fab3f383          CLZ      r3,r3
000118  f1c30320          RSB      r3,r3,#0x20
00011c  b2db              UXTB     r3,r3
00011e  5cd3              LDRB     r3,[r2,r3]
000120  428b              CMP      r3,r1
000122  bf08              IT       EQ
000124  f4405000          ORREQ    r0,r0,#0x2000
;;;119      if (joypad_assignments[idx_from_mask(BTN_U2)]    == i) mask |= BTN_U2;
000128  f44f4380          MOV      r3,#0x4000
00012c  fab3f383          CLZ      r3,r3
000130  f1c30320          RSB      r3,r3,#0x20
000134  b2db              UXTB     r3,r3
000136  5cd3              LDRB     r3,[r2,r3]
000138  428b              CMP      r3,r1
00013a  bf08              IT       EQ
00013c  f4404080          ORREQ    r0,r0,#0x4000
;;;120      if (joypad_assignments[idx_from_mask(BTN_L2)]    == i) mask |= BTN_L2;
000140  f44f4300          MOV      r3,#0x8000
000144  fab3f383          CLZ      r3,r3
000148  f1c30320          RSB      r3,r3,#0x20
00014c  b2db              UXTB     r3,r3
00014e  5cd3              LDRB     r3,[r2,r3]
000150  428b              CMP      r3,r1
000152  bf08              IT       EQ
000154  f4404000          ORREQ    r0,r0,#0x8000
;;;121      if (joypad_assignments[idx_from_mask(BTN_JS1)]   == i) mask |= BTN_JS1;
000158  2301              MOVS     r3,#1
00015a  fab3f383          CLZ      r3,r3
00015e  f1c30320          RSB      r3,r3,#0x20
000162  b2db              UXTB     r3,r3
000164  5cd3              LDRB     r3,[r2,r3]
000166  428b              CMP      r3,r1
000168  bf08              IT       EQ
00016a  f0400001          ORREQ    r0,r0,#1
;;;122      if (joypad_assignments[idx_from_mask(BTN_U1)]    == i) mask |= BTN_U1;
00016e  2302              MOVS     r3,#2
000170  fab3f383          CLZ      r3,r3
000174  f1c30320          RSB      r3,r3,#0x20
000178  b2db              UXTB     r3,r3
00017a  5cd3              LDRB     r3,[r2,r3]
00017c  428b              CMP      r3,r1
00017e  bf08              IT       EQ
000180  f0400002          ORREQ    r0,r0,#2
;;;123      if (joypad_assignments[idx_from_mask(BTN_JS1_L)] == i) mask |= BTN_JS1_L;
000184  f44f3380          MOV      r3,#0x10000
000188  fab3f383          CLZ      r3,r3
00018c  f1c30320          RSB      r3,r3,#0x20
000190  b2db              UXTB     r3,r3
000192  5cd3              LDRB     r3,[r2,r3]
000194  428b              CMP      r3,r1
000196  bf08              IT       EQ
000198  f4403080          ORREQ    r0,r0,#0x10000
;;;124      if (joypad_assignments[idx_from_mask(BTN_JS1_R)] == i) mask |= BTN_JS1_R;
00019c  f44f3300          MOV      r3,#0x20000
0001a0  fab3f383          CLZ      r3,r3
0001a4  f1c30320          RSB      r3,r3,#0x20
0001a8  b2db              UXTB     r3,r3
0001aa  5cd3              LDRB     r3,[r2,r3]
0001ac  428b              CMP      r3,r1
0001ae  bf08              IT       EQ
0001b0  f4403000          ORREQ    r0,r0,#0x20000
;;;125      if (joypad_assignments[idx_from_mask(BTN_JS1_D)] == i) mask |= BTN_JS1_D;
0001b4  f44f2380          MOV      r3,#0x40000
0001b8  fab3f383          CLZ      r3,r3
0001bc  f1c30320          RSB      r3,r3,#0x20
0001c0  b2db              UXTB     r3,r3
0001c2  5cd3              LDRB     r3,[r2,r3]
0001c4  428b              CMP      r3,r1
0001c6  bf08              IT       EQ
0001c8  f4402080          ORREQ    r0,r0,#0x40000
;;;126      if (joypad_assignments[idx_from_mask(BTN_JS1_U)] == i) mask |= BTN_JS1_U;
0001cc  f44f2300          MOV      r3,#0x80000
0001d0  fab3f383          CLZ      r3,r3
0001d4  f1c30320          RSB      r3,r3,#0x20
0001d8  b2db              UXTB     r3,r3
0001da  5cd3              LDRB     r3,[r2,r3]
0001dc  428b              CMP      r3,r1
0001de  bf08              IT       EQ
0001e0  f4402000          ORREQ    r0,r0,#0x80000
;;;127      if (joypad_assignments[idx_from_mask(BTN_JS2_L)] == i) mask |= BTN_JS2_L;
0001e4  f44f1380          MOV      r3,#0x100000
0001e8  fab3f383          CLZ      r3,r3
0001ec  f1c30320          RSB      r3,r3,#0x20
0001f0  b2db              UXTB     r3,r3
0001f2  5cd3              LDRB     r3,[r2,r3]
0001f4  428b              CMP      r3,r1
0001f6  bf08              IT       EQ
0001f8  f4401080          ORREQ    r0,r0,#0x100000
;;;128      if (joypad_assignments[idx_from_mask(BTN_JS2_R)] == i) mask |= BTN_JS2_R;
0001fc  f44f1300          MOV      r3,#0x200000
000200  fab3f383          CLZ      r3,r3
000204  f1c30320          RSB      r3,r3,#0x20
000208  b2db              UXTB     r3,r3
00020a  5cd3              LDRB     r3,[r2,r3]
00020c  428b              CMP      r3,r1
00020e  bf08              IT       EQ
000210  f4401000          ORREQ    r0,r0,#0x200000
;;;129      if (joypad_assignments[idx_from_mask(BTN_JS2_D)] == i) mask |= BTN_JS2_D;
000214  f44f0380          MOV      r3,#0x400000
000218  fab3f383          CLZ      r3,r3
00021c  f1c30320          RSB      r3,r3,#0x20
000220  b2db              UXTB     r3,r3
000222  5cd3              LDRB     r3,[r2,r3]
000224  428b              CMP      r3,r1
000226  bf08              IT       EQ
000228  f4400080          ORREQ    r0,r0,#0x400000
;;;130      if (joypad_assignments[idx_from_mask(BTN_JS2_U)] == i) mask |= BTN_JS2_U;
00022c  f44f0300          MOV      r3,#0x800000
000230  fab3f383          CLZ      r3,r3
000234  f1c30320          RSB      r3,r3,#0x20
000238  b2db              UXTB     r3,r3
00023a  5cd3              LDRB     r3,[r2,r3]
00023c  428b              CMP      r3,r1
00023e  bf08              IT       EQ
000240  f4400000          ORREQ    r0,r0,#0x800000
;;;131      if (joypad_assignments[idx_from_mask(BTN_IMU_L)] == i) mask |= BTN_IMU_L;
000244  f04f7380          MOV      r3,#0x1000000
000248  fab3f383          CLZ      r3,r3
00024c  f1c30320          RSB      r3,r3,#0x20
000250  b2db              UXTB     r3,r3
000252  5cd3              LDRB     r3,[r2,r3]
000254  428b              CMP      r3,r1
000256  bf08              IT       EQ
000258  f0407080          ORREQ    r0,r0,#0x1000000
;;;132      if (joypad_assignments[idx_from_mask(BTN_IMU_R)] == i) mask |= BTN_IMU_R;
00025c  f04f7300          MOV      r3,#0x2000000
000260  fab3f383          CLZ      r3,r3
000264  f1c30320          RSB      r3,r3,#0x20
000268  b2db              UXTB     r3,r3
00026a  5cd3              LDRB     r3,[r2,r3]
00026c  428b              CMP      r3,r1
00026e  bf08              IT       EQ
000270  f0407000          ORREQ    r0,r0,#0x2000000
;;;133      if (joypad_assignments[idx_from_mask(BTN_IMU_J)] == i) mask |= BTN_IMU_J;
000274  f04f6380          MOV      r3,#0x4000000
000278  fab3f383          CLZ      r3,r3
00027c  f1c30320          RSB      r3,r3,#0x20
000280  b2db              UXTB     r3,r3
000282  5cd2              LDRB     r2,[r2,r3]
000284  428a              CMP      r2,r1
000286  bf08              IT       EQ
000288  f0406080          ORREQ    r0,r0,#0x4000000
;;;134      return mask;
;;;135    }
00028c  4770              BX       lr
;;;136    /* USER CODE END 0 */
                          ENDP

00028e  0000              DCW      0x0000
                  |L5.656|
                          DCD      ||.bss||

                          AREA ||i.joypad_icon||, CODE, READONLY, ALIGN=2

                  joypad_icon PROC
;;;96     }
;;;97     char joypad_icon(uint32_t i) {
000000  a208              ADR      r2,|L6.36|
000002  b082              SUB      sp,sp,#8
;;;98       const char icons[6] = {'^', 'V', '<', '>', 'A', 'B'};
000004  e9d21200          LDRD     r1,r2,[r2,#0]
;;;99       return icons[joypad_assignments[idx_from_mask(i)]];
000008  e9cd1200          STRD     r1,r2,[sp,#0]
00000c  fab0f080          CLZ      r0,r0
000010  f1c00020          RSB      r0,r0,#0x20
000014  4905              LDR      r1,|L6.44|
000016  b2c0              UXTB     r0,r0
000018  5c08              LDRB     r0,[r1,r0]
00001a  f81d0000          LDRB     r0,[sp,r0]
;;;100    }
00001e  b002              ADD      sp,sp,#8
000020  4770              BX       lr
;;;101    void joypad_rotate(uint32_t mask) {
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
000024  5e563c3e          DCB      "^V<>AB",0
000028  414200  
00002b  00                DCB      0
                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.joypad_rotate||, CODE, READONLY, ALIGN=2

                  joypad_rotate PROC
;;;100    }
;;;101    void joypad_rotate(uint32_t mask) {
000000  fab0f180          CLZ      r1,r0
;;;102      joypad_assignments[idx_from_mask(mask)] += 1;
000004  f1c10120          RSB      r1,r1,#0x20
000008  4a0b              LDR      r2,|L7.56|
00000a  b2c9              UXTB     r1,r1
00000c  4411              ADD      r1,r1,r2
;;;103      joypad_assignments[idx_from_mask(mask)] %= 6;
00000e  fab0f080          CLZ      r0,r0
000012  780b              LDRB     r3,[r1,#0]            ;102
000014  f1c00020          RSB      r0,r0,#0x20
000018  1c5b              ADDS     r3,r3,#1              ;102
00001a  700b              STRB     r3,[r1,#0]            ;102
00001c  b2c0              UXTB     r0,r0
00001e  1881              ADDS     r1,r0,r2
000020  4a06              LDR      r2,|L7.60|
000022  7808              LDRB     r0,[r1,#0]
000024  fba23200          UMULL    r3,r2,r2,r0
000028  0892              LSRS     r2,r2,#2
00002a  eba20282          SUB      r2,r2,r2,LSL #2
00002e  eb000042          ADD      r0,r0,r2,LSL #1
000032  7008              STRB     r0,[r1,#0]
;;;104    }
000034  4770              BX       lr
;;;105    uint32_t joypad_assigned(uint8_t i) {
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      ||.bss||
                  |L7.60|
                          DCD      0xaaaaaaab

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;141      */
;;;142    int main(void)
000000  b0a0              SUB      sp,sp,#0x80
;;;143    {
;;;144      /* USER CODE BEGIN 1 */
;;;145    
;;;146      /* USER CODE END 1 */
;;;147    
;;;148      /* MCU Configuration--------------------------------------------------------*/
;;;149    
;;;150      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;151      HAL_Init();
000002  f7fffffe          BL       HAL_Init
;;;152    
;;;153      /* USER CODE BEGIN Init */
;;;154    
;;;155      /* USER CODE END Init */
;;;156    
;;;157      /* Configure the system clock */
;;;158      SystemClock_Config();
000006  f7fffffe          BL       SystemClock_Config
00000a  f04f20e0          MOV      r0,#0xe000e000
00000e  6901              LDR      r1,[r0,#0x10]
000010  f0410102          ORR      r1,r1,#2
000014  6101              STR      r1,[r0,#0x10]
;;;159    
;;;160      /* USER CODE BEGIN SysInit */
;;;161    	ticks_init();
;;;162      /* USER CODE END SysInit */
;;;163    
;;;164      /* Initialize all configured peripherals */
;;;165      MX_GPIO_Init();
000016  f7fffffe          BL       MX_GPIO_Init
;;;166      MX_DMA_Init();
00001a  f7fffffe          BL       MX_DMA_Init
;;;167      //MX_SPI1_Init();
;;;168      MX_USART1_UART_Init();
00001e  f7fffffe          BL       MX_USART1_UART_Init
;;;169      MX_ADC1_Init();
000022  f7fffffe          BL       MX_ADC1_Init
;;;170      MX_SPI5_Init();
000026  f7fffffe          BL       MX_SPI5_Init
;;;171      MX_USART2_UART_Init();
00002a  f7fffffe          BL       MX_USART2_UART_Init
;;;172      //MX_TIM13_Init();
;;;173      //MX_DAC_Init();
;;;174      MX_TIM14_Init();
00002e  f7fffffe          BL       MX_TIM14_Init
;;;175      MX_TIM12_Init();
000032  f7fffffe          BL       MX_TIM12_Init
;;;176      MX_TIM11_Init();
000036  f7fffffe          BL       MX_TIM11_Init
;;;177      MX_TIM10_Init();
00003a  f7fffffe          BL       MX_TIM10_Init
;;;178      MX_TIM9_Init();
00003e  f7fffffe          BL       MX_TIM9_Init
;;;179      MX_TIM6_Init();
000042  f7fffffe          BL       MX_TIM6_Init
;;;180      MX_TIM7_Init();
000046  f7fffffe          BL       MX_TIM7_Init
;;;181      //MX_SDIO_SD_Init();
;;;182      /* USER CODE BEGIN 2 */
;;;183      tft_init(PIN_ON_LEFT, BLACK, WHITE, GREEN, RED);
00004a  f44f4078          MOV      r0,#0xf800
00004e  9000              STR      r0,[sp,#0]
000050  f44f63fc          MOV      r3,#0x7e0
000054  f64f72ff          MOV      r2,#0xffff
000058  2100              MOVS     r1,#0
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       tft_init
;;;184      // IMU_enableAccel(50);
;;;185      joystick_init();
000060  f7fffffe          BL       joystick_init
;;;186    
;;;187      //Frame timer
;;;188      TIM6->PSC = 83;
000064  48fe              LDR      r0,|L8.1120|
000066  2153              MOVS     r1,#0x53
000068  6281              STR      r1,[r0,#0x28]
;;;189      TIM6->ARR = 33333;
00006a  f2482135          MOV      r1,#0x8235
00006e  62c1              STR      r1,[r0,#0x2c]
;;;190      TIM6->CR1 = TIM_CR1_CEN;
000070  2201              MOVS     r2,#1
000072  6002              STR      r2,[r0,#0]
;;;191    
;;;192    
;;;193      joypad_assignments[idx_from_mask(BTN_R1)]    = ASSIGN_RIGHT;
000074  2004              MOVS     r0,#4
000076  fab0f180          CLZ      r1,r0
00007a  f1c10120          RSB      r1,r1,#0x20
00007e  4cf9              LDR      r4,|L8.1124|
000080  b2c9              UXTB     r1,r1
000082  f04f0c03          MOV      r12,#3
000086  f804c001          STRB     r12,[r4,r1]
;;;194      joypad_assignments[idx_from_mask(BTN_D1)]    = ASSIGN_DOWN;
00008a  2508              MOVS     r5,#8
00008c  fab5f185          CLZ      r1,r5
000090  f1c10120          RSB      r1,r1,#0x20
000094  b2c9              UXTB     r1,r1
000096  2620              MOVS     r6,#0x20              ;193
000098  5462              STRB     r2,[r4,r1]
;;;195      joypad_assignments[idx_from_mask(BTN_L1)]    = ASSIGN_LEFT;
00009a  2110              MOVS     r1,#0x10
00009c  fab1f181          CLZ      r1,r1
0000a0  f1c10120          RSB      r1,r1,#0x20
0000a4  b2c9              UXTB     r1,r1
;;;196      joypad_assignments[idx_from_mask(BTN_M1)]    = ASSIGN_B;
0000a6  fab6f686          CLZ      r6,r6
0000aa  2302              MOVS     r3,#2                 ;195
0000ac  f1c60620          RSB      r6,r6,#0x20
0000b0  5463              STRB     r3,[r4,r1]            ;195
0000b2  b2f6              UXTB     r6,r6
0000b4  2105              MOVS     r1,#5
0000b6  55a1              STRB     r1,[r4,r6]
;;;197      joypad_assignments[idx_from_mask(BTN_JS2)]   = ASSIGN_B;
0000b8  0206              LSLS     r6,r0,#8
0000ba  fab6f686          CLZ      r6,r6
0000be  f1c60620          RSB      r6,r6,#0x20
0000c2  b2f6              UXTB     r6,r6
;;;198      joypad_assignments[idx_from_mask(BTN_D2)]    = ASSIGN_B;
;;;199      joypad_assignments[idx_from_mask(BTN_R2)]    = ASSIGN_A;
;;;200      joypad_assignments[idx_from_mask(BTN_M2)]    = ASSIGN_B;
;;;201      joypad_assignments[idx_from_mask(BTN_U2)]    = ASSIGN_A;
;;;202      joypad_assignments[idx_from_mask(BTN_L2)]    = ASSIGN_B;
;;;203      joypad_assignments[idx_from_mask(BTN_JS1)]   = ASSIGN_B;
;;;204      joypad_assignments[idx_from_mask(BTN_U1)]    = ASSIGN_UP;
0000c4  fab3f783          CLZ      r7,r3
0000c8  55a1              STRB     r1,[r4,r6]            ;197
0000ca  0246              LSLS     r6,r0,#9              ;198
0000cc  fab6f686          CLZ      r6,r6                 ;198
0000d0  f1c60620          RSB      r6,r6,#0x20           ;198
0000d4  b2f6              UXTB     r6,r6                 ;198
0000d6  f1c70720          RSB      r7,r7,#0x20
0000da  55a1              STRB     r1,[r4,r6]            ;198
0000dc  0286              LSLS     r6,r0,#10             ;199
0000de  fab6f686          CLZ      r6,r6                 ;199
0000e2  f1c60620          RSB      r6,r6,#0x20           ;199
0000e6  b2f6              UXTB     r6,r6                 ;199
0000e8  b2ff              UXTB     r7,r7
0000ea  55a0              STRB     r0,[r4,r6]            ;199
0000ec  02c6              LSLS     r6,r0,#11             ;200
0000ee  fab6f686          CLZ      r6,r6                 ;200
0000f2  f1c60620          RSB      r6,r6,#0x20           ;200
0000f6  b2f6              UXTB     r6,r6                 ;200
0000f8  55a1              STRB     r1,[r4,r6]            ;200
0000fa  0306              LSLS     r6,r0,#12             ;201
0000fc  fab6f686          CLZ      r6,r6                 ;201
000100  f1c60620          RSB      r6,r6,#0x20           ;201
000104  b2f6              UXTB     r6,r6                 ;201
000106  55a0              STRB     r0,[r4,r6]            ;201
000108  0346              LSLS     r6,r0,#13             ;202
00010a  fab6f686          CLZ      r6,r6                 ;202
00010e  f1c60620          RSB      r6,r6,#0x20           ;202
000112  b2f6              UXTB     r6,r6                 ;202
000114  55a1              STRB     r1,[r4,r6]            ;202
000116  fab2f682          CLZ      r6,r2                 ;203
00011a  f1c60620          RSB      r6,r6,#0x20           ;203
00011e  b2f6              UXTB     r6,r6                 ;203
000120  55a1              STRB     r1,[r4,r6]            ;203
000122  2600              MOVS     r6,#0
000124  55e6              STRB     r6,[r4,r7]
;;;205      joypad_assignments[idx_from_mask(BTN_JS1_L)] = ASSIGN_LEFT;
000126  0387              LSLS     r7,r0,#14
000128  fab7f787          CLZ      r7,r7
00012c  f1c70720          RSB      r7,r7,#0x20
000130  b2ff              UXTB     r7,r7
000132  55e3              STRB     r3,[r4,r7]
;;;206      joypad_assignments[idx_from_mask(BTN_JS1_R)] = ASSIGN_RIGHT;
000134  03c7              LSLS     r7,r0,#15
000136  fab7f787          CLZ      r7,r7
00013a  f1c70720          RSB      r7,r7,#0x20
00013e  b2ff              UXTB     r7,r7
000140  f804c007          STRB     r12,[r4,r7]
;;;207      joypad_assignments[idx_from_mask(BTN_JS1_D)] = ASSIGN_DOWN;
000144  0407              LSLS     r7,r0,#16
000146  fab7f787          CLZ      r7,r7
00014a  f1c70720          RSB      r7,r7,#0x20
00014e  b2ff              UXTB     r7,r7
000150  55e2              STRB     r2,[r4,r7]
;;;208      joypad_assignments[idx_from_mask(BTN_JS1_U)] = ASSIGN_UP;
000152  0442              LSLS     r2,r0,#17
000154  fab2f282          CLZ      r2,r2
000158  f1c20220          RSB      r2,r2,#0x20
00015c  b2d2              UXTB     r2,r2
00015e  54a6              STRB     r6,[r4,r2]
;;;209      joypad_assignments[idx_from_mask(BTN_JS2_L)] = ASSIGN_B;
000160  0482              LSLS     r2,r0,#18
000162  fab2f282          CLZ      r2,r2
000166  f1c20220          RSB      r2,r2,#0x20
00016a  b2d2              UXTB     r2,r2
00016c  54a1              STRB     r1,[r4,r2]
;;;210      joypad_assignments[idx_from_mask(BTN_JS2_R)] = ASSIGN_B;
00016e  04c2              LSLS     r2,r0,#19
000170  fab2f282          CLZ      r2,r2
000174  f1c20220          RSB      r2,r2,#0x20
000178  b2d2              UXTB     r2,r2
00017a  54a1              STRB     r1,[r4,r2]
;;;211      joypad_assignments[idx_from_mask(BTN_JS2_D)] = ASSIGN_A;
00017c  0501              LSLS     r1,r0,#20
00017e  fab1f181          CLZ      r1,r1
000182  f1c10120          RSB      r1,r1,#0x20
000186  b2c9              UXTB     r1,r1
;;;212      joypad_assignments[idx_from_mask(BTN_JS2_U)] = ASSIGN_A;
;;;213      joypad_assignments[idx_from_mask(BTN_X1)]    = ASSIGN_SEL;
000188  2240              MOVS     r2,#0x40
00018a  5460              STRB     r0,[r4,r1]            ;211
00018c  0541              LSLS     r1,r0,#21             ;212
00018e  fab1f181          CLZ      r1,r1                 ;212
000192  f1c10120          RSB      r1,r1,#0x20           ;212
000196  b2c9              UXTB     r1,r1                 ;212
000198  fab2f282          CLZ      r2,r2
00019c  f1c20220          RSB      r2,r2,#0x20
0001a0  5460              STRB     r0,[r4,r1]            ;212
0001a2  b2d2              UXTB     r2,r2
0001a4  2107              MOVS     r1,#7
0001a6  54a1              STRB     r1,[r4,r2]
;;;214      joypad_assignments[idx_from_mask(BTN_X2)]    = ASSIGN_NONE;
0001a8  2180              MOVS     r1,#0x80
0001aa  fab1f181          CLZ      r1,r1
0001ae  f1c10120          RSB      r1,r1,#0x20
0001b2  b2c9              UXTB     r1,r1
;;;215      joypad_assignments[idx_from_mask(BTN_X3)]    = ASSIGN_NONE;
;;;216      joypad_assignments[idx_from_mask(BTN_X4)]    = ASSIGN_START;
0001b4  01c2              LSLS     r2,r0,#7
0001b6  5465              STRB     r5,[r4,r1]            ;214
0001b8  0181              LSLS     r1,r0,#6              ;215
0001ba  fab1f181          CLZ      r1,r1                 ;215
0001be  f1c10120          RSB      r1,r1,#0x20           ;215
0001c2  b2c9              UXTB     r1,r1                 ;215
0001c4  fab2f282          CLZ      r2,r2
0001c8  f1c20220          RSB      r2,r2,#0x20
0001cc  5465              STRB     r5,[r4,r1]            ;215
0001ce  b2d2              UXTB     r2,r2
0001d0  2106              MOVS     r1,#6
0001d2  54a1              STRB     r1,[r4,r2]
;;;217      joypad_assignments[idx_from_mask(BTN_IMU_L)] = ASSIGN_LEFT;
0001d4  0581              LSLS     r1,r0,#22
0001d6  fab1f181          CLZ      r1,r1
0001da  f1c10120          RSB      r1,r1,#0x20
0001de  b2c9              UXTB     r1,r1
0001e0  4da1              LDR      r5,|L8.1128|
0001e2  5463              STRB     r3,[r4,r1]
;;;218      joypad_assignments[idx_from_mask(BTN_IMU_R)] = ASSIGN_RIGHT;
0001e4  05c1              LSLS     r1,r0,#23
0001e6  fab1f181          CLZ      r1,r1
0001ea  f1c10120          RSB      r1,r1,#0x20
0001ee  b2c9              UXTB     r1,r1
0001f0  f804c001          STRB     r12,[r4,r1]
;;;219      joypad_assignments[idx_from_mask(BTN_IMU_J)] = ASSIGN_A;
0001f4  0601              LSLS     r1,r0,#24
0001f6  fab1f181          CLZ      r1,r1
0001fa  f1c10120          RSB      r1,r1,#0x20
0001fe  b2c9              UXTB     r1,r1
000200  5460              STRB     r0,[r4,r1]
;;;220      delay(100);
000202  2064              MOVS     r0,#0x64
000204  60a8              STR      r0,[r5,#8]  ; __delay
                  |L8.518|
000206  68a8              LDR      r0,[r5,#8]  ; __delay
000208  2800              CMP      r0,#0
00020a  d1fc              BNE      |L8.518|
00020c  ae03              ADD      r6,sp,#0xc
00020e  af13              ADD      r7,sp,#0x4c
000210  f10d081c          ADD      r8,sp,#0x1c
000214  f10d0b24          ADD      r11,sp,#0x24
                  |L8.536|
;;;221      /* USER CODE END 2 */
;;;222    
;;;223      /* Infinite loop */
;;;224      /* USER CODE BEGIN WHILE */
;;;225      while (1)
;;;226      {
;;;227        static int GAME_SELECT = 0;
;;;228        #define NUM_OF_GAMES 3
;;;229    
;;;230    
;;;231        static uint32_t last_joypad_state = 0;
;;;232        joypad_update();
000218  f7fffffe          BL       joypad_update
;;;233        #define btn_pressed(X) (joypad_state & (X))
;;;234        #define btn_clicked(X) (joypad_state & (X)) && !(last_joypad_state & (X))
;;;235        tft_clear();
00021c  f7fffffe          BL       tft_clear
;;;236        tft_printc(4, 0, "ELEC3300(24) - Anshuman & Aaron");
000220  a292              ADR      r2,|L8.1132|
000222  2100              MOVS     r1,#0
000224  2004              MOVS     r0,#4
000226  f7fffffe          BL       tft_printc
;;;237        tft_printc(6, 12, "SELECT");
00022a  a298              ADR      r2,|L8.1164|
00022c  210c              MOVS     r1,#0xc
00022e  2006              MOVS     r0,#6
000230  f7fffffe          BL       tft_printc
;;;238        tft_prints(13, 12, "%s Super Mario Bros]", (GAME_SELECT == 0) ? ("[>") : ("-"));
000234  68e8              LDR      r0,[r5,#0xc]  ; GAME_SELECT
000236  2800              CMP      r0,#0
000238  bf0c              ITE      EQ
00023a  a396              ADREQ    r3,|L8.1172|
00023c  a396              ADRNE    r3,|L8.1176|
00023e  a297              ADR      r2,|L8.1180|
000240  210c              MOVS     r1,#0xc
000242  200d              MOVS     r0,#0xd
000244  f7fffffe          BL       tft_prints
;;;239        tft_prints(13, 13, "%s Battle City]"     , (GAME_SELECT == 1) ? ("[>") : ("-"));
000248  68e8              LDR      r0,[r5,#0xc]  ; GAME_SELECT
00024a  2801              CMP      r0,#1
00024c  bf0c              ITE      EQ
00024e  a391              ADREQ    r3,|L8.1172|
000250  a391              ADRNE    r3,|L8.1176|
000252  a298              ADR      r2,|L8.1204|
000254  210d              MOVS     r1,#0xd
000256  4608              MOV      r0,r1
000258  f7fffffe          BL       tft_prints
;;;240        tft_prints(13, 14, "%s Mappy]"           , (GAME_SELECT == 2) ? ("[>") : ("-"));
00025c  68e8              LDR      r0,[r5,#0xc]  ; GAME_SELECT
00025e  2802              CMP      r0,#2
000260  bf0c              ITE      EQ
000262  a38c              ADREQ    r3,|L8.1172|
000264  a38c              ADRNE    r3,|L8.1176|
000266  a297              ADR      r2,|L8.1220|
000268  210e              MOVS     r1,#0xe
00026a  200d              MOVS     r0,#0xd
00026c  f7fffffe          BL       tft_prints
000270  4897              LDR      r0,|L8.1232|
;;;241       
;;;242      #if 0 
;;;243        // tft_printc(0, 5, " {/\\} \n{<} {>}\n {\\/} ");
;;;244        tft_printc(0, 5, " {^} \n{<}  {>}\n {V} ");
;;;245        tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;246      #else
;;;247        tft_prints(0, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
000272  2208              MOVS     r2,#8
000274  fab2f282          CLZ      r2,r2
000278  e9d01000          LDRD     r1,r0,[r0,#0]
00027c  f1c20220          RSB      r2,r2,#0x20
000280  e9cd1003          STRD     r1,r0,[sp,#0xc]
000284  b2d2              UXTB     r2,r2
000286  5ca2              LDRB     r2,[r4,r2]
000288  f816a002          LDRB     r10,[r6,r2]
00028c  2204              MOVS     r2,#4
00028e  fab2f282          CLZ      r2,r2
000292  f1c20220          RSB      r2,r2,#0x20
000296  e9cd1019          STRD     r1,r0,[sp,#0x64]
00029a  b2d2              UXTB     r2,r2
00029c  5ca3              LDRB     r3,[r4,r2]
00029e  aa19              ADD      r2,sp,#0x64
0002a0  f8129003          LDRB     r9,[r2,r3]
0002a4  2220              MOVS     r2,#0x20
0002a6  fab2f282          CLZ      r2,r2
0002aa  f1c20220          RSB      r2,r2,#0x20
0002ae  e9cd1013          STRD     r1,r0,[sp,#0x4c]
0002b2  b2d2              UXTB     r2,r2
0002b4  2302              MOVS     r3,#2
0002b6  5ca2              LDRB     r2,[r4,r2]
0002b8  f817c002          LDRB     r12,[r7,r2]
0002bc  2210              MOVS     r2,#0x10
0002be  fab2f282          CLZ      r2,r2
0002c2  f1c20220          RSB      r2,r2,#0x20
0002c6  e9cd1007          STRD     r1,r0,[sp,#0x1c]
0002ca  b2d2              UXTB     r2,r2
0002cc  5ca2              LDRB     r2,[r4,r2]
0002ce  f8182002          LDRB     r2,[r8,r2]
0002d2  e9cd100d          STRD     r1,r0,[sp,#0x34]
0002d6  fab3f083          CLZ      r0,r3
0002da  f1c00020          RSB      r0,r0,#0x20
0002de  b2c0              UXTB     r0,r0
0002e0  5c21              LDRB     r1,[r4,r0]
0002e2  a80d              ADD      r0,sp,#0x34
0002e4  5c43              LDRB     r3,[r0,r1]
0002e6  e9cd2c00          STRD     r2,r12,[sp,#0]
0002ea  e9cd9a02          STRD     r9,r10,[sp,#8]
0002ee  a279              ADR      r2,|L8.1236|
0002f0  2107              MOVS     r1,#7
0002f2  2000              MOVS     r0,#0
0002f4  f7fffffe          BL       tft_prints
0002f8  4875              LDR      r0,|L8.1232|
;;;248          joypad_icon(BTN_U1), joypad_icon(BTN_L1), joypad_icon(BTN_M1), joypad_icon(BTN_R1), joypad_icon(BTN_D1));
;;;249        tft_prints(36, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
0002fa  f44f6200          MOV      r2,#0x800
0002fe  fab2f282          CLZ      r2,r2
000302  e9d01000          LDRD     r1,r0,[r0,#0]
000306  f1c20220          RSB      r2,r2,#0x20
00030a  e9cd1005          STRD     r1,r0,[sp,#0x14]
00030e  b2d2              UXTB     r2,r2
000310  5ca3              LDRB     r3,[r4,r2]
000312  aa05              ADD      r2,sp,#0x14
000314  f812a003          LDRB     r10,[r2,r3]
000318  f44f5280          MOV      r2,#0x1000
00031c  fab2f282          CLZ      r2,r2
000320  f1c20220          RSB      r2,r2,#0x20
000324  e9cd101b          STRD     r1,r0,[sp,#0x6c]
000328  b2d2              UXTB     r2,r2
00032a  5ca3              LDRB     r3,[r4,r2]
00032c  aa1b              ADD      r2,sp,#0x6c
00032e  f8129003          LDRB     r9,[r2,r3]
000332  f44f5200          MOV      r2,#0x2000
000336  fab2f282          CLZ      r2,r2
00033a  f1c20220          RSB      r2,r2,#0x20
00033e  e9cd1015          STRD     r1,r0,[sp,#0x54]
000342  b2d2              UXTB     r2,r2
000344  5ca3              LDRB     r3,[r4,r2]
000346  aa15              ADD      r2,sp,#0x54
000348  f812c003          LDRB     r12,[r2,r3]
00034c  f44f4200          MOV      r2,#0x8000
000350  fab2f282          CLZ      r2,r2
000354  f1c20220          RSB      r2,r2,#0x20
000358  e9cd1009          STRD     r1,r0,[sp,#0x24]
00035c  b2d2              UXTB     r2,r2
00035e  f44f4380          MOV      r3,#0x4000
000362  5ca2              LDRB     r2,[r4,r2]
000364  f81b2002          LDRB     r2,[r11,r2]
000368  e9cd100f          STRD     r1,r0,[sp,#0x3c]
00036c  fab3f083          CLZ      r0,r3
000370  f1c00020          RSB      r0,r0,#0x20
000374  b2c0              UXTB     r0,r0
000376  5c21              LDRB     r1,[r4,r0]
000378  a80f              ADD      r0,sp,#0x3c
00037a  5c43              LDRB     r3,[r0,r1]
00037c  e9cd2c00          STRD     r2,r12,[sp,#0]
000380  e9cd9a02          STRD     r9,r10,[sp,#8]
000384  a253              ADR      r2,|L8.1236|
000386  2107              MOVS     r1,#7
000388  2024              MOVS     r0,#0x24
00038a  f7fffffe          BL       tft_prints
00038e  4850              LDR      r0,|L8.1232|
;;;250          joypad_icon(BTN_U2), joypad_icon(BTN_L2), joypad_icon(BTN_M2), joypad_icon(BTN_R2), joypad_icon(BTN_D2));
;;;251        tft_prints(0, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
000390  f44f2280          MOV      r2,#0x40000
000394  fab2f282          CLZ      r2,r2
000398  e9d01000          LDRD     r1,r0,[r0,#0]
00039c  f1c20220          RSB      r2,r2,#0x20
0003a0  e9cd1001          STRD     r1,r0,[sp,#4]
0003a4  b2d2              UXTB     r2,r2
0003a6  5ca3              LDRB     r3,[r4,r2]
0003a8  aa01              ADD      r2,sp,#4
0003aa  f812a003          LDRB     r10,[r2,r3]
0003ae  f44f3200          MOV      r2,#0x20000
0003b2  fab2f282          CLZ      r2,r2
0003b6  f1c20220          RSB      r2,r2,#0x20
0003ba  e9cd101d          STRD     r1,r0,[sp,#0x74]
0003be  b2d2              UXTB     r2,r2
0003c0  5ca3              LDRB     r3,[r4,r2]
0003c2  aa1d              ADD      r2,sp,#0x74
0003c4  f8129003          LDRB     r9,[r2,r3]
0003c8  2201              MOVS     r2,#1
0003ca  fab2f282          CLZ      r2,r2
0003ce  f1c20220          RSB      r2,r2,#0x20
0003d2  e9cd1017          STRD     r1,r0,[sp,#0x5c]
0003d6  b2d2              UXTB     r2,r2
0003d8  5ca3              LDRB     r3,[r4,r2]
0003da  aa17              ADD      r2,sp,#0x5c
0003dc  f812c003          LDRB     r12,[r2,r3]
0003e0  f44f3280          MOV      r2,#0x10000
0003e4  fab2f282          CLZ      r2,r2
0003e8  f1c20220          RSB      r2,r2,#0x20
0003ec  e9cd100b          STRD     r1,r0,[sp,#0x2c]
0003f0  b2d2              UXTB     r2,r2
0003f2  5ca3              LDRB     r3,[r4,r2]
0003f4  aa0b              ADD      r2,sp,#0x2c
0003f6  5cd2              LDRB     r2,[r2,r3]
0003f8  e9cd1011          STRD     r1,r0,[sp,#0x44]
0003fc  f44f2300          MOV      r3,#0x80000
000400  fab3f083          CLZ      r0,r3
000404  f1c00020          RSB      r0,r0,#0x20
000408  b2c0              UXTB     r0,r0
00040a  5c21              LDRB     r1,[r4,r0]
00040c  a811              ADD      r0,sp,#0x44
00040e  5c43              LDRB     r3,[r0,r1]
000410  e9cd2c00          STRD     r2,r12,[sp,#0]
000414  e9cd9a02          STRD     r9,r10,[sp,#8]
000418  a22e              ADR      r2,|L8.1236|
00041a  2102              MOVS     r1,#2
00041c  2000              MOVS     r0,#0
00041e  f7fffffe          BL       tft_prints
000422  482b              LDR      r0,|L8.1232|
;;;252          joypad_icon(BTN_JS1_U), joypad_icon(BTN_JS1_L), joypad_icon(BTN_JS1), joypad_icon(BTN_JS1_R), joypad_icon(BTN_JS1_D));
;;;253        tft_prints(36, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
000424  f44f0280          MOV      r2,#0x400000
000428  fab2f282          CLZ      r2,r2
00042c  e9d01000          LDRD     r1,r0,[r0,#0]
000430  f1c20220          RSB      r2,r2,#0x20
000434  e9cd1002          STRD     r1,r0,[sp,#8]
000438  b2d2              UXTB     r2,r2
00043a  ab02              ADD      r3,sp,#8
00043c  5ca2              LDRB     r2,[r4,r2]
00043e  f813a002          LDRB     r10,[r3,r2]
000442  f44f1200          MOV      r2,#0x200000
000446  fab2f282          CLZ      r2,r2
00044a  f1c20220          RSB      r2,r2,#0x20
00044e  b2d2              UXTB     r2,r2
000450  5ca3              LDRB     r3,[r4,r2]
000452  aa02              ADD      r2,sp,#8
000454  f8129003          LDRB     r9,[r2,r3]
000458  f44f6280          MOV      r2,#0x400
00045c  e048              B        |L8.1264|
00045e  0000              DCW      0x0000
                  |L8.1120|
                          DCD      0x40001000
                  |L8.1124|
                          DCD      ||.bss||
                  |L8.1128|
                          DCD      ||area_number.14||
                  |L8.1132|
00046c  454c4543          DCB      "ELEC3300(24) - Anshuman & Aaron",0
000470  33333030
000474  28323429
000478  202d2041
00047c  6e736875
000480  6d616e20
000484  26204161
000488  726f6e00
                  |L8.1164|
00048c  53454c45          DCB      "SELECT",0
000490  435400  
000493  00                DCB      0
                  |L8.1172|
000494  5b3e00            DCB      "[>",0
000497  00                DCB      0
                  |L8.1176|
000498  2d00              DCB      "-",0
00049a  00                DCB      0
00049b  00                DCB      0
                  |L8.1180|
00049c  25732053          DCB      "%s Super Mario Bros]",0
0004a0  75706572
0004a4  204d6172
0004a8  696f2042
0004ac  726f735d
0004b0  00      
0004b1  00                DCB      0
0004b2  00                DCB      0
0004b3  00                DCB      0
                  |L8.1204|
0004b4  25732042          DCB      "%s Battle City]",0
0004b8  6174746c
0004bc  65204369
0004c0  74795d00
                  |L8.1220|
0004c4  2573204d          DCB      "%s Mappy]",0
0004c8  61707079
0004cc  5d00    
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L8.1232|
                          DCD      ||i.joypad_icon||+0x24
                  |L8.1236|
0004d4  207b2563          DCB      " {%c} \n{%c}{%c}{%c}\n {%c} ",0
0004d8  7d200a7b
0004dc  25637d7b
0004e0  25637d7b
0004e4  25637d0a
0004e8  207b2563
0004ec  7d2000  
0004ef  00                DCB      0
                  |L8.1264|
0004f0  fab2f282          CLZ      r2,r2
0004f4  f1c20220          RSB      r2,r2,#0x20
0004f8  e9cd1006          STRD     r1,r0,[sp,#0x18]
0004fc  b2d2              UXTB     r2,r2
0004fe  ab06              ADD      r3,sp,#0x18
000500  5ca2              LDRB     r2,[r4,r2]
000502  a906              ADD      r1,sp,#0x18
000504  f813c002          LDRB     r12,[r3,r2]
000508  f44f1280          MOV      r2,#0x100000
00050c  fab2f282          CLZ      r2,r2
000510  f1c20220          RSB      r2,r2,#0x20
000514  b2d2              UXTB     r2,r2
000516  5ca2              LDRB     r2,[r4,r2]
000518  5c9a              LDRB     r2,[r3,r2]
00051a  f44f0300          MOV      r3,#0x800000
00051e  fab3f083          CLZ      r0,r3
000522  f1c00020          RSB      r0,r0,#0x20
000526  b2c0              UXTB     r0,r0
000528  5c20              LDRB     r0,[r4,r0]
00052a  5c0b              LDRB     r3,[r1,r0]
00052c  e9cd2c00          STRD     r2,r12,[sp,#0]
000530  f2af0260          ADR      r2,|L8.1236|
000534  e9cd9a02          STRD     r9,r10,[sp,#8]
000538  2102              MOVS     r1,#2
00053a  2024              MOVS     r0,#0x24
00053c  f7fffffe          BL       tft_prints
;;;254          joypad_icon(BTN_JS2_U), joypad_icon(BTN_JS2_L), joypad_icon(BTN_JS2), joypad_icon(BTN_JS2_R), joypad_icon(BTN_JS2_D));
;;;255     #if 0   
;;;256        if (btn_clicked(BTN_R1))    joypad_rotate(BTN_R1);
;;;257        if (btn_clicked(BTN_D1))    joypad_rotate(BTN_D1);
;;;258        if (btn_clicked(BTN_L1))    joypad_rotate(BTN_L1);
;;;259        if (btn_clicked(BTN_M1))    joypad_rotate(BTN_M1);
;;;260        if (btn_clicked(BTN_JS2))   joypad_rotate(BTN_JS2);
;;;261        if (btn_clicked(BTN_D2))    joypad_rotate(BTN_D2);
;;;262        if (btn_clicked(BTN_R2))    joypad_rotate(BTN_R2);
;;;263        if (btn_clicked(BTN_M2))    joypad_rotate(BTN_M2);
;;;264        if (btn_clicked(BTN_U2))    joypad_rotate(BTN_U2);
;;;265        if (btn_clicked(BTN_L2))    joypad_rotate(BTN_L2);
;;;266        if (btn_clicked(BTN_JS1))   joypad_rotate(BTN_JS1);
;;;267        if (btn_clicked(BTN_U1))    joypad_rotate(BTN_U1);
;;;268        if (btn_clicked(BTN_JS1_L)) joypad_rotate(BTN_JS1_L);
;;;269        if (btn_clicked(BTN_JS1_R)) joypad_rotate(BTN_JS1_R);
;;;270        if (btn_clicked(BTN_JS1_D)) joypad_rotate(BTN_JS1_D);
;;;271        if (btn_clicked(BTN_JS1_U)) joypad_rotate(BTN_JS1_U);
;;;272        if (btn_clicked(BTN_JS2_L)) joypad_rotate(BTN_JS2_L);
;;;273        if (btn_clicked(BTN_JS2_R)) joypad_rotate(BTN_JS2_R);
;;;274        if (btn_clicked(BTN_JS2_D)) joypad_rotate(BTN_JS2_D);
;;;275        if (btn_clicked(BTN_JS2_U)) joypad_rotate(BTN_JS2_U);
;;;276    #endif
;;;277        joypad_A     = joypad_assigned(ASSIGN_A);
000540  2004              MOVS     r0,#4
000542  f7fffffe          BL       joypad_assigned
000546  4941              LDR      r1,|L8.1612|
;;;278        joypad_B     = joypad_assigned(ASSIGN_B);
000548  6008              STR      r0,[r1,#0]  ; joypad_A
00054a  2005              MOVS     r0,#5
00054c  f7fffffe          BL       joypad_assigned
000550  493f              LDR      r1,|L8.1616|
;;;279        joypad_U     = joypad_assigned(ASSIGN_UP);
000552  6008              STR      r0,[r1,#0]  ; joypad_B
000554  2000              MOVS     r0,#0
000556  f7fffffe          BL       joypad_assigned
00055a  493e              LDR      r1,|L8.1620|
;;;280        joypad_D     = joypad_assigned(ASSIGN_DOWN);
00055c  6008              STR      r0,[r1,#0]  ; joypad_U
00055e  2001              MOVS     r0,#1
000560  f7fffffe          BL       joypad_assigned
000564  493c              LDR      r1,|L8.1624|
;;;281        joypad_L     = joypad_assigned(ASSIGN_LEFT);
000566  6008              STR      r0,[r1,#0]  ; joypad_D
000568  2002              MOVS     r0,#2
00056a  f7fffffe          BL       joypad_assigned
00056e  493b              LDR      r1,|L8.1628|
;;;282        joypad_R     = joypad_assigned(ASSIGN_RIGHT);
000570  6008              STR      r0,[r1,#0]  ; joypad_L
000572  2003              MOVS     r0,#3
000574  f7fffffe          BL       joypad_assigned
000578  4939              LDR      r1,|L8.1632|
;;;283        joypad_SEL   = joypad_assigned(ASSIGN_SEL);
00057a  6008              STR      r0,[r1,#0]  ; joypad_R
00057c  2007              MOVS     r0,#7
00057e  f7fffffe          BL       joypad_assigned
000582  4938              LDR      r1,|L8.1636|
;;;284        joypad_START = joypad_assigned(ASSIGN_START);
000584  6008              STR      r0,[r1,#0]  ; joypad_SEL
000586  2006              MOVS     r0,#6
000588  f7fffffe          BL       joypad_assigned
00058c  4936              LDR      r1,|L8.1640|
;;;285    
;;;286        // tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;287      #endif
;;;288        tft_prints(0,  14, "{SEL}");
00058e  a237              ADR      r2,|L8.1644|
000590  6008              STR      r0,[r1,#0]  ; joypad_START
000592  210e              MOVS     r1,#0xe
000594  2000              MOVS     r0,#0
000596  f7fffffe          BL       tft_prints
;;;289        tft_prints(36, 14, "{STRT}");
00059a  a236              ADR      r2,|L8.1652|
00059c  210e              MOVS     r1,#0xe
00059e  2024              MOVS     r0,#0x24
0005a0  f7fffffe          BL       tft_prints
;;;290        tft_printc(5, 1, " __    __  ________   ______   \n\
0005a4  4a35              LDR      r2,|L8.1660|
0005a6  2101              MOVS     r1,#1
0005a8  2005              MOVS     r0,#5
0005aa  f7fffffe          BL       tft_printc
;;;291    /  \\  /  |/        | /      \\ \n\
;;;292    [$$]  \\ [$$] |[$$$$$$$$]/ /[$$$$$$]  |\n\
;;;293    [$$$]  \\[$$] |[$$] |__    [$$] \\__[$$]/ \n\
;;;294    [$$$$]  [$$] |[$$]    |   [$$]      \\ \n\
;;;295    [$$] [$$] [$$] |[$$$$$]/     [$$$$$$]  |\n\
;;;296    [$$] |[$$$$] |[$$] |_____ /  \\__[$$] |\n\
;;;297    [$$] | [$$$] |[$$]       |[$$]    [$$]/ \n\
;;;298    [$$]/   [$$]/ [$$$$$$$$]/  [$$$$$$]/  ");
;;;299    
;;;300        //tft_prints(0,13, "%sIMU]",(getIMUControl())?"[":"");
;;;301        // IMU_dataAvailable();
;;;302        // tft_printi(6,11,(int16_t)getAccelY()*10);
;;;303        // tft_printi(0, 1, get_ticks()%1000);
;;;304        // tft_printi(5,1,(int16_t)(getQuatI()*1000));
;;;305        // tft_printi(5,2,(int16_t)(getQuatJ()*1000));
;;;306        // tft_printi(5,3,(int16_t)(getQuatK()*1000));
;;;307        // tft_printi(5,4,(int16_t)(getQuatReal()*1000));
;;;308        // tft_printi(10,1,(int16_t)(getRoll()*10));
;;;309        // tft_printi(10,2,(int16_t)(getPitch()*10));
;;;310        // tft_printi(10,3,(int16_t)(getYaw()*10));
;;;311        // tft_printi(5,2,(int16_t)(getAccelX()*1000));
;;;312    
;;;313        // tft_printi(5,1,getAccelLeftRight());
;;;314        // static uint8_t asdf = 0;
;;;315        // tft_printi(5,4,asdf+= getAccelFlick());
;;;316    
;;;317        tft_update();
0005ae  f7fffffe          BL       tft_update
;;;318        
;;;319        static uint32_t last_blink = 0;
;;;320        if ((get_ticks() - last_blink) > 100) {
0005b2  6868              LDR      r0,[r5,#4]  ; __ticks
0005b4  6969              LDR      r1,[r5,#0x14]  ; last_blink
0005b6  1a40              SUBS     r0,r0,r1
0005b8  2864              CMP      r0,#0x64
0005ba  d906              BLS      |L8.1482|
0005bc  4830              LDR      r0,|L8.1664|
0005be  6941              LDR      r1,[r0,#0x14]         ;277
0005c0  f4814180          EOR      r1,r1,#0x4000         ;277
0005c4  6141              STR      r1,[r0,#0x14]         ;277
;;;321          gpio_toggle(LED2);
;;;322          last_blink = get_ticks();
0005c6  6868              LDR      r0,[r5,#4]  ; __ticks
0005c8  6168              STR      r0,[r5,#0x14]  ; last_blink
                  |L8.1482|
;;;323        }
;;;324    		
;;;325        if (btn_clicked(BTN_X3)) {
0005ca  f8df90b8          LDR      r9,|L8.1668|
0005ce  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0005d2  f4107f80          TST      r0,#0x100
0005d6  d00e              BEQ      |L8.1526|
0005d8  8a28              LDRH     r0,[r5,#0x10]  ; last_joypad_state
0005da  f4107f80          TST      r0,#0x100
0005de  d10a              BNE      |L8.1526|
;;;326          GAME_SELECT++;
;;;327          GAME_SELECT %= 3;
0005e0  68e8              LDR      r0,[r5,#0xc]  ; GAME_SELECT
0005e2  4929              LDR      r1,|L8.1672|
0005e4  1c40              ADDS     r0,r0,#1
0005e6  fb812100          SMULL    r2,r1,r1,r0
0005ea  eba171e1          SUB      r1,r1,r1,ASR #31
0005ee  eba10181          SUB      r1,r1,r1,LSL #2
0005f2  4408              ADD      r0,r0,r1
0005f4  60e8              STR      r0,[r5,#0xc]  ; GAME_SELECT
                  |L8.1526|
;;;328        }
;;;329        if (btn_clicked(BTN_X4)) {
0005f6  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
0005fa  f4107f00          TST      r0,#0x200
0005fe  d003              BEQ      |L8.1544|
000600  8a28              LDRH     r0,[r5,#0x10]  ; last_joypad_state
000602  f4107f00          TST      r0,#0x200
000606  d003              BEQ      |L8.1552|
                  |L8.1544|
;;;330          nes_init(rom_select(GAME_SELECT));
;;;331    
;;;332          while (1) 
;;;333    			{	
;;;334            if (TIM6->SR & TIM_SR_UIF) 
;;;335    				{
;;;336              //IMU_dataAvailable();
;;;337              joypad_update();
;;;338              TIM6->SR = 0;
;;;339              //nes_frame(0);
;;;340              nes_frame(1);
;;;341              if (btn_clicked(BTN_X3))
;;;342    					{
;;;343    						cpu_reset();
;;;344    					}
;;;345            } 
;;;346          }
;;;347        }
;;;348        last_joypad_state = joypad_state;
000608  f8d90000          LDR      r0,[r9,#0]  ; joypad_state
00060c  6128              STR      r0,[r5,#0x10]         ;225  ; last_joypad_state
00060e  e603              B        |L8.536|
                  |L8.1552|
000610  68e8              LDR      r0,[r5,#0xc]          ;330  ; GAME_SELECT
000612  f7fffffe          BL       rom_select
000616  f7fffffe          BL       nes_init
00061a  4c1c              LDR      r4,|L8.1676|
00061c  2600              MOVS     r6,#0                 ;330
                  |L8.1566|
00061e  6920              LDR      r0,[r4,#0x10]         ;334
000620  f0100f01          TST      r0,#1                 ;334
000624  d0fb              BEQ      |L8.1566|
000626  f7fffffe          BL       joypad_update
00062a  6126              STR      r6,[r4,#0x10]         ;338
00062c  2001              MOVS     r0,#1                 ;340
00062e  f7fffffe          BL       nes_frame
000632  f8d90000          LDR      r0,[r9,#0]            ;341  ; joypad_state
000636  f4107f80          TST      r0,#0x100             ;341
00063a  d0f0              BEQ      |L8.1566|
00063c  8a28              LDRH     r0,[r5,#0x10]         ;341  ; last_joypad_state
00063e  f4107f80          TST      r0,#0x100             ;341
000642  bf08              IT       EQ                    ;343
000644  f7fffffe          BLEQ     cpu_reset
000648  e7e9              B        |L8.1566|
;;;349        /* USER CODE END WHILE */
;;;350    
;;;351        /* USER CODE BEGIN 3 */
;;;352      }
;;;353      /* USER CODE END 3 */
;;;354    }
;;;355    
                          ENDP

00064a  0000              DCW      0x0000
                  |L8.1612|
                          DCD      joypad_A
                  |L8.1616|
                          DCD      joypad_B
                  |L8.1620|
                          DCD      joypad_U
                  |L8.1624|
                          DCD      joypad_D
                  |L8.1628|
                          DCD      joypad_L
                  |L8.1632|
                          DCD      joypad_R
                  |L8.1636|
                          DCD      joypad_SEL
                  |L8.1640|
                          DCD      joypad_START
                  |L8.1644|
00066c  7b53454c          DCB      "{SEL}",0
000670  7d00    
000672  00                DCB      0
000673  00                DCB      0
                  |L8.1652|
000674  7b535452          DCB      "{STRT}",0
000678  547d00  
00067b  00                DCB      0
                  |L8.1660|
                          DCD      ||.conststring||
                  |L8.1664|
                          DCD      0x40020c00
                  |L8.1668|
                          DCD      joypad_state
                  |L8.1672|
                          DCD      0x55555556
                  |L8.1676|
                          DCD      0x40001000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  joypad_assignments
                          %        24

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  205f5f20          DCB      " __    __  ________   ______   \n/  \\  /  |/        | "
000004  2020205f
000008  5f20205f
00000c  5f5f5f5f
000010  5f5f5f20
000014  20205f5f
000018  5f5f5f5f
00001c  2020200a
000020  2f20205c
000024  20202f20
000028  207c2f20
00002c  20202020
000030  2020207c
000034  20      
000035  2f202020          DCB      "/      \\ \n[$$$$]  \\ [$$$$] |[$$$$$$$$$$$$$$$$]/ /[$$"
000039  2020205c
00003d  200a5b24
000041  245d2020
000045  5c205b24
000049  245d207c
00004d  5b242424
000051  24242424
000055  245d2f20
000059  2f5b24  
00005c  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$$$]  \\[$$$$] |[$$$$] |__    [$$$$"
000060  245d2020
000064  7c0a5b24
000068  24245d20
00006c  205c5b24
000070  245d207c
000074  5b24245d
000078  207c5f5f
00007c  20202020
000080  5b2424  
000083  5d205c5f          DCB      "] \\__[$$$$]/ \n[$$$$$$$$]  [$$$$] |[$$$$]    |   [$$$$"
000087  5f5b2424
00008b  5d2f200a
00008f  5b242424
000093  245d2020
000097  5b24245d
00009b  207c5b24
00009f  245d2020
0000a3  20207c20
0000a7  20205b24
0000ab  24      
0000ac  5d202020          DCB      "]      \\ \n[$$$$] [$$$$] [$$$$] |[$$$$$$$$$$]/     [$$"
0000b0  2020205c
0000b4  200a5b24
0000b8  245d205b
0000bc  24245d20
0000c0  5b24245d
0000c4  207c5b24
0000c8  24242424
0000cc  5d2f2020
0000d0  2020205b
0000d4  24      
0000d5  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$] |[$$$$$$$$] |[$$$$] |_____ /  \\"
0000d9  245d2020
0000dd  7c0a5b24
0000e1  245d207c
0000e5  5b242424
0000e9  245d207c
0000ed  5b24245d
0000f1  207c5f5f
0000f5  5f5f5f20
0000f9  2f20205c
0000fd  5f5f5b24          DCB      "__[$$$$] |\n[$$$$] | [$$$$$$] |[$$$$]       |[$$$$]    "
000101  245d207c
000105  0a5b2424
000109  5d207c20
00010d  5b242424
000111  5d207c5b
000115  24245d20
000119  20202020
00011d  20207c5b
000121  24245d20
000125  202020  
000128  5b24245d          DCB      "[$$$$]/ \n[$$$$]/   [$$$$]/ [$$$$$$$$$$$$$$$$]/  [$$$$$$"
00012c  2f200a5b
000130  24245d2f
000134  2020205b
000138  24245d2f
00013c  205b2424
000140  24242424
000144  24245d2f
000148  20205b24
00014c  2424    
00014e  2424245d          DCB      "$$$$$$]/  ",0
000152  2f202000

                          AREA ||.data||, DATA, ALIGN=2

                  assignable_buttons
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                          DCD      0x00008000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00010000
                          DCD      0x00020000
                          DCD      0x00040000
                          DCD      0x00080000
                          DCD      0x00100000
                          DCD      0x00200000
                          DCD      0x00400000
                          DCD      0x00800000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  __tickf
000000  01000000          DCB      0x01,0x00,0x00,0x00
                  __ticks
                          DCD      0x00000000
                  __delay
                          DCD      0x00000000
                  GAME_SELECT
                          DCD      0x00000000
                  last_joypad_state
                          DCD      0x00000000
                  last_blink
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_e9093bf9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REVSH|
#line 402
|__asm___6_main_c_e9093bf9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____RRX|
#line 587
|__asm___6_main_c_e9093bf9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
