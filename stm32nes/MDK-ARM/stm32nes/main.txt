; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\main.o --depend=stm32nes\main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;416      */
;;;417    void Error_Handler(void)
000000  4770              BX       lr
;;;418    {
;;;419      /* USER CODE BEGIN Error_Handler_Debug */
;;;420      /* User can add his own implementation to report the HAL error return state */
;;;421    
;;;422      /* USER CODE END Error_Handler_Debug */
;;;423    }
;;;424    
                          ENDP


                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;406    }
;;;407    uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L2.8|
;;;408    {
;;;409      return __ticks;
000002  6800              LDR      r0,[r0,#0]  ; __ticks
;;;410    }
000004  4770              BX       lr
;;;411    /* USER CODE END 4 */
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      __ticks

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;401    volatile uint8_t  __tickf = 1;
;;;402    void SysTick_Handler(void) {
000000  4808              LDR      r0,|L3.36|
;;;403    	__ticks++;
000002  6800              LDR      r0,[r0,#0]  ; __ticks
000004  1c40              ADDS     r0,r0,#1
000006  4907              LDR      r1,|L3.36|
000008  6008              STR      r0,[r1,#0]  ; __ticks
;;;404    	__tickf = 0;
00000a  2000              MOVS     r0,#0
00000c  4906              LDR      r1,|L3.40|
00000e  7008              STRB     r0,[r1,#0]
;;;405    	if (__delay) __delay--;
000010  4806              LDR      r0,|L3.44|
000012  6800              LDR      r0,[r0,#0]  ; __delay
000014  b120              CBZ      r0,|L3.32|
000016  4805              LDR      r0,|L3.44|
000018  6800              LDR      r0,[r0,#0]  ; __delay
00001a  1e40              SUBS     r0,r0,#1
00001c  4903              LDR      r1,|L3.44|
00001e  6008              STR      r0,[r1,#0]  ; __delay
                  |L3.32|
;;;406    }
000020  4770              BX       lr
;;;407    uint32_t HAL_GetTick(void)
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      __ticks
                  |L3.40|
                          DCD      __tickf
                  |L3.44|
                          DCD      __delay

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;358      */
;;;359    void SystemClock_Config(void)
000000  b570              PUSH     {r4-r6,lr}
;;;360    {
;;;361      LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
000002  2005              MOVS     r0,#5
000004  494f              LDR      r1,|L4.324|
000006  6809              LDR      r1,[r1,#0]
000008  f021010f          BIC      r1,r1,#0xf
00000c  4301              ORRS     r1,r1,r0
00000e  4a4d              LDR      r2,|L4.324|
000010  6011              STR      r1,[r2,#0]
000012  bf00              NOP      
;;;362    
;;;363      if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
000014  bf00              NOP      
000016  4610              MOV      r0,r2
000018  6800              LDR      r0,[r0,#0]
00001a  f000000f          AND      r0,r0,#0xf
00001e  2805              CMP      r0,#5
000020  d001              BEQ      |L4.38|
;;;364      {
;;;365      Error_Handler();  
000022  f7fffffe          BL       Error_Handler
                  |L4.38|
;;;366      }
;;;367      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
000026  f44f4040          MOV      r0,#0xc000
00002a  4947              LDR      r1,|L4.328|
00002c  6809              LDR      r1,[r1,#0]
00002e  f4214140          BIC      r1,r1,#0xc000
000032  4301              ORRS     r1,r1,r0
000034  4a44              LDR      r2,|L4.328|
000036  6011              STR      r1,[r2,#0]
000038  bf00              NOP      
;;;368      LL_RCC_HSE_Enable();
00003a  bf00              NOP      
00003c  4843              LDR      r0,|L4.332|
00003e  6800              LDR      r0,[r0,#0]
000040  f4403080          ORR      r0,r0,#0x10000
000044  4941              LDR      r1,|L4.332|
000046  6008              STR      r0,[r1,#0]
000048  bf00              NOP      
;;;369    
;;;370       /* Wait till HSE is ready */
;;;371      while(LL_RCC_HSE_IsReady() != 1)
00004a  bf00              NOP      
                  |L4.76|
00004c  bf00              NOP      
00004e  483f              LDR      r0,|L4.332|
000050  6800              LDR      r0,[r0,#0]
000052  f3c04040          UBFX     r0,r0,#17,#1
000056  2800              CMP      r0,#0
000058  d0f8              BEQ      |L4.76|
;;;372      {
;;;373        
;;;374      }
;;;375      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
00005a  f44f0080          MOV      r0,#0x400000
00005e  2108              MOVS     r1,#8
000060  f44f72a8          MOV      r2,#0x150
000064  2300              MOVS     r3,#0
000066  ea400401          ORR      r4,r0,r1
00006a  ea441482          ORR      r4,r4,r2,LSL #6
00006e  4d37              LDR      r5,|L4.332|
000070  1d2d              ADDS     r5,r5,#4
000072  682d              LDR      r5,[r5,#0]
000074  4e36              LDR      r6,|L4.336|
000076  4035              ANDS     r5,r5,r6
000078  432c              ORRS     r4,r4,r5
00007a  4d34              LDR      r5,|L4.332|
00007c  1d2d              ADDS     r5,r5,#4
00007e  602c              STR      r4,[r5,#0]
000080  462c              MOV      r4,r5
000082  6824              LDR      r4,[r4,#0]
000084  f4243440          BIC      r4,r4,#0x30000
000088  431c              ORRS     r4,r4,r3
00008a  602c              STR      r4,[r5,#0]
00008c  bf00              NOP      
;;;376      LL_RCC_PLL_Enable();
00008e  bf00              NOP      
000090  1f28              SUBS     r0,r5,#4
000092  6800              LDR      r0,[r0,#0]
000094  f0407080          ORR      r0,r0,#0x1000000
000098  1f29              SUBS     r1,r5,#4
00009a  6008              STR      r0,[r1,#0]
00009c  bf00              NOP      
;;;377    
;;;378       /* Wait till PLL is ready */
;;;379      while(LL_RCC_PLL_IsReady() != 1)
00009e  bf00              NOP      
                  |L4.160|
0000a0  bf00              NOP      
0000a2  482a              LDR      r0,|L4.332|
0000a4  6800              LDR      r0,[r0,#0]
0000a6  f3c06040          UBFX     r0,r0,#25,#1
0000aa  2800              CMP      r0,#0
0000ac  d0f8              BEQ      |L4.160|
;;;380      {
;;;381        
;;;382      }
;;;383      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
0000ae  2000              MOVS     r0,#0
0000b0  4926              LDR      r1,|L4.332|
0000b2  3108              ADDS     r1,r1,#8
0000b4  6809              LDR      r1,[r1,#0]
0000b6  f02101f0          BIC      r1,r1,#0xf0
0000ba  4301              ORRS     r1,r1,r0
0000bc  4a23              LDR      r2,|L4.332|
0000be  3208              ADDS     r2,r2,#8
0000c0  6011              STR      r1,[r2,#0]
0000c2  bf00              NOP      
;;;384      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
0000c4  f44f50a0          MOV      r0,#0x1400
0000c8  4611              MOV      r1,r2
0000ca  6809              LDR      r1,[r1,#0]
0000cc  f42151e0          BIC      r1,r1,#0x1c00
0000d0  4301              ORRS     r1,r1,r0
0000d2  6011              STR      r1,[r2,#0]
0000d4  bf00              NOP      
;;;385      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
0000d6  f44f4000          MOV      r0,#0x8000
0000da  4611              MOV      r1,r2
0000dc  6809              LDR      r1,[r1,#0]
0000de  f4214160          BIC      r1,r1,#0xe000
0000e2  4301              ORRS     r1,r1,r0
0000e4  6011              STR      r1,[r2,#0]
0000e6  bf00              NOP      
;;;386      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
0000e8  2002              MOVS     r0,#2
0000ea  4611              MOV      r1,r2
0000ec  6809              LDR      r1,[r1,#0]
0000ee  f0210103          BIC      r1,r1,#3
0000f2  4301              ORRS     r1,r1,r0
0000f4  6011              STR      r1,[r2,#0]
0000f6  bf00              NOP      
;;;387    
;;;388       /* Wait till System clock is ready */
;;;389      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
0000f8  bf00              NOP      
                  |L4.250|
0000fa  bf00              NOP      
0000fc  4813              LDR      r0,|L4.332|
0000fe  3008              ADDS     r0,r0,#8
000100  6800              LDR      r0,[r0,#0]
000102  f000000c          AND      r0,r0,#0xc
000106  2808              CMP      r0,#8
000108  d1f7              BNE      |L4.250|
;;;390      {
;;;391      
;;;392      }
;;;393      LL_Init1msTick(168000000);
00010a  4812              LDR      r0,|L4.340|
00010c  f7fffffe          BL       LL_Init1msTick
;;;394      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
000110  2004              MOVS     r0,#4
000112  2804              CMP      r0,#4
000114  d108              BNE      |L4.296|
000116  f04f21e0          MOV      r1,#0xe000e000
00011a  6909              LDR      r1,[r1,#0x10]
00011c  f0410104          ORR      r1,r1,#4
000120  f04f22e0          MOV      r2,#0xe000e000
000124  6111              STR      r1,[r2,#0x10]
000126  e007              B        |L4.312|
                  |L4.296|
000128  f04f21e0          MOV      r1,#0xe000e000
00012c  6909              LDR      r1,[r1,#0x10]
00012e  f0210104          BIC      r1,r1,#4
000132  f04f22e0          MOV      r2,#0xe000e000
000136  6111              STR      r1,[r2,#0x10]
                  |L4.312|
000138  bf00              NOP      
;;;395      LL_SetSystemCoreClock(168000000);
00013a  4806              LDR      r0,|L4.340|
00013c  f7fffffe          BL       LL_SetSystemCoreClock
;;;396    }
000140  bd70              POP      {r4-r6,pc}
;;;397    
                          ENDP

000142  0000              DCW      0x0000
                  |L4.324|
                          DCD      0x40023c00
                  |L4.328|
                          DCD      0x40007000
                  |L4.332|
                          DCD      0x40023800
                  |L4.336|
                          DCD      0xffbf8000
                  |L4.340|
                          DCD      0x0a037a00

                          AREA ||i.joypad_assigned||, CODE, READONLY, ALIGN=2

                  joypad_assigned PROC
;;;104    }
;;;105    uint32_t joypad_assigned(uint8_t i) {
000000  4601              MOV      r1,r0
;;;106      uint32_t mask = 0;
000002  2000              MOVS     r0,#0
;;;107      if (joypad_assignments[idx_from_mask(BTN_R1)]    == i) mask |= BTN_R1;
000004  2204              MOVS     r2,#4
000006  fab2f382          CLZ      r3,r2
00000a  f1c30320          RSB      r3,r3,#0x20
00000e  b2db              UXTB     r3,r3
000010  4aa8              LDR      r2,|L5.692|
000012  5cd2              LDRB     r2,[r2,r3]
000014  428a              CMP      r2,r1
000016  d101              BNE      |L5.28|
000018  f0400004          ORR      r0,r0,#4
                  |L5.28|
;;;108      if (joypad_assignments[idx_from_mask(BTN_D1)]    == i) mask |= BTN_D1;
00001c  2208              MOVS     r2,#8
00001e  fab2f382          CLZ      r3,r2
000022  f1c30320          RSB      r3,r3,#0x20
000026  b2db              UXTB     r3,r3
000028  4aa2              LDR      r2,|L5.692|
00002a  5cd2              LDRB     r2,[r2,r3]
00002c  428a              CMP      r2,r1
00002e  d101              BNE      |L5.52|
000030  f0400008          ORR      r0,r0,#8
                  |L5.52|
;;;109      if (joypad_assignments[idx_from_mask(BTN_L1)]    == i) mask |= BTN_L1;
000034  2210              MOVS     r2,#0x10
000036  fab2f382          CLZ      r3,r2
00003a  f1c30320          RSB      r3,r3,#0x20
00003e  b2db              UXTB     r3,r3
000040  4a9c              LDR      r2,|L5.692|
000042  5cd2              LDRB     r2,[r2,r3]
000044  428a              CMP      r2,r1
000046  d101              BNE      |L5.76|
000048  f0400010          ORR      r0,r0,#0x10
                  |L5.76|
;;;110      if (joypad_assignments[idx_from_mask(BTN_M1)]    == i) mask |= BTN_M1;
00004c  2220              MOVS     r2,#0x20
00004e  fab2f382          CLZ      r3,r2
000052  f1c30320          RSB      r3,r3,#0x20
000056  b2db              UXTB     r3,r3
000058  4a96              LDR      r2,|L5.692|
00005a  5cd2              LDRB     r2,[r2,r3]
00005c  428a              CMP      r2,r1
00005e  d101              BNE      |L5.100|
000060  f0400020          ORR      r0,r0,#0x20
                  |L5.100|
;;;111      if (joypad_assignments[idx_from_mask(BTN_X1)]    == i) mask |= BTN_X1;
000064  2240              MOVS     r2,#0x40
000066  fab2f382          CLZ      r3,r2
00006a  f1c30320          RSB      r3,r3,#0x20
00006e  b2db              UXTB     r3,r3
000070  4a90              LDR      r2,|L5.692|
000072  5cd2              LDRB     r2,[r2,r3]
000074  428a              CMP      r2,r1
000076  d101              BNE      |L5.124|
000078  f0400040          ORR      r0,r0,#0x40
                  |L5.124|
;;;112      if (joypad_assignments[idx_from_mask(BTN_X2)]    == i) mask |= BTN_X2;
00007c  2280              MOVS     r2,#0x80
00007e  fab2f382          CLZ      r3,r2
000082  f1c30320          RSB      r3,r3,#0x20
000086  b2db              UXTB     r3,r3
000088  4a8a              LDR      r2,|L5.692|
00008a  5cd2              LDRB     r2,[r2,r3]
00008c  428a              CMP      r2,r1
00008e  d101              BNE      |L5.148|
000090  f0400080          ORR      r0,r0,#0x80
                  |L5.148|
;;;113      if (joypad_assignments[idx_from_mask(BTN_X3)]    == i) mask |= BTN_X3;
000094  f44f7280          MOV      r2,#0x100
000098  fab2f382          CLZ      r3,r2
00009c  f1c30320          RSB      r3,r3,#0x20
0000a0  b2db              UXTB     r3,r3
0000a2  4a84              LDR      r2,|L5.692|
0000a4  5cd2              LDRB     r2,[r2,r3]
0000a6  428a              CMP      r2,r1
0000a8  d101              BNE      |L5.174|
0000aa  f4407080          ORR      r0,r0,#0x100
                  |L5.174|
;;;114      if (joypad_assignments[idx_from_mask(BTN_X4)]    == i) mask |= BTN_X4;
0000ae  f44f7200          MOV      r2,#0x200
0000b2  fab2f382          CLZ      r3,r2
0000b6  f1c30320          RSB      r3,r3,#0x20
0000ba  b2db              UXTB     r3,r3
0000bc  4a7d              LDR      r2,|L5.692|
0000be  5cd2              LDRB     r2,[r2,r3]
0000c0  428a              CMP      r2,r1
0000c2  d101              BNE      |L5.200|
0000c4  f4407000          ORR      r0,r0,#0x200
                  |L5.200|
;;;115      if (joypad_assignments[idx_from_mask(BTN_JS2)]   == i) mask |= BTN_JS2;
0000c8  f44f6280          MOV      r2,#0x400
0000cc  fab2f382          CLZ      r3,r2
0000d0  f1c30320          RSB      r3,r3,#0x20
0000d4  b2db              UXTB     r3,r3
0000d6  4a77              LDR      r2,|L5.692|
0000d8  5cd2              LDRB     r2,[r2,r3]
0000da  428a              CMP      r2,r1
0000dc  d101              BNE      |L5.226|
0000de  f4406080          ORR      r0,r0,#0x400
                  |L5.226|
;;;116      if (joypad_assignments[idx_from_mask(BTN_D2)]    == i) mask |= BTN_D2;
0000e2  f44f6200          MOV      r2,#0x800
0000e6  fab2f382          CLZ      r3,r2
0000ea  f1c30320          RSB      r3,r3,#0x20
0000ee  b2db              UXTB     r3,r3
0000f0  4a70              LDR      r2,|L5.692|
0000f2  5cd2              LDRB     r2,[r2,r3]
0000f4  428a              CMP      r2,r1
0000f6  d101              BNE      |L5.252|
0000f8  f4406000          ORR      r0,r0,#0x800
                  |L5.252|
;;;117      if (joypad_assignments[idx_from_mask(BTN_R2)]    == i) mask |= BTN_R2;
0000fc  f44f5280          MOV      r2,#0x1000
000100  fab2f382          CLZ      r3,r2
000104  f1c30320          RSB      r3,r3,#0x20
000108  b2db              UXTB     r3,r3
00010a  4a6a              LDR      r2,|L5.692|
00010c  5cd2              LDRB     r2,[r2,r3]
00010e  428a              CMP      r2,r1
000110  d101              BNE      |L5.278|
000112  f4405080          ORR      r0,r0,#0x1000
                  |L5.278|
;;;118      if (joypad_assignments[idx_from_mask(BTN_M2)]    == i) mask |= BTN_M2;
000116  f44f5200          MOV      r2,#0x2000
00011a  fab2f382          CLZ      r3,r2
00011e  f1c30320          RSB      r3,r3,#0x20
000122  b2db              UXTB     r3,r3
000124  4a63              LDR      r2,|L5.692|
000126  5cd2              LDRB     r2,[r2,r3]
000128  428a              CMP      r2,r1
00012a  d101              BNE      |L5.304|
00012c  f4405000          ORR      r0,r0,#0x2000
                  |L5.304|
;;;119      if (joypad_assignments[idx_from_mask(BTN_U2)]    == i) mask |= BTN_U2;
000130  f44f4280          MOV      r2,#0x4000
000134  fab2f382          CLZ      r3,r2
000138  f1c30320          RSB      r3,r3,#0x20
00013c  b2db              UXTB     r3,r3
00013e  4a5d              LDR      r2,|L5.692|
000140  5cd2              LDRB     r2,[r2,r3]
000142  428a              CMP      r2,r1
000144  d101              BNE      |L5.330|
000146  f4404080          ORR      r0,r0,#0x4000
                  |L5.330|
;;;120      if (joypad_assignments[idx_from_mask(BTN_L2)]    == i) mask |= BTN_L2;
00014a  f44f4200          MOV      r2,#0x8000
00014e  fab2f382          CLZ      r3,r2
000152  f1c30320          RSB      r3,r3,#0x20
000156  b2db              UXTB     r3,r3
000158  4a56              LDR      r2,|L5.692|
00015a  5cd2              LDRB     r2,[r2,r3]
00015c  428a              CMP      r2,r1
00015e  d101              BNE      |L5.356|
000160  f4404000          ORR      r0,r0,#0x8000
                  |L5.356|
;;;121      if (joypad_assignments[idx_from_mask(BTN_JS1)]   == i) mask |= BTN_JS1;
000164  2201              MOVS     r2,#1
000166  fab2f382          CLZ      r3,r2
00016a  f1c30320          RSB      r3,r3,#0x20
00016e  b2db              UXTB     r3,r3
000170  4a50              LDR      r2,|L5.692|
000172  5cd2              LDRB     r2,[r2,r3]
000174  428a              CMP      r2,r1
000176  d101              BNE      |L5.380|
000178  f0400001          ORR      r0,r0,#1
                  |L5.380|
;;;122      if (joypad_assignments[idx_from_mask(BTN_U1)]    == i) mask |= BTN_U1;
00017c  2202              MOVS     r2,#2
00017e  fab2f382          CLZ      r3,r2
000182  f1c30320          RSB      r3,r3,#0x20
000186  b2db              UXTB     r3,r3
000188  4a4a              LDR      r2,|L5.692|
00018a  5cd2              LDRB     r2,[r2,r3]
00018c  428a              CMP      r2,r1
00018e  d101              BNE      |L5.404|
000190  f0400002          ORR      r0,r0,#2
                  |L5.404|
;;;123      if (joypad_assignments[idx_from_mask(BTN_JS1_L)] == i) mask |= BTN_JS1_L;
000194  f44f3280          MOV      r2,#0x10000
000198  fab2f382          CLZ      r3,r2
00019c  f1c30320          RSB      r3,r3,#0x20
0001a0  b2db              UXTB     r3,r3
0001a2  4a44              LDR      r2,|L5.692|
0001a4  5cd2              LDRB     r2,[r2,r3]
0001a6  428a              CMP      r2,r1
0001a8  d101              BNE      |L5.430|
0001aa  f4403080          ORR      r0,r0,#0x10000
                  |L5.430|
;;;124      if (joypad_assignments[idx_from_mask(BTN_JS1_R)] == i) mask |= BTN_JS1_R;
0001ae  f44f3200          MOV      r2,#0x20000
0001b2  fab2f382          CLZ      r3,r2
0001b6  f1c30320          RSB      r3,r3,#0x20
0001ba  b2db              UXTB     r3,r3
0001bc  4a3d              LDR      r2,|L5.692|
0001be  5cd2              LDRB     r2,[r2,r3]
0001c0  428a              CMP      r2,r1
0001c2  d101              BNE      |L5.456|
0001c4  f4403000          ORR      r0,r0,#0x20000
                  |L5.456|
;;;125      if (joypad_assignments[idx_from_mask(BTN_JS1_D)] == i) mask |= BTN_JS1_D;
0001c8  f44f2280          MOV      r2,#0x40000
0001cc  fab2f382          CLZ      r3,r2
0001d0  f1c30320          RSB      r3,r3,#0x20
0001d4  b2db              UXTB     r3,r3
0001d6  4a37              LDR      r2,|L5.692|
0001d8  5cd2              LDRB     r2,[r2,r3]
0001da  428a              CMP      r2,r1
0001dc  d101              BNE      |L5.482|
0001de  f4402080          ORR      r0,r0,#0x40000
                  |L5.482|
;;;126      if (joypad_assignments[idx_from_mask(BTN_JS1_U)] == i) mask |= BTN_JS1_U;
0001e2  f44f2200          MOV      r2,#0x80000
0001e6  fab2f382          CLZ      r3,r2
0001ea  f1c30320          RSB      r3,r3,#0x20
0001ee  b2db              UXTB     r3,r3
0001f0  4a30              LDR      r2,|L5.692|
0001f2  5cd2              LDRB     r2,[r2,r3]
0001f4  428a              CMP      r2,r1
0001f6  d101              BNE      |L5.508|
0001f8  f4402000          ORR      r0,r0,#0x80000
                  |L5.508|
;;;127      if (joypad_assignments[idx_from_mask(BTN_JS2_L)] == i) mask |= BTN_JS2_L;
0001fc  f44f1280          MOV      r2,#0x100000
000200  fab2f382          CLZ      r3,r2
000204  f1c30320          RSB      r3,r3,#0x20
000208  b2db              UXTB     r3,r3
00020a  4a2a              LDR      r2,|L5.692|
00020c  5cd2              LDRB     r2,[r2,r3]
00020e  428a              CMP      r2,r1
000210  d101              BNE      |L5.534|
000212  f4401080          ORR      r0,r0,#0x100000
                  |L5.534|
;;;128      if (joypad_assignments[idx_from_mask(BTN_JS2_R)] == i) mask |= BTN_JS2_R;
000216  f44f1200          MOV      r2,#0x200000
00021a  fab2f382          CLZ      r3,r2
00021e  f1c30320          RSB      r3,r3,#0x20
000222  b2db              UXTB     r3,r3
000224  4a23              LDR      r2,|L5.692|
000226  5cd2              LDRB     r2,[r2,r3]
000228  428a              CMP      r2,r1
00022a  d101              BNE      |L5.560|
00022c  f4401000          ORR      r0,r0,#0x200000
                  |L5.560|
;;;129      if (joypad_assignments[idx_from_mask(BTN_JS2_D)] == i) mask |= BTN_JS2_D;
000230  f44f0280          MOV      r2,#0x400000
000234  fab2f382          CLZ      r3,r2
000238  f1c30320          RSB      r3,r3,#0x20
00023c  b2db              UXTB     r3,r3
00023e  4a1d              LDR      r2,|L5.692|
000240  5cd2              LDRB     r2,[r2,r3]
000242  428a              CMP      r2,r1
000244  d101              BNE      |L5.586|
000246  f4400080          ORR      r0,r0,#0x400000
                  |L5.586|
;;;130      if (joypad_assignments[idx_from_mask(BTN_JS2_U)] == i) mask |= BTN_JS2_U;
00024a  f44f0200          MOV      r2,#0x800000
00024e  fab2f382          CLZ      r3,r2
000252  f1c30320          RSB      r3,r3,#0x20
000256  b2db              UXTB     r3,r3
000258  4a16              LDR      r2,|L5.692|
00025a  5cd2              LDRB     r2,[r2,r3]
00025c  428a              CMP      r2,r1
00025e  d101              BNE      |L5.612|
000260  f4400000          ORR      r0,r0,#0x800000
                  |L5.612|
;;;131      if (joypad_assignments[idx_from_mask(BTN_IMU_L)] == i) mask |= BTN_IMU_L;
000264  f04f7280          MOV      r2,#0x1000000
000268  fab2f382          CLZ      r3,r2
00026c  f1c30320          RSB      r3,r3,#0x20
000270  b2db              UXTB     r3,r3
000272  4a10              LDR      r2,|L5.692|
000274  5cd2              LDRB     r2,[r2,r3]
000276  428a              CMP      r2,r1
000278  d101              BNE      |L5.638|
00027a  f0407080          ORR      r0,r0,#0x1000000
                  |L5.638|
;;;132      if (joypad_assignments[idx_from_mask(BTN_IMU_R)] == i) mask |= BTN_IMU_R;
00027e  f04f7200          MOV      r2,#0x2000000
000282  fab2f382          CLZ      r3,r2
000286  f1c30320          RSB      r3,r3,#0x20
00028a  b2db              UXTB     r3,r3
00028c  4a09              LDR      r2,|L5.692|
00028e  5cd2              LDRB     r2,[r2,r3]
000290  428a              CMP      r2,r1
000292  d101              BNE      |L5.664|
000294  f0407000          ORR      r0,r0,#0x2000000
                  |L5.664|
;;;133      if (joypad_assignments[idx_from_mask(BTN_IMU_J)] == i) mask |= BTN_IMU_J;
000298  f04f6280          MOV      r2,#0x4000000
00029c  fab2f382          CLZ      r3,r2
0002a0  f1c30320          RSB      r3,r3,#0x20
0002a4  b2db              UXTB     r3,r3
0002a6  4a03              LDR      r2,|L5.692|
0002a8  5cd2              LDRB     r2,[r2,r3]
0002aa  428a              CMP      r2,r1
0002ac  d101              BNE      |L5.690|
0002ae  f0406080          ORR      r0,r0,#0x4000000
                  |L5.690|
;;;134      return mask;
;;;135    }
0002b2  4770              BX       lr
;;;136    /* USER CODE END 0 */
                          ENDP

                  |L5.692|
                          DCD      joypad_assignments

                          AREA ||i.joypad_icon||, CODE, READONLY, ALIGN=2

                  joypad_icon PROC
;;;96     }
;;;97     char joypad_icon(uint32_t i) {
000000  b50c              PUSH     {r2,r3,lr}
000002  4601              MOV      r1,r0
;;;98       const char icons[6] = {'^', 'V', '<', '>', 'A', 'B'};
000004  a207              ADR      r2,|L6.36|
000006  ca05              LDM      r2,{r0,r2}
000008  e9cd0200          STRD     r0,r2,[sp,#0]
;;;99       return icons[joypad_assignments[idx_from_mask(i)]];
00000c  bf00              NOP      
00000e  fab1f081          CLZ      r0,r1
000012  f1c00020          RSB      r0,r0,#0x20
000016  b2c0              UXTB     r0,r0
000018  4a04              LDR      r2,|L6.44|
00001a  5c10              LDRB     r0,[r2,r0]
00001c  f81d0000          LDRB     r0,[sp,r0]
;;;100    }
000020  bd0c              POP      {r2,r3,pc}
;;;101    void joypad_rotate(uint32_t mask) {
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
000024  5e563c3e          DCB      "^V<>AB",0
000028  414200  
00002b  00                DCB      0
                  |L6.44|
                          DCD      joypad_assignments

                          AREA ||i.joypad_rotate||, CODE, READONLY, ALIGN=2

                  joypad_rotate PROC
;;;100    }
;;;101    void joypad_rotate(uint32_t mask) {
000000  b510              PUSH     {r4,lr}
;;;102      joypad_assignments[idx_from_mask(mask)] += 1;
000002  bf00              NOP      
000004  fab0f280          CLZ      r2,r0
000008  f1c20220          RSB      r2,r2,#0x20
00000c  b2d2              UXTB     r2,r2
00000e  4b0a              LDR      r3,|L7.56|
000010  18d1              ADDS     r1,r2,r3
000012  780a              LDRB     r2,[r1,#0]
000014  1c52              ADDS     r2,r2,#1
000016  700a              STRB     r2,[r1,#0]
;;;103      joypad_assignments[idx_from_mask(mask)] %= 6;
000018  bf00              NOP      
00001a  fab0f280          CLZ      r2,r0
00001e  f1c20220          RSB      r2,r2,#0x20
000022  b2d2              UXTB     r2,r2
000024  18d1              ADDS     r1,r2,r3
000026  780a              LDRB     r2,[r1,#0]
000028  2306              MOVS     r3,#6
00002a  fb92f4f3          SDIV     r4,r2,r3
00002e  fb032214          MLS      r2,r3,r4,r2
000032  700a              STRB     r2,[r1,#0]
;;;104    }
000034  bd10              POP      {r4,pc}
;;;105    uint32_t joypad_assigned(uint8_t i) {
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      joypad_assignments

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;141      */
;;;142    int main(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;143    {
;;;144      /* USER CODE BEGIN 1 */
;;;145    
;;;146      /* USER CODE END 1 */
;;;147    
;;;148      /* MCU Configuration--------------------------------------------------------*/
;;;149    
;;;150      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;151      HAL_Init();
000002  f7fffffe          BL       HAL_Init
;;;152    
;;;153      /* USER CODE BEGIN Init */
;;;154    
;;;155      /* USER CODE END Init */
;;;156    
;;;157      /* Configure the system clock */
;;;158      SystemClock_Config();
000006  f7fffffe          BL       SystemClock_Config
;;;159    
;;;160      /* USER CODE BEGIN SysInit */
;;;161    	ticks_init();
00000a  bf00              NOP      
00000c  f04f20e0          MOV      r0,#0xe000e000
000010  6900              LDR      r0,[r0,#0x10]
000012  f0400002          ORR      r0,r0,#2
000016  f04f21e0          MOV      r1,#0xe000e000
00001a  6108              STR      r0,[r1,#0x10]
00001c  bf00              NOP      
;;;162      /* USER CODE END SysInit */
;;;163    
;;;164      /* Initialize all configured peripherals */
;;;165      MX_GPIO_Init();
00001e  f7fffffe          BL       MX_GPIO_Init
;;;166      MX_DMA_Init();
000022  f7fffffe          BL       MX_DMA_Init
;;;167      MX_SPI1_Init();
000026  f7fffffe          BL       MX_SPI1_Init
;;;168      MX_USART1_UART_Init();
00002a  f7fffffe          BL       MX_USART1_UART_Init
;;;169      MX_ADC1_Init();
00002e  f7fffffe          BL       MX_ADC1_Init
;;;170      MX_SPI5_Init();
000032  f7fffffe          BL       MX_SPI5_Init
;;;171      MX_USART2_UART_Init();
000036  f7fffffe          BL       MX_USART2_UART_Init
;;;172      //MX_TIM13_Init();
;;;173      //MX_DAC_Init();
;;;174      MX_TIM14_Init();
00003a  f7fffffe          BL       MX_TIM14_Init
;;;175      MX_TIM12_Init();
00003e  f7fffffe          BL       MX_TIM12_Init
;;;176      MX_TIM11_Init();
000042  f7fffffe          BL       MX_TIM11_Init
;;;177      MX_TIM10_Init();
000046  f7fffffe          BL       MX_TIM10_Init
;;;178      MX_TIM9_Init();
00004a  f7fffffe          BL       MX_TIM9_Init
;;;179      MX_TIM6_Init();
00004e  f7fffffe          BL       MX_TIM6_Init
;;;180      MX_TIM7_Init();
000052  f7fffffe          BL       MX_TIM7_Init
;;;181      //MX_SDIO_SD_Init();
;;;182      /* USER CODE BEGIN 2 */
;;;183      tft_init(PIN_ON_LEFT, BLACK, WHITE, GREEN, RED);
000056  f44f4078          MOV      r0,#0xf800
00005a  f44f63fc          MOV      r3,#0x7e0
00005e  f64f72ff          MOV      r2,#0xffff
000062  2100              MOVS     r1,#0
000064  9000              STR      r0,[sp,#0]
000066  2001              MOVS     r0,#1
000068  f7fffffe          BL       tft_init
;;;184      // IMU_enableAccel(50);
;;;185      joystick_init();
00006c  f7fffffe          BL       joystick_init
;;;186    
;;;187      //Frame timer
;;;188      TIM6->PSC = 83;
000070  2053              MOVS     r0,#0x53
000072  49fe              LDR      r1,|L8.1132|
000074  6288              STR      r0,[r1,#0x28]
;;;189      TIM6->ARR = 33333;
000076  f2482035          MOV      r0,#0x8235
00007a  62c8              STR      r0,[r1,#0x2c]
;;;190      TIM6->CR1 = TIM_CR1_CEN;
00007c  2001              MOVS     r0,#1
00007e  6008              STR      r0,[r1,#0]
;;;191    
;;;192    
;;;193      joypad_assignments[idx_from_mask(BTN_R1)]    = ASSIGN_RIGHT;
000080  2004              MOVS     r0,#4
000082  fab0f180          CLZ      r1,r0
000086  f1c10120          RSB      r1,r1,#0x20
00008a  b2c9              UXTB     r1,r1
00008c  48f8              LDR      r0,|L8.1136|
00008e  2203              MOVS     r2,#3
000090  5442              STRB     r2,[r0,r1]
;;;194      joypad_assignments[idx_from_mask(BTN_D1)]    = ASSIGN_DOWN;
000092  2008              MOVS     r0,#8
000094  fab0f180          CLZ      r1,r0
000098  f1c10120          RSB      r1,r1,#0x20
00009c  b2c9              UXTB     r1,r1
00009e  48f4              LDR      r0,|L8.1136|
0000a0  2201              MOVS     r2,#1
0000a2  5442              STRB     r2,[r0,r1]
;;;195      joypad_assignments[idx_from_mask(BTN_L1)]    = ASSIGN_LEFT;
0000a4  2010              MOVS     r0,#0x10
0000a6  fab0f180          CLZ      r1,r0
0000aa  f1c10120          RSB      r1,r1,#0x20
0000ae  b2c9              UXTB     r1,r1
0000b0  48ef              LDR      r0,|L8.1136|
0000b2  2202              MOVS     r2,#2
0000b4  5442              STRB     r2,[r0,r1]
;;;196      joypad_assignments[idx_from_mask(BTN_M1)]    = ASSIGN_B;
0000b6  2020              MOVS     r0,#0x20
0000b8  fab0f180          CLZ      r1,r0
0000bc  f1c10120          RSB      r1,r1,#0x20
0000c0  b2c9              UXTB     r1,r1
0000c2  48eb              LDR      r0,|L8.1136|
0000c4  2205              MOVS     r2,#5
0000c6  5442              STRB     r2,[r0,r1]
;;;197      joypad_assignments[idx_from_mask(BTN_JS2)]   = ASSIGN_B;
0000c8  f44f6080          MOV      r0,#0x400
0000cc  fab0f180          CLZ      r1,r0
0000d0  f1c10120          RSB      r1,r1,#0x20
0000d4  b2c9              UXTB     r1,r1
0000d6  48e6              LDR      r0,|L8.1136|
0000d8  5442              STRB     r2,[r0,r1]
;;;198      joypad_assignments[idx_from_mask(BTN_D2)]    = ASSIGN_B;
0000da  f44f6000          MOV      r0,#0x800
0000de  fab0f180          CLZ      r1,r0
0000e2  f1c10120          RSB      r1,r1,#0x20
0000e6  b2c9              UXTB     r1,r1
0000e8  48e1              LDR      r0,|L8.1136|
0000ea  5442              STRB     r2,[r0,r1]
;;;199      joypad_assignments[idx_from_mask(BTN_R2)]    = ASSIGN_A;
0000ec  f44f5080          MOV      r0,#0x1000
0000f0  fab0f180          CLZ      r1,r0
0000f4  f1c10120          RSB      r1,r1,#0x20
0000f8  b2c9              UXTB     r1,r1
0000fa  48dd              LDR      r0,|L8.1136|
0000fc  2204              MOVS     r2,#4
0000fe  5442              STRB     r2,[r0,r1]
;;;200      joypad_assignments[idx_from_mask(BTN_M2)]    = ASSIGN_B;
000100  02d0              LSLS     r0,r2,#11
000102  fab0f180          CLZ      r1,r0
000106  f1c10120          RSB      r1,r1,#0x20
00010a  b2c9              UXTB     r1,r1
00010c  48d8              LDR      r0,|L8.1136|
00010e  2205              MOVS     r2,#5
000110  5442              STRB     r2,[r0,r1]
;;;201      joypad_assignments[idx_from_mask(BTN_U2)]    = ASSIGN_A;
000112  f44f4080          MOV      r0,#0x4000
000116  fab0f180          CLZ      r1,r0
00011a  f1c10120          RSB      r1,r1,#0x20
00011e  b2c9              UXTB     r1,r1
000120  48d3              LDR      r0,|L8.1136|
000122  2204              MOVS     r2,#4
000124  5442              STRB     r2,[r0,r1]
;;;202      joypad_assignments[idx_from_mask(BTN_L2)]    = ASSIGN_B;
000126  0350              LSLS     r0,r2,#13
000128  fab0f180          CLZ      r1,r0
00012c  f1c10120          RSB      r1,r1,#0x20
000130  b2c9              UXTB     r1,r1
000132  48cf              LDR      r0,|L8.1136|
000134  2205              MOVS     r2,#5
000136  5442              STRB     r2,[r0,r1]
;;;203      joypad_assignments[idx_from_mask(BTN_JS1)]   = ASSIGN_B;
000138  2001              MOVS     r0,#1
00013a  fab0f180          CLZ      r1,r0
00013e  f1c10120          RSB      r1,r1,#0x20
000142  b2c9              UXTB     r1,r1
000144  48ca              LDR      r0,|L8.1136|
000146  5442              STRB     r2,[r0,r1]
;;;204      joypad_assignments[idx_from_mask(BTN_U1)]    = ASSIGN_UP;
000148  2002              MOVS     r0,#2
00014a  fab0f180          CLZ      r1,r0
00014e  f1c10120          RSB      r1,r1,#0x20
000152  b2c9              UXTB     r1,r1
000154  48c6              LDR      r0,|L8.1136|
000156  2200              MOVS     r2,#0
000158  5442              STRB     r2,[r0,r1]
;;;205      joypad_assignments[idx_from_mask(BTN_JS1_L)] = ASSIGN_LEFT;
00015a  f44f3080          MOV      r0,#0x10000
00015e  fab0f180          CLZ      r1,r0
000162  f1c10120          RSB      r1,r1,#0x20
000166  b2c9              UXTB     r1,r1
000168  48c1              LDR      r0,|L8.1136|
00016a  2202              MOVS     r2,#2
00016c  5442              STRB     r2,[r0,r1]
;;;206      joypad_assignments[idx_from_mask(BTN_JS1_R)] = ASSIGN_RIGHT;
00016e  0410              LSLS     r0,r2,#16
000170  fab0f180          CLZ      r1,r0
000174  f1c10120          RSB      r1,r1,#0x20
000178  b2c9              UXTB     r1,r1
00017a  48bd              LDR      r0,|L8.1136|
00017c  2203              MOVS     r2,#3
00017e  5442              STRB     r2,[r0,r1]
;;;207      joypad_assignments[idx_from_mask(BTN_JS1_D)] = ASSIGN_DOWN;
000180  f44f2080          MOV      r0,#0x40000
000184  fab0f180          CLZ      r1,r0
000188  f1c10120          RSB      r1,r1,#0x20
00018c  b2c9              UXTB     r1,r1
00018e  48b8              LDR      r0,|L8.1136|
000190  2201              MOVS     r2,#1
000192  5442              STRB     r2,[r0,r1]
;;;208      joypad_assignments[idx_from_mask(BTN_JS1_U)] = ASSIGN_UP;
000194  04d0              LSLS     r0,r2,#19
000196  fab0f180          CLZ      r1,r0
00019a  f1c10120          RSB      r1,r1,#0x20
00019e  b2c9              UXTB     r1,r1
0001a0  48b3              LDR      r0,|L8.1136|
0001a2  2200              MOVS     r2,#0
0001a4  5442              STRB     r2,[r0,r1]
;;;209      joypad_assignments[idx_from_mask(BTN_JS2_L)] = ASSIGN_B;
0001a6  f44f1080          MOV      r0,#0x100000
0001aa  fab0f180          CLZ      r1,r0
0001ae  f1c10120          RSB      r1,r1,#0x20
0001b2  b2c9              UXTB     r1,r1
0001b4  48ae              LDR      r0,|L8.1136|
0001b6  2205              MOVS     r2,#5
0001b8  5442              STRB     r2,[r0,r1]
;;;210      joypad_assignments[idx_from_mask(BTN_JS2_R)] = ASSIGN_B;
0001ba  f44f1000          MOV      r0,#0x200000
0001be  fab0f180          CLZ      r1,r0
0001c2  f1c10120          RSB      r1,r1,#0x20
0001c6  b2c9              UXTB     r1,r1
0001c8  48a9              LDR      r0,|L8.1136|
0001ca  5442              STRB     r2,[r0,r1]
;;;211      joypad_assignments[idx_from_mask(BTN_JS2_D)] = ASSIGN_A;
0001cc  f44f0080          MOV      r0,#0x400000
0001d0  fab0f180          CLZ      r1,r0
0001d4  f1c10120          RSB      r1,r1,#0x20
0001d8  b2c9              UXTB     r1,r1
0001da  48a5              LDR      r0,|L8.1136|
0001dc  2204              MOVS     r2,#4
0001de  5442              STRB     r2,[r0,r1]
;;;212      joypad_assignments[idx_from_mask(BTN_JS2_U)] = ASSIGN_A;
0001e0  0550              LSLS     r0,r2,#21
0001e2  fab0f180          CLZ      r1,r0
0001e6  f1c10120          RSB      r1,r1,#0x20
0001ea  b2c9              UXTB     r1,r1
0001ec  48a0              LDR      r0,|L8.1136|
0001ee  5442              STRB     r2,[r0,r1]
;;;213      joypad_assignments[idx_from_mask(BTN_X1)]    = ASSIGN_SEL;
0001f0  2040              MOVS     r0,#0x40
0001f2  fab0f180          CLZ      r1,r0
0001f6  f1c10120          RSB      r1,r1,#0x20
0001fa  b2c9              UXTB     r1,r1
0001fc  489c              LDR      r0,|L8.1136|
0001fe  2207              MOVS     r2,#7
000200  5442              STRB     r2,[r0,r1]
;;;214      joypad_assignments[idx_from_mask(BTN_X2)]    = ASSIGN_NONE;
000202  2080              MOVS     r0,#0x80
000204  fab0f180          CLZ      r1,r0
000208  f1c10120          RSB      r1,r1,#0x20
00020c  b2c9              UXTB     r1,r1
00020e  4898              LDR      r0,|L8.1136|
000210  2208              MOVS     r2,#8
000212  5442              STRB     r2,[r0,r1]
;;;215      joypad_assignments[idx_from_mask(BTN_X3)]    = ASSIGN_NONE;
000214  0150              LSLS     r0,r2,#5
000216  fab0f180          CLZ      r1,r0
00021a  f1c10120          RSB      r1,r1,#0x20
00021e  b2c9              UXTB     r1,r1
000220  4893              LDR      r0,|L8.1136|
000222  5442              STRB     r2,[r0,r1]
;;;216      joypad_assignments[idx_from_mask(BTN_X4)]    = ASSIGN_START;
000224  0190              LSLS     r0,r2,#6
000226  fab0f180          CLZ      r1,r0
00022a  f1c10120          RSB      r1,r1,#0x20
00022e  b2c9              UXTB     r1,r1
000230  488f              LDR      r0,|L8.1136|
000232  2206              MOVS     r2,#6
000234  5442              STRB     r2,[r0,r1]
;;;217      joypad_assignments[idx_from_mask(BTN_IMU_L)] = ASSIGN_LEFT;
000236  f04f7080          MOV      r0,#0x1000000
00023a  fab0f180          CLZ      r1,r0
00023e  f1c10120          RSB      r1,r1,#0x20
000242  b2c9              UXTB     r1,r1
000244  488a              LDR      r0,|L8.1136|
000246  2202              MOVS     r2,#2
000248  5442              STRB     r2,[r0,r1]
;;;218      joypad_assignments[idx_from_mask(BTN_IMU_R)] = ASSIGN_RIGHT;
00024a  0610              LSLS     r0,r2,#24
00024c  fab0f180          CLZ      r1,r0
000250  f1c10120          RSB      r1,r1,#0x20
000254  b2c9              UXTB     r1,r1
000256  4886              LDR      r0,|L8.1136|
000258  2203              MOVS     r2,#3
00025a  5442              STRB     r2,[r0,r1]
;;;219      joypad_assignments[idx_from_mask(BTN_IMU_J)] = ASSIGN_A;
00025c  f04f6080          MOV      r0,#0x4000000
000260  fab0f180          CLZ      r1,r0
000264  f1c10120          RSB      r1,r1,#0x20
000268  b2c9              UXTB     r1,r1
00026a  4881              LDR      r0,|L8.1136|
00026c  2204              MOVS     r2,#4
00026e  5442              STRB     r2,[r0,r1]
;;;220      delay(100);
000270  2064              MOVS     r0,#0x64
000272  4980              LDR      r1,|L8.1140|
000274  6008              STR      r0,[r1,#0]  ; __delay
000276  bf00              NOP      
000278  bf00              NOP      
                  |L8.634|
00027a  497e              LDR      r1,|L8.1140|
00027c  6809              LDR      r1,[r1,#0]  ; __delay
00027e  2900              CMP      r1,#0
000280  d1fb              BNE      |L8.634|
000282  bf00              NOP      
;;;221      /* USER CODE END 2 */
;;;222    
;;;223      /* Infinite loop */
;;;224      /* USER CODE BEGIN WHILE */
;;;225      while (1)
000284  e2be              B        |L8.2052|
                  |L8.646|
;;;226      {
;;;227        static int GAME_SELECT = 0;
;;;228        #define NUM_OF_GAMES 3
;;;229    
;;;230    
;;;231        static uint32_t last_joypad_state = 0;
;;;232        joypad_update();
000286  f7fffffe          BL       joypad_update
;;;233        #define btn_pressed(X) (joypad_state & (X))
;;;234        #define btn_clicked(X) (joypad_state & (X)) && !(last_joypad_state & (X))
;;;235        tft_clear();
00028a  f7fffffe          BL       tft_clear
;;;236        tft_printc(4, 0, "ELEC3300(24) - Anshuman & Aaron");
00028e  a27a              ADR      r2,|L8.1144|
000290  2100              MOVS     r1,#0
000292  2004              MOVS     r0,#4
000294  f7fffffe          BL       tft_printc
;;;237        tft_printc(6, 12, "SELECT");
000298  a27f              ADR      r2,|L8.1176|
00029a  210c              MOVS     r1,#0xc
00029c  2006              MOVS     r0,#6
00029e  f7fffffe          BL       tft_printc
;;;238        tft_prints(13, 12, "%s Super Mario Bros]", (GAME_SELECT == 0) ? ("[>") : ("-"));
0002a2  487f              LDR      r0,|L8.1184|
0002a4  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
0002a6  b908              CBNZ     r0,|L8.684|
0002a8  a07e              ADR      r0,|L8.1188|
0002aa  e000              B        |L8.686|
                  |L8.684|
0002ac  a07e              ADR      r0,|L8.1192|
                  |L8.686|
0002ae  4603              MOV      r3,r0
0002b0  a27e              ADR      r2,|L8.1196|
0002b2  210c              MOVS     r1,#0xc
0002b4  200d              MOVS     r0,#0xd
0002b6  f7fffffe          BL       tft_prints
;;;239        tft_prints(13, 13, "%s Battle City]"     , (GAME_SELECT == 1) ? ("[>") : ("-"));
0002ba  4879              LDR      r0,|L8.1184|
0002bc  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
0002be  2801              CMP      r0,#1
0002c0  d101              BNE      |L8.710|
0002c2  a078              ADR      r0,|L8.1188|
0002c4  e000              B        |L8.712|
                  |L8.710|
0002c6  a078              ADR      r0,|L8.1192|
                  |L8.712|
0002c8  4603              MOV      r3,r0
0002ca  a27e              ADR      r2,|L8.1220|
0002cc  210d              MOVS     r1,#0xd
0002ce  4608              MOV      r0,r1
0002d0  f7fffffe          BL       tft_prints
;;;240        tft_prints(13, 14, "%s Mappy]"           , (GAME_SELECT == 2) ? ("[>") : ("-"));
0002d4  4872              LDR      r0,|L8.1184|
0002d6  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
0002d8  2802              CMP      r0,#2
0002da  d101              BNE      |L8.736|
0002dc  a071              ADR      r0,|L8.1188|
0002de  e000              B        |L8.738|
                  |L8.736|
0002e0  a071              ADR      r0,|L8.1192|
                  |L8.738|
0002e2  4603              MOV      r3,r0
0002e4  a27b              ADR      r2,|L8.1236|
0002e6  210e              MOVS     r1,#0xe
0002e8  200d              MOVS     r0,#0xd
0002ea  f7fffffe          BL       tft_prints
;;;241       
;;;242      #if 0 
;;;243        // tft_printc(0, 5, " {/\\} \n{<} {>}\n {\\/} ");
;;;244        tft_printc(0, 5, " {^} \n{<}  {>}\n {V} ");
;;;245        tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;246      #else
;;;247        tft_prints(0, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
0002ee  2008              MOVS     r0,#8
0002f0  f7fffffe          BL       joypad_icon
0002f4  4604              MOV      r4,r0
0002f6  2004              MOVS     r0,#4
0002f8  f7fffffe          BL       joypad_icon
0002fc  4605              MOV      r5,r0
0002fe  2020              MOVS     r0,#0x20
000300  f7fffffe          BL       joypad_icon
000304  4606              MOV      r6,r0
000306  2010              MOVS     r0,#0x10
000308  f7fffffe          BL       joypad_icon
00030c  4607              MOV      r7,r0
00030e  2002              MOVS     r0,#2
000310  f7fffffe          BL       joypad_icon
000314  4680              MOV      r8,r0
000316  4643              MOV      r3,r8
000318  a271              ADR      r2,|L8.1248|
00031a  2107              MOVS     r1,#7
00031c  2000              MOVS     r0,#0
00031e  e9cd7600          STRD     r7,r6,[sp,#0]
000322  e9cd5402          STRD     r5,r4,[sp,#8]
000326  f7fffffe          BL       tft_prints
;;;248          joypad_icon(BTN_U1), joypad_icon(BTN_L1), joypad_icon(BTN_M1), joypad_icon(BTN_R1), joypad_icon(BTN_D1));
;;;249        tft_prints(36, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
00032a  f44f6000          MOV      r0,#0x800
00032e  f7fffffe          BL       joypad_icon
000332  4604              MOV      r4,r0
000334  f44f5080          MOV      r0,#0x1000
000338  f7fffffe          BL       joypad_icon
00033c  4605              MOV      r5,r0
00033e  f44f5000          MOV      r0,#0x2000
000342  f7fffffe          BL       joypad_icon
000346  4606              MOV      r6,r0
000348  f44f4000          MOV      r0,#0x8000
00034c  f7fffffe          BL       joypad_icon
000350  4607              MOV      r7,r0
000352  f44f4080          MOV      r0,#0x4000
000356  f7fffffe          BL       joypad_icon
00035a  4680              MOV      r8,r0
00035c  4643              MOV      r3,r8
00035e  a260              ADR      r2,|L8.1248|
000360  2107              MOVS     r1,#7
000362  2024              MOVS     r0,#0x24
000364  e9cd7600          STRD     r7,r6,[sp,#0]
000368  e9cd5402          STRD     r5,r4,[sp,#8]
00036c  f7fffffe          BL       tft_prints
;;;250          joypad_icon(BTN_U2), joypad_icon(BTN_L2), joypad_icon(BTN_M2), joypad_icon(BTN_R2), joypad_icon(BTN_D2));
;;;251        tft_prints(0, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
000370  f44f2080          MOV      r0,#0x40000
000374  f7fffffe          BL       joypad_icon
000378  4604              MOV      r4,r0
00037a  f44f3000          MOV      r0,#0x20000
00037e  f7fffffe          BL       joypad_icon
000382  4605              MOV      r5,r0
000384  2001              MOVS     r0,#1
000386  f7fffffe          BL       joypad_icon
00038a  4606              MOV      r6,r0
00038c  f44f3080          MOV      r0,#0x10000
000390  f7fffffe          BL       joypad_icon
000394  4607              MOV      r7,r0
000396  f44f2000          MOV      r0,#0x80000
00039a  f7fffffe          BL       joypad_icon
00039e  4680              MOV      r8,r0
0003a0  4643              MOV      r3,r8
0003a2  a24f              ADR      r2,|L8.1248|
0003a4  2102              MOVS     r1,#2
0003a6  2000              MOVS     r0,#0
0003a8  e9cd7600          STRD     r7,r6,[sp,#0]
0003ac  e9cd5402          STRD     r5,r4,[sp,#8]
0003b0  f7fffffe          BL       tft_prints
;;;252          joypad_icon(BTN_JS1_U), joypad_icon(BTN_JS1_L), joypad_icon(BTN_JS1), joypad_icon(BTN_JS1_R), joypad_icon(BTN_JS1_D));
;;;253        tft_prints(36, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
0003b4  f44f0080          MOV      r0,#0x400000
0003b8  f7fffffe          BL       joypad_icon
0003bc  4604              MOV      r4,r0
0003be  f44f1000          MOV      r0,#0x200000
0003c2  f7fffffe          BL       joypad_icon
0003c6  4605              MOV      r5,r0
0003c8  f44f6080          MOV      r0,#0x400
0003cc  f7fffffe          BL       joypad_icon
0003d0  4606              MOV      r6,r0
0003d2  f44f1080          MOV      r0,#0x100000
0003d6  f7fffffe          BL       joypad_icon
0003da  4607              MOV      r7,r0
0003dc  f44f0000          MOV      r0,#0x800000
0003e0  f7fffffe          BL       joypad_icon
0003e4  4680              MOV      r8,r0
0003e6  4643              MOV      r3,r8
0003e8  a23d              ADR      r2,|L8.1248|
0003ea  2102              MOVS     r1,#2
0003ec  2024              MOVS     r0,#0x24
0003ee  e9cd7600          STRD     r7,r6,[sp,#0]
0003f2  e9cd5402          STRD     r5,r4,[sp,#8]
0003f6  f7fffffe          BL       tft_prints
;;;254          joypad_icon(BTN_JS2_U), joypad_icon(BTN_JS2_L), joypad_icon(BTN_JS2), joypad_icon(BTN_JS2_R), joypad_icon(BTN_JS2_D));
;;;255        
;;;256        if (btn_clicked(BTN_R1))    joypad_rotate(BTN_R1);
0003fa  4840              LDR      r0,|L8.1276|
0003fc  6800              LDR      r0,[r0,#0]  ; joypad_state
0003fe  f0000004          AND      r0,r0,#4
000402  b138              CBZ      r0,|L8.1044|
000404  483e              LDR      r0,|L8.1280|
000406  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
000408  f0000004          AND      r0,r0,#4
00040c  b910              CBNZ     r0,|L8.1044|
00040e  2004              MOVS     r0,#4
000410  f7fffffe          BL       joypad_rotate
                  |L8.1044|
;;;257        if (btn_clicked(BTN_D1))    joypad_rotate(BTN_D1);
000414  4839              LDR      r0,|L8.1276|
000416  6800              LDR      r0,[r0,#0]  ; joypad_state
000418  f0000008          AND      r0,r0,#8
00041c  b138              CBZ      r0,|L8.1070|
00041e  4838              LDR      r0,|L8.1280|
000420  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
000422  f0000008          AND      r0,r0,#8
000426  b910              CBNZ     r0,|L8.1070|
000428  2008              MOVS     r0,#8
00042a  f7fffffe          BL       joypad_rotate
                  |L8.1070|
;;;258        if (btn_clicked(BTN_L1))    joypad_rotate(BTN_L1);
00042e  4833              LDR      r0,|L8.1276|
000430  6800              LDR      r0,[r0,#0]  ; joypad_state
000432  f0000010          AND      r0,r0,#0x10
000436  b138              CBZ      r0,|L8.1096|
000438  4831              LDR      r0,|L8.1280|
00043a  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
00043c  f0000010          AND      r0,r0,#0x10
000440  b910              CBNZ     r0,|L8.1096|
000442  2010              MOVS     r0,#0x10
000444  f7fffffe          BL       joypad_rotate
                  |L8.1096|
;;;259        if (btn_clicked(BTN_M1))    joypad_rotate(BTN_M1);
000448  482c              LDR      r0,|L8.1276|
00044a  6800              LDR      r0,[r0,#0]  ; joypad_state
00044c  f0000020          AND      r0,r0,#0x20
000450  b138              CBZ      r0,|L8.1122|
000452  482b              LDR      r0,|L8.1280|
000454  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
000456  f0000020          AND      r0,r0,#0x20
00045a  b910              CBNZ     r0,|L8.1122|
00045c  2020              MOVS     r0,#0x20
00045e  f7fffffe          BL       joypad_rotate
                  |L8.1122|
;;;260        if (btn_clicked(BTN_JS2))   joypad_rotate(BTN_JS2);
000462  4826              LDR      r0,|L8.1276|
000464  6800              LDR      r0,[r0,#0]  ; joypad_state
000466  f4006080          AND      r0,r0,#0x400
00046a  e04b              B        |L8.1284|
                  |L8.1132|
                          DCD      0x40001000
                  |L8.1136|
                          DCD      joypad_assignments
                  |L8.1140|
                          DCD      __delay
                  |L8.1144|
000478  454c4543          DCB      "ELEC3300(24) - Anshuman & Aaron",0
00047c  33333030
000480  28323429
000484  202d2041
000488  6e736875
00048c  6d616e20
000490  26204161
000494  726f6e00
                  |L8.1176|
000498  53454c45          DCB      "SELECT",0
00049c  435400  
00049f  00                DCB      0
                  |L8.1184|
                          DCD      GAME_SELECT
                  |L8.1188|
0004a4  5b3e00            DCB      "[>",0
0004a7  00                DCB      0
                  |L8.1192|
0004a8  2d00              DCB      "-",0
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L8.1196|
0004ac  25732053          DCB      "%s Super Mario Bros]"
0004b0  75706572
0004b4  204d6172
0004b8  696f2042
0004bc  726f735d
                  |L8.1216|
0004c0  00                DCB      0
0004c1  00                DCB      0
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L8.1220|
0004c4  25732042          DCB      "%s Battle City]",0
0004c8  6174746c
0004cc  65204369
0004d0  74795d00
                  |L8.1236|
0004d4  2573204d          DCB      "%s Mappy]",0
0004d8  61707079
0004dc  5d00    
0004de  00                DCB      0
0004df  00                DCB      0
                  |L8.1248|
0004e0  207b2563          DCB      " {%c} \n{%c}{%c}{%c}\n {%c} ",0
0004e4  7d200a7b
0004e8  25637d7b
0004ec  25637d7b
0004f0  25637d0a
0004f4  207b2563
0004f8  7d2000  
0004fb  00                DCB      0
                  |L8.1276|
                          DCD      joypad_state
                  |L8.1280|
                          DCD      last_joypad_state
                  |L8.1284|
000504  b140              CBZ      r0,|L8.1304|
000506  48c0              LDR      r0,|L8.2056|
000508  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
00050a  f4006080          AND      r0,r0,#0x400
00050e  b918              CBNZ     r0,|L8.1304|
000510  f44f6080          MOV      r0,#0x400
000514  f7fffffe          BL       joypad_rotate
                  |L8.1304|
;;;261        if (btn_clicked(BTN_D2))    joypad_rotate(BTN_D2);
000518  48bc              LDR      r0,|L8.2060|
00051a  6800              LDR      r0,[r0,#0]  ; joypad_state
00051c  f4006000          AND      r0,r0,#0x800
000520  b140              CBZ      r0,|L8.1332|
000522  48b9              LDR      r0,|L8.2056|
000524  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
000526  f4006000          AND      r0,r0,#0x800
00052a  b918              CBNZ     r0,|L8.1332|
00052c  f44f6000          MOV      r0,#0x800
000530  f7fffffe          BL       joypad_rotate
                  |L8.1332|
;;;262        if (btn_clicked(BTN_R2))    joypad_rotate(BTN_R2);
000534  48b5              LDR      r0,|L8.2060|
000536  6800              LDR      r0,[r0,#0]  ; joypad_state
000538  f4005080          AND      r0,r0,#0x1000
00053c  b140              CBZ      r0,|L8.1360|
00053e  48b2              LDR      r0,|L8.2056|
000540  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
000542  f4005080          AND      r0,r0,#0x1000
000546  b918              CBNZ     r0,|L8.1360|
000548  f44f5080          MOV      r0,#0x1000
00054c  f7fffffe          BL       joypad_rotate
                  |L8.1360|
;;;263        if (btn_clicked(BTN_M2))    joypad_rotate(BTN_M2);
000550  48ae              LDR      r0,|L8.2060|
000552  6800              LDR      r0,[r0,#0]  ; joypad_state
000554  f4005000          AND      r0,r0,#0x2000
000558  b140              CBZ      r0,|L8.1388|
00055a  48ab              LDR      r0,|L8.2056|
00055c  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
00055e  f4005000          AND      r0,r0,#0x2000
000562  b918              CBNZ     r0,|L8.1388|
000564  f44f5000          MOV      r0,#0x2000
000568  f7fffffe          BL       joypad_rotate
                  |L8.1388|
;;;264        if (btn_clicked(BTN_U2))    joypad_rotate(BTN_U2);
00056c  48a7              LDR      r0,|L8.2060|
00056e  6800              LDR      r0,[r0,#0]  ; joypad_state
000570  f4004080          AND      r0,r0,#0x4000
000574  b140              CBZ      r0,|L8.1416|
000576  48a4              LDR      r0,|L8.2056|
000578  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
00057a  f4004080          AND      r0,r0,#0x4000
00057e  b918              CBNZ     r0,|L8.1416|
000580  f44f4080          MOV      r0,#0x4000
000584  f7fffffe          BL       joypad_rotate
                  |L8.1416|
;;;265        if (btn_clicked(BTN_L2))    joypad_rotate(BTN_L2);
000588  48a0              LDR      r0,|L8.2060|
00058a  6800              LDR      r0,[r0,#0]  ; joypad_state
00058c  f4004000          AND      r0,r0,#0x8000
000590  b140              CBZ      r0,|L8.1444|
000592  489d              LDR      r0,|L8.2056|
000594  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
000596  f4004000          AND      r0,r0,#0x8000
00059a  b918              CBNZ     r0,|L8.1444|
00059c  f44f4000          MOV      r0,#0x8000
0005a0  f7fffffe          BL       joypad_rotate
                  |L8.1444|
;;;266        if (btn_clicked(BTN_JS1))   joypad_rotate(BTN_JS1);
0005a4  4899              LDR      r0,|L8.2060|
0005a6  6800              LDR      r0,[r0,#0]  ; joypad_state
0005a8  f0000001          AND      r0,r0,#1
0005ac  b138              CBZ      r0,|L8.1470|
0005ae  4896              LDR      r0,|L8.2056|
0005b0  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
0005b2  f0000001          AND      r0,r0,#1
0005b6  b910              CBNZ     r0,|L8.1470|
0005b8  2001              MOVS     r0,#1
0005ba  f7fffffe          BL       joypad_rotate
                  |L8.1470|
;;;267        if (btn_clicked(BTN_U1))    joypad_rotate(BTN_U1);
0005be  4893              LDR      r0,|L8.2060|
0005c0  6800              LDR      r0,[r0,#0]  ; joypad_state
0005c2  f0000002          AND      r0,r0,#2
0005c6  b138              CBZ      r0,|L8.1496|
0005c8  488f              LDR      r0,|L8.2056|
0005ca  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
0005cc  f0000002          AND      r0,r0,#2
0005d0  b910              CBNZ     r0,|L8.1496|
0005d2  2002              MOVS     r0,#2
0005d4  f7fffffe          BL       joypad_rotate
                  |L8.1496|
;;;268        if (btn_clicked(BTN_JS1_L)) joypad_rotate(BTN_JS1_L);
0005d8  488c              LDR      r0,|L8.2060|
0005da  6800              LDR      r0,[r0,#0]  ; joypad_state
0005dc  f4003080          AND      r0,r0,#0x10000
0005e0  b140              CBZ      r0,|L8.1524|
0005e2  4889              LDR      r0,|L8.2056|
0005e4  6800              LDR      r0,[r0,#0]  ; last_joypad_state
0005e6  f4003080          AND      r0,r0,#0x10000
0005ea  b918              CBNZ     r0,|L8.1524|
0005ec  f44f3080          MOV      r0,#0x10000
0005f0  f7fffffe          BL       joypad_rotate
                  |L8.1524|
;;;269        if (btn_clicked(BTN_JS1_R)) joypad_rotate(BTN_JS1_R);
0005f4  4885              LDR      r0,|L8.2060|
0005f6  6800              LDR      r0,[r0,#0]  ; joypad_state
0005f8  f4003000          AND      r0,r0,#0x20000
0005fc  b140              CBZ      r0,|L8.1552|
0005fe  4882              LDR      r0,|L8.2056|
000600  6800              LDR      r0,[r0,#0]  ; last_joypad_state
000602  f4003000          AND      r0,r0,#0x20000
000606  b918              CBNZ     r0,|L8.1552|
000608  f44f3000          MOV      r0,#0x20000
00060c  f7fffffe          BL       joypad_rotate
                  |L8.1552|
;;;270        if (btn_clicked(BTN_JS1_D)) joypad_rotate(BTN_JS1_D);
000610  487e              LDR      r0,|L8.2060|
000612  6800              LDR      r0,[r0,#0]  ; joypad_state
000614  f4002080          AND      r0,r0,#0x40000
000618  b140              CBZ      r0,|L8.1580|
00061a  487b              LDR      r0,|L8.2056|
00061c  6800              LDR      r0,[r0,#0]  ; last_joypad_state
00061e  f4002080          AND      r0,r0,#0x40000
000622  b918              CBNZ     r0,|L8.1580|
000624  f44f2080          MOV      r0,#0x40000
000628  f7fffffe          BL       joypad_rotate
                  |L8.1580|
;;;271        if (btn_clicked(BTN_JS1_U)) joypad_rotate(BTN_JS1_U);
00062c  4877              LDR      r0,|L8.2060|
00062e  6800              LDR      r0,[r0,#0]  ; joypad_state
000630  f4002000          AND      r0,r0,#0x80000
000634  b140              CBZ      r0,|L8.1608|
000636  4874              LDR      r0,|L8.2056|
000638  6800              LDR      r0,[r0,#0]  ; last_joypad_state
00063a  f4002000          AND      r0,r0,#0x80000
00063e  b918              CBNZ     r0,|L8.1608|
000640  f44f2000          MOV      r0,#0x80000
000644  f7fffffe          BL       joypad_rotate
                  |L8.1608|
;;;272        if (btn_clicked(BTN_JS2_L)) joypad_rotate(BTN_JS2_L);
000648  4870              LDR      r0,|L8.2060|
00064a  6800              LDR      r0,[r0,#0]  ; joypad_state
00064c  f4001080          AND      r0,r0,#0x100000
000650  b140              CBZ      r0,|L8.1636|
000652  486d              LDR      r0,|L8.2056|
000654  6800              LDR      r0,[r0,#0]  ; last_joypad_state
000656  f4001080          AND      r0,r0,#0x100000
00065a  b918              CBNZ     r0,|L8.1636|
00065c  f44f1080          MOV      r0,#0x100000
000660  f7fffffe          BL       joypad_rotate
                  |L8.1636|
;;;273        if (btn_clicked(BTN_JS2_R)) joypad_rotate(BTN_JS2_R);
000664  4869              LDR      r0,|L8.2060|
000666  6800              LDR      r0,[r0,#0]  ; joypad_state
000668  f4001000          AND      r0,r0,#0x200000
00066c  b140              CBZ      r0,|L8.1664|
00066e  4866              LDR      r0,|L8.2056|
000670  6800              LDR      r0,[r0,#0]  ; last_joypad_state
000672  f4001000          AND      r0,r0,#0x200000
000676  b918              CBNZ     r0,|L8.1664|
000678  f44f1000          MOV      r0,#0x200000
00067c  f7fffffe          BL       joypad_rotate
                  |L8.1664|
;;;274        if (btn_clicked(BTN_JS2_D)) joypad_rotate(BTN_JS2_D);
000680  4862              LDR      r0,|L8.2060|
000682  6800              LDR      r0,[r0,#0]  ; joypad_state
000684  f4000080          AND      r0,r0,#0x400000
000688  b140              CBZ      r0,|L8.1692|
00068a  485f              LDR      r0,|L8.2056|
00068c  6800              LDR      r0,[r0,#0]  ; last_joypad_state
00068e  f4000080          AND      r0,r0,#0x400000
000692  b918              CBNZ     r0,|L8.1692|
000694  f44f0080          MOV      r0,#0x400000
000698  f7fffffe          BL       joypad_rotate
                  |L8.1692|
;;;275        if (btn_clicked(BTN_JS2_U)) joypad_rotate(BTN_JS2_U);
00069c  485b              LDR      r0,|L8.2060|
00069e  6800              LDR      r0,[r0,#0]  ; joypad_state
0006a0  f4000000          AND      r0,r0,#0x800000
0006a4  b140              CBZ      r0,|L8.1720|
0006a6  4858              LDR      r0,|L8.2056|
0006a8  6800              LDR      r0,[r0,#0]  ; last_joypad_state
0006aa  f4000000          AND      r0,r0,#0x800000
0006ae  b918              CBNZ     r0,|L8.1720|
0006b0  f44f0000          MOV      r0,#0x800000
0006b4  f7fffffe          BL       joypad_rotate
                  |L8.1720|
;;;276        joypad_A     = joypad_assigned(ASSIGN_A);
0006b8  2004              MOVS     r0,#4
0006ba  f7fffffe          BL       joypad_assigned
0006be  4954              LDR      r1,|L8.2064|
0006c0  6008              STR      r0,[r1,#0]  ; joypad_A
;;;277        joypad_B     = joypad_assigned(ASSIGN_B);
0006c2  2005              MOVS     r0,#5
0006c4  f7fffffe          BL       joypad_assigned
0006c8  4952              LDR      r1,|L8.2068|
0006ca  6008              STR      r0,[r1,#0]  ; joypad_B
;;;278        joypad_U     = joypad_assigned(ASSIGN_UP);
0006cc  2000              MOVS     r0,#0
0006ce  f7fffffe          BL       joypad_assigned
0006d2  4951              LDR      r1,|L8.2072|
0006d4  6008              STR      r0,[r1,#0]  ; joypad_U
;;;279        joypad_D     = joypad_assigned(ASSIGN_DOWN);
0006d6  2001              MOVS     r0,#1
0006d8  f7fffffe          BL       joypad_assigned
0006dc  494f              LDR      r1,|L8.2076|
0006de  6008              STR      r0,[r1,#0]  ; joypad_D
;;;280        joypad_L     = joypad_assigned(ASSIGN_LEFT);
0006e0  2002              MOVS     r0,#2
0006e2  f7fffffe          BL       joypad_assigned
0006e6  494e              LDR      r1,|L8.2080|
0006e8  6008              STR      r0,[r1,#0]  ; joypad_L
;;;281        joypad_R     = joypad_assigned(ASSIGN_RIGHT);
0006ea  2003              MOVS     r0,#3
0006ec  f7fffffe          BL       joypad_assigned
0006f0  494c              LDR      r1,|L8.2084|
0006f2  6008              STR      r0,[r1,#0]  ; joypad_R
;;;282        joypad_SEL   = joypad_assigned(ASSIGN_SEL);
0006f4  2007              MOVS     r0,#7
0006f6  f7fffffe          BL       joypad_assigned
0006fa  494b              LDR      r1,|L8.2088|
0006fc  6008              STR      r0,[r1,#0]  ; joypad_SEL
;;;283        joypad_START = joypad_assigned(ASSIGN_START);
0006fe  2006              MOVS     r0,#6
000700  f7fffffe          BL       joypad_assigned
000704  4949              LDR      r1,|L8.2092|
000706  6008              STR      r0,[r1,#0]  ; joypad_START
;;;284    
;;;285        // tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;286      #endif
;;;287        tft_prints(0,  14, "{SEL}");
000708  a249              ADR      r2,|L8.2096|
00070a  210e              MOVS     r1,#0xe
00070c  2000              MOVS     r0,#0
00070e  f7fffffe          BL       tft_prints
;;;288        tft_prints(36, 14, "{STRT}");
000712  a249              ADR      r2,|L8.2104|
000714  210e              MOVS     r1,#0xe
000716  2024              MOVS     r0,#0x24
000718  f7fffffe          BL       tft_prints
;;;289        tft_printc(5, 1, " __    __  ________   ______   \n\
00071c  4a48              LDR      r2,|L8.2112|
00071e  2101              MOVS     r1,#1
000720  2005              MOVS     r0,#5
000722  f7fffffe          BL       tft_printc
;;;290    /  \\  /  |/        | /      \\ \n\
;;;291    [$$]  \\ [$$] |[$$$$$$$$]/ /[$$$$$$]  |\n\
;;;292    [$$$]  \\[$$] |[$$] |__    [$$] \\__[$$]/ \n\
;;;293    [$$$$]  [$$] |[$$]    |   [$$]      \\ \n\
;;;294    [$$] [$$] [$$] |[$$$$$]/     [$$$$$$]  |\n\
;;;295    [$$] |[$$$$] |[$$] |_____ /  \\__[$$] |\n\
;;;296    [$$] | [$$$] |[$$]       |[$$]    [$$]/ \n\
;;;297    [$$]/   [$$]/ [$$$$$$$$]/  [$$$$$$]/  ");
;;;298    
;;;299        tft_prints(0,13, "%sIMU]",(getIMUControl())?"[":"");
000726  f7fffffe          BL       getIMUControl
00072a  b108              CBZ      r0,|L8.1840|
00072c  a045              ADR      r0,|L8.2116|
00072e  e001              B        |L8.1844|
                  |L8.1840|
000730  f2af2074          ADR      r0,|L8.1216|
                  |L8.1844|
000734  4604              MOV      r4,r0
000736  4623              MOV      r3,r4
000738  a243              ADR      r2,|L8.2120|
00073a  210d              MOVS     r1,#0xd
00073c  2000              MOVS     r0,#0
00073e  f7fffffe          BL       tft_prints
;;;300        // IMU_dataAvailable();
;;;301        // tft_printi(6,11,(int16_t)getAccelY()*10);
;;;302        // tft_printi(0, 1, get_ticks()%1000);
;;;303        // tft_printi(5,1,(int16_t)(getQuatI()*1000));
;;;304        // tft_printi(5,2,(int16_t)(getQuatJ()*1000));
;;;305        // tft_printi(5,3,(int16_t)(getQuatK()*1000));
;;;306        // tft_printi(5,4,(int16_t)(getQuatReal()*1000));
;;;307        // tft_printi(10,1,(int16_t)(getRoll()*10));
;;;308        // tft_printi(10,2,(int16_t)(getPitch()*10));
;;;309        // tft_printi(10,3,(int16_t)(getYaw()*10));
;;;310        // tft_printi(5,2,(int16_t)(getAccelX()*1000));
;;;311    
;;;312        // tft_printi(5,1,getAccelLeftRight());
;;;313        // static uint8_t asdf = 0;
;;;314        // tft_printi(5,4,asdf+= getAccelFlick());
;;;315    
;;;316        tft_update();
000742  f7fffffe          BL       tft_update
;;;317        
;;;318        static uint32_t last_blink = 0;
;;;319        if ((get_ticks() - last_blink) > 100) {
000746  bf00              NOP      
000748  4841              LDR      r0,|L8.2128|
00074a  6800              LDR      r0,[r0,#0]  ; __ticks
00074c  4941              LDR      r1,|L8.2132|
00074e  6809              LDR      r1,[r1,#0]  ; last_blink
000750  1a40              SUBS     r0,r0,r1
000752  2864              CMP      r0,#0x64
000754  d90c              BLS      |L8.1904|
;;;320          gpio_toggle(LED2);
000756  f44f4080          MOV      r0,#0x4000
00075a  493f              LDR      r1,|L8.2136|
00075c  6949              LDR      r1,[r1,#0x14]
00075e  4041              EORS     r1,r1,r0
000760  4a3d              LDR      r2,|L8.2136|
000762  6151              STR      r1,[r2,#0x14]
000764  bf00              NOP      
;;;321          last_blink = get_ticks();
000766  bf00              NOP      
000768  4839              LDR      r0,|L8.2128|
00076a  6800              LDR      r0,[r0,#0]  ; __ticks
00076c  4939              LDR      r1,|L8.2132|
00076e  6008              STR      r0,[r1,#0]  ; last_blink
                  |L8.1904|
;;;322        }
;;;323    		
;;;324        if (btn_clicked(BTN_X3)) {
000770  4826              LDR      r0,|L8.2060|
000772  6800              LDR      r0,[r0,#0]  ; joypad_state
000774  f4007080          AND      r0,r0,#0x100
000778  b190              CBZ      r0,|L8.1952|
00077a  4823              LDR      r0,|L8.2056|
00077c  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
00077e  f4007080          AND      r0,r0,#0x100
000782  b968              CBNZ     r0,|L8.1952|
;;;325          GAME_SELECT++;
000784  4835              LDR      r0,|L8.2140|
000786  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
000788  1c40              ADDS     r0,r0,#1
00078a  4934              LDR      r1,|L8.2140|
00078c  6008              STR      r0,[r1,#0]  ; GAME_SELECT
;;;326          GAME_SELECT %= 3;
00078e  4608              MOV      r0,r1
000790  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
000792  2103              MOVS     r1,#3
000794  fb90f2f1          SDIV     r2,r0,r1
000798  fb010012          MLS      r0,r1,r2,r0
00079c  492f              LDR      r1,|L8.2140|
00079e  6008              STR      r0,[r1,#0]  ; GAME_SELECT
                  |L8.1952|
;;;327        }
;;;328        if (btn_clicked(BTN_X4)) {
0007a0  481a              LDR      r0,|L8.2060|
0007a2  6800              LDR      r0,[r0,#0]  ; joypad_state
0007a4  f4007000          AND      r0,r0,#0x200
0007a8  b340              CBZ      r0,|L8.2044|
0007aa  4817              LDR      r0,|L8.2056|
0007ac  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
0007ae  f4007000          AND      r0,r0,#0x200
0007b2  bb18              CBNZ     r0,|L8.2044|
;;;329          nes_init(rom_select(GAME_SELECT));
0007b4  4829              LDR      r0,|L8.2140|
0007b6  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
0007b8  f7fffffe          BL       rom_select
0007bc  4604              MOV      r4,r0
0007be  f7fffffe          BL       nes_init
;;;330    
;;;331          while (1) 
0007c2  e01a              B        |L8.2042|
                  |L8.1988|
;;;332    			{	
;;;333            if (TIM6->SR & TIM_SR_UIF) 
0007c4  4826              LDR      r0,|L8.2144|
0007c6  6900              LDR      r0,[r0,#0x10]
0007c8  f0000001          AND      r0,r0,#1
0007cc  b1a8              CBZ      r0,|L8.2042|
;;;334    				{
;;;335              //IMU_dataAvailable();
;;;336              joypad_update();
0007ce  f7fffffe          BL       joypad_update
;;;337              TIM6->SR = 0;
0007d2  2000              MOVS     r0,#0
0007d4  4922              LDR      r1,|L8.2144|
0007d6  6108              STR      r0,[r1,#0x10]
;;;338              nes_frame(0);;
0007d8  f7fffffe          BL       nes_frame
;;;339              nes_frame(1);
0007dc  2001              MOVS     r0,#1
0007de  f7fffffe          BL       nes_frame
;;;340              if (btn_clicked(BTN_X3))
0007e2  480a              LDR      r0,|L8.2060|
0007e4  6800              LDR      r0,[r0,#0]  ; joypad_state
0007e6  f4007080          AND      r0,r0,#0x100
0007ea  b130              CBZ      r0,|L8.2042|
0007ec  4806              LDR      r0,|L8.2056|
0007ee  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
0007f0  f4007080          AND      r0,r0,#0x100
0007f4  b908              CBNZ     r0,|L8.2042|
;;;341    					{
;;;342    						cpu_reset();
0007f6  f7fffffe          BL       cpu_reset
                  |L8.2042|
0007fa  e7e3              B        |L8.1988|
                  |L8.2044|
;;;343    					}
;;;344            } 
;;;345          }
;;;346        }
;;;347        last_joypad_state = joypad_state;
0007fc  4803              LDR      r0,|L8.2060|
0007fe  6800              LDR      r0,[r0,#0]  ; joypad_state
000800  4901              LDR      r1,|L8.2056|
000802  6008              STR      r0,[r1,#0]  ; last_joypad_state
                  |L8.2052|
000804  e53f              B        |L8.646|
;;;348        /* USER CODE END WHILE */
;;;349    
;;;350        /* USER CODE BEGIN 3 */
;;;351      }
;;;352      /* USER CODE END 3 */
;;;353    }
;;;354    
                          ENDP

000806  0000              DCW      0x0000
                  |L8.2056|
                          DCD      last_joypad_state
                  |L8.2060|
                          DCD      joypad_state
                  |L8.2064|
                          DCD      joypad_A
                  |L8.2068|
                          DCD      joypad_B
                  |L8.2072|
                          DCD      joypad_U
                  |L8.2076|
                          DCD      joypad_D
                  |L8.2080|
                          DCD      joypad_L
                  |L8.2084|
                          DCD      joypad_R
                  |L8.2088|
                          DCD      joypad_SEL
                  |L8.2092|
                          DCD      joypad_START
                  |L8.2096|
000830  7b53454c          DCB      "{SEL}",0
000834  7d00    
000836  00                DCB      0
000837  00                DCB      0
                  |L8.2104|
000838  7b535452          DCB      "{STRT}",0
00083c  547d00  
00083f  00                DCB      0
                  |L8.2112|
                          DCD      ||.conststring||
                  |L8.2116|
000844  5b00              DCB      "[",0
000846  00                DCB      0
000847  00                DCB      0
                  |L8.2120|
000848  2573494d          DCB      "%sIMU]",0
00084c  555d00  
00084f  00                DCB      0
                  |L8.2128|
                          DCD      __ticks
                  |L8.2132|
                          DCD      last_blink
                  |L8.2136|
                          DCD      0x40020c00
                  |L8.2140|
                          DCD      GAME_SELECT
                  |L8.2144|
                          DCD      0x40001000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  joypad_assignments
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8
                  aRCC_PLLSAIDIVRPrescTable
000008  02040810          DCB      0x02,0x04,0x08,0x10
                  OFFSET_TAB_CCMRx
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  040404            DCB      0x04,0x04,0x04
                  SHIFT_TAB_OCxx
000013  00                DCB      0x00
000014  00080000          DCB      0x00,0x08,0x00,0x00
000018  0008              DCB      0x00,0x08
                  SHIFT_TAB_ICxx
00001a  0000              DCB      0x00,0x00
00001c  08000000          DCB      0x08,0x00,0x00,0x00
000020  08                DCB      0x08
                  SHIFT_TAB_CCxP
000021  000204            DCB      0x00,0x02,0x04
000024  06080a0c          DCB      0x06,0x08,0x0a,0x0c
                  SHIFT_TAB_OISx
000028  00010203          DCB      0x00,0x01,0x02,0x03
00002c  040506            DCB      0x04,0x05,0x06

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  205f5f20          DCB      " __    __  ________   ______   \n/  \\  /  |/        | "
000004  2020205f
000008  5f20205f
00000c  5f5f5f5f
000010  5f5f5f20
000014  20205f5f
000018  5f5f5f5f
00001c  2020200a
000020  2f20205c
000024  20202f20
000028  207c2f20
00002c  20202020
000030  2020207c
000034  20      
000035  2f202020          DCB      "/      \\ \n[$$$$]  \\ [$$$$] |[$$$$$$$$$$$$$$$$]/ /[$$"
000039  2020205c
00003d  200a5b24
000041  245d2020
000045  5c205b24
000049  245d207c
00004d  5b242424
000051  24242424
000055  245d2f20
000059  2f5b24  
00005c  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$$$]  \\[$$$$] |[$$$$] |__    [$$$$"
000060  245d2020
000064  7c0a5b24
000068  24245d20
00006c  205c5b24
000070  245d207c
000074  5b24245d
000078  207c5f5f
00007c  20202020
000080  5b2424  
000083  5d205c5f          DCB      "] \\__[$$$$]/ \n[$$$$$$$$]  [$$$$] |[$$$$]    |   [$$$$"
000087  5f5b2424
00008b  5d2f200a
00008f  5b242424
000093  245d2020
000097  5b24245d
00009b  207c5b24
00009f  245d2020
0000a3  20207c20
0000a7  20205b24
0000ab  24      
0000ac  5d202020          DCB      "]      \\ \n[$$$$] [$$$$] [$$$$] |[$$$$$$$$$$]/     [$$"
0000b0  2020205c
0000b4  200a5b24
0000b8  245d205b
0000bc  24245d20
0000c0  5b24245d
0000c4  207c5b24
0000c8  24242424
0000cc  5d2f2020
0000d0  2020205b
0000d4  24      
0000d5  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$] |[$$$$$$$$] |[$$$$] |_____ /  \\"
0000d9  245d2020
0000dd  7c0a5b24
0000e1  245d207c
0000e5  5b242424
0000e9  245d207c
0000ed  5b24245d
0000f1  207c5f5f
0000f5  5f5f5f20
0000f9  2f20205c
0000fd  5f5f5b24          DCB      "__[$$$$] |\n[$$$$] | [$$$$$$] |[$$$$]       |[$$$$]    "
000101  245d207c
000105  0a5b2424
000109  5d207c20
00010d  5b242424
000111  5d207c5b
000115  24245d20
000119  20202020
00011d  20207c5b
000121  24245d20
000125  202020  
000128  5b24245d          DCB      "[$$$$]/ \n[$$$$]/   [$$$$]/ [$$$$$$$$$$$$$$$$]/  [$$$$$$"
00012c  2f200a5b
000130  24245d2f
000134  2020205b
000138  24245d2f
00013c  205b2424
000140  24242424
000144  24245d2f
000148  20205b24
00014c  2424    
00014e  2424245d          DCB      "$$$$$$]/  ",0
000152  2f202000

                          AREA ||.data||, DATA, ALIGN=2

                  assignable_buttons
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                          DCD      0x00008000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00010000
                          DCD      0x00020000
                          DCD      0x00040000
                          DCD      0x00080000
                          DCD      0x00100000
                          DCD      0x00200000
                          DCD      0x00400000
                          DCD      0x00800000
                  __ticks
                          DCD      0x00000000
                  __delay
                          DCD      0x00000000
                  __tickf
000058  01000000          DCB      0x01,0x00,0x00,0x00
                  GAME_SELECT
                          DCD      0x00000000
                  last_joypad_state
                          DCD      0x00000000
                  last_blink
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_e9093bf9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REVSH|
#line 402
|__asm___6_main_c_e9093bf9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____RRX|
#line 587
|__asm___6_main_c_e9093bf9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
