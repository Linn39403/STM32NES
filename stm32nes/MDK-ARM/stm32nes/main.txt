; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\main.o --depend=stm32nes\main.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\main.crf ../Src/main.c]
                          THUMB

                          AREA ||i.Error_Handler||, CODE, READONLY, ALIGN=1

                  Error_Handler PROC
;;;435      */
;;;436    void Error_Handler(void)
000000  4770              BX       lr
;;;437    {
;;;438      /* USER CODE BEGIN Error_Handler_Debug */
;;;439      /* User can add his own implementation to report the HAL error return state */
;;;440    
;;;441      /* USER CODE END Error_Handler_Debug */
;;;442    }
;;;443    
                          ENDP


                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;425    }
;;;426    uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L2.8|
;;;427    {
;;;428      return __ticks;
000002  6800              LDR      r0,[r0,#0]  ; __ticks
;;;429    }
000004  4770              BX       lr
;;;430    /* USER CODE END 4 */
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      __ticks

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;420    volatile uint8_t  __tickf = 1;
;;;421    void SysTick_Handler(void) {
000000  4808              LDR      r0,|L3.36|
;;;422    	__ticks++;
000002  6800              LDR      r0,[r0,#0]  ; __ticks
000004  1c40              ADDS     r0,r0,#1
000006  4907              LDR      r1,|L3.36|
000008  6008              STR      r0,[r1,#0]  ; __ticks
;;;423    	__tickf = 0;
00000a  2000              MOVS     r0,#0
00000c  4906              LDR      r1,|L3.40|
00000e  7008              STRB     r0,[r1,#0]
;;;424    	if (__delay) __delay--;
000010  4806              LDR      r0,|L3.44|
000012  6800              LDR      r0,[r0,#0]  ; __delay
000014  b120              CBZ      r0,|L3.32|
000016  4805              LDR      r0,|L3.44|
000018  6800              LDR      r0,[r0,#0]  ; __delay
00001a  1e40              SUBS     r0,r0,#1
00001c  4903              LDR      r1,|L3.44|
00001e  6008              STR      r0,[r1,#0]  ; __delay
                  |L3.32|
;;;425    }
000020  4770              BX       lr
;;;426    uint32_t HAL_GetTick(void)
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      __ticks
                  |L3.40|
                          DCD      __tickf
                  |L3.44|
                          DCD      __delay

                          AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

                  SystemClock_Config PROC
;;;377      */
;;;378    void SystemClock_Config(void)
000000  b570              PUSH     {r4-r6,lr}
;;;379    {
;;;380      LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
000002  2005              MOVS     r0,#5
000004  494f              LDR      r1,|L4.324|
000006  6809              LDR      r1,[r1,#0]
000008  f021010f          BIC      r1,r1,#0xf
00000c  4301              ORRS     r1,r1,r0
00000e  4a4d              LDR      r2,|L4.324|
000010  6011              STR      r1,[r2,#0]
000012  bf00              NOP      
;;;381    
;;;382      if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_5)
000014  bf00              NOP      
000016  4610              MOV      r0,r2
000018  6800              LDR      r0,[r0,#0]
00001a  f000000f          AND      r0,r0,#0xf
00001e  2805              CMP      r0,#5
000020  d001              BEQ      |L4.38|
;;;383      {
;;;384      Error_Handler();  
000022  f7fffffe          BL       Error_Handler
                  |L4.38|
;;;385      }
;;;386      LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
000026  f44f4040          MOV      r0,#0xc000
00002a  4947              LDR      r1,|L4.328|
00002c  6809              LDR      r1,[r1,#0]
00002e  f4214140          BIC      r1,r1,#0xc000
000032  4301              ORRS     r1,r1,r0
000034  4a44              LDR      r2,|L4.328|
000036  6011              STR      r1,[r2,#0]
000038  bf00              NOP      
;;;387      LL_RCC_HSE_Enable();
00003a  bf00              NOP      
00003c  4843              LDR      r0,|L4.332|
00003e  6800              LDR      r0,[r0,#0]
000040  f4403080          ORR      r0,r0,#0x10000
000044  4941              LDR      r1,|L4.332|
000046  6008              STR      r0,[r1,#0]
000048  bf00              NOP      
;;;388    
;;;389       /* Wait till HSE is ready */
;;;390      while(LL_RCC_HSE_IsReady() != 1)
00004a  bf00              NOP      
                  |L4.76|
00004c  bf00              NOP      
00004e  483f              LDR      r0,|L4.332|
000050  6800              LDR      r0,[r0,#0]
000052  f3c04040          UBFX     r0,r0,#17,#1
000056  2800              CMP      r0,#0
000058  d0f8              BEQ      |L4.76|
;;;391      {
;;;392        
;;;393      }
;;;394      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
00005a  f44f0080          MOV      r0,#0x400000
00005e  2108              MOVS     r1,#8
000060  f44f72a8          MOV      r2,#0x150
000064  2300              MOVS     r3,#0
000066  ea400401          ORR      r4,r0,r1
00006a  ea441482          ORR      r4,r4,r2,LSL #6
00006e  4d37              LDR      r5,|L4.332|
000070  1d2d              ADDS     r5,r5,#4
000072  682d              LDR      r5,[r5,#0]
000074  4e36              LDR      r6,|L4.336|
000076  4035              ANDS     r5,r5,r6
000078  432c              ORRS     r4,r4,r5
00007a  4d34              LDR      r5,|L4.332|
00007c  1d2d              ADDS     r5,r5,#4
00007e  602c              STR      r4,[r5,#0]
000080  462c              MOV      r4,r5
000082  6824              LDR      r4,[r4,#0]
000084  f4243440          BIC      r4,r4,#0x30000
000088  431c              ORRS     r4,r4,r3
00008a  602c              STR      r4,[r5,#0]
00008c  bf00              NOP      
;;;395      LL_RCC_PLL_Enable();
00008e  bf00              NOP      
000090  1f28              SUBS     r0,r5,#4
000092  6800              LDR      r0,[r0,#0]
000094  f0407080          ORR      r0,r0,#0x1000000
000098  1f29              SUBS     r1,r5,#4
00009a  6008              STR      r0,[r1,#0]
00009c  bf00              NOP      
;;;396    
;;;397       /* Wait till PLL is ready */
;;;398      while(LL_RCC_PLL_IsReady() != 1)
00009e  bf00              NOP      
                  |L4.160|
0000a0  bf00              NOP      
0000a2  482a              LDR      r0,|L4.332|
0000a4  6800              LDR      r0,[r0,#0]
0000a6  f3c06040          UBFX     r0,r0,#25,#1
0000aa  2800              CMP      r0,#0
0000ac  d0f8              BEQ      |L4.160|
;;;399      {
;;;400        
;;;401      }
;;;402      LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
0000ae  2000              MOVS     r0,#0
0000b0  4926              LDR      r1,|L4.332|
0000b2  3108              ADDS     r1,r1,#8
0000b4  6809              LDR      r1,[r1,#0]
0000b6  f02101f0          BIC      r1,r1,#0xf0
0000ba  4301              ORRS     r1,r1,r0
0000bc  4a23              LDR      r2,|L4.332|
0000be  3208              ADDS     r2,r2,#8
0000c0  6011              STR      r1,[r2,#0]
0000c2  bf00              NOP      
;;;403      LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
0000c4  f44f50a0          MOV      r0,#0x1400
0000c8  4611              MOV      r1,r2
0000ca  6809              LDR      r1,[r1,#0]
0000cc  f42151e0          BIC      r1,r1,#0x1c00
0000d0  4301              ORRS     r1,r1,r0
0000d2  6011              STR      r1,[r2,#0]
0000d4  bf00              NOP      
;;;404      LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
0000d6  f44f4000          MOV      r0,#0x8000
0000da  4611              MOV      r1,r2
0000dc  6809              LDR      r1,[r1,#0]
0000de  f4214160          BIC      r1,r1,#0xe000
0000e2  4301              ORRS     r1,r1,r0
0000e4  6011              STR      r1,[r2,#0]
0000e6  bf00              NOP      
;;;405      LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
0000e8  2002              MOVS     r0,#2
0000ea  4611              MOV      r1,r2
0000ec  6809              LDR      r1,[r1,#0]
0000ee  f0210103          BIC      r1,r1,#3
0000f2  4301              ORRS     r1,r1,r0
0000f4  6011              STR      r1,[r2,#0]
0000f6  bf00              NOP      
;;;406    
;;;407       /* Wait till System clock is ready */
;;;408      while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
0000f8  bf00              NOP      
                  |L4.250|
0000fa  bf00              NOP      
0000fc  4813              LDR      r0,|L4.332|
0000fe  3008              ADDS     r0,r0,#8
000100  6800              LDR      r0,[r0,#0]
000102  f000000c          AND      r0,r0,#0xc
000106  2808              CMP      r0,#8
000108  d1f7              BNE      |L4.250|
;;;409      {
;;;410      
;;;411      }
;;;412      LL_Init1msTick(168000000);
00010a  4812              LDR      r0,|L4.340|
00010c  f7fffffe          BL       LL_Init1msTick
;;;413      LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
000110  2004              MOVS     r0,#4
000112  2804              CMP      r0,#4
000114  d108              BNE      |L4.296|
000116  f04f21e0          MOV      r1,#0xe000e000
00011a  6909              LDR      r1,[r1,#0x10]
00011c  f0410104          ORR      r1,r1,#4
000120  f04f22e0          MOV      r2,#0xe000e000
000124  6111              STR      r1,[r2,#0x10]
000126  e007              B        |L4.312|
                  |L4.296|
000128  f04f21e0          MOV      r1,#0xe000e000
00012c  6909              LDR      r1,[r1,#0x10]
00012e  f0210104          BIC      r1,r1,#4
000132  f04f22e0          MOV      r2,#0xe000e000
000136  6111              STR      r1,[r2,#0x10]
                  |L4.312|
000138  bf00              NOP      
;;;414      LL_SetSystemCoreClock(168000000);
00013a  4806              LDR      r0,|L4.340|
00013c  f7fffffe          BL       LL_SetSystemCoreClock
;;;415    }
000140  bd70              POP      {r4-r6,pc}
;;;416    
                          ENDP

000142  0000              DCW      0x0000
                  |L4.324|
                          DCD      0x40023c00
                  |L4.328|
                          DCD      0x40007000
                  |L4.332|
                          DCD      0x40023800
                  |L4.336|
                          DCD      0xffbf8000
                  |L4.340|
                          DCD      0x0a037a00

                          AREA ||i.joypad_assigned||, CODE, READONLY, ALIGN=2

                  joypad_assigned PROC
;;;103    }
;;;104    uint32_t joypad_assigned(uint8_t i) {
000000  4601              MOV      r1,r0
;;;105      uint32_t mask = 0;
000002  2000              MOVS     r0,#0
;;;106      if (joypad_assignments[idx_from_mask(BTN_R1)]    == i) mask |= BTN_R1;
000004  2204              MOVS     r2,#4
000006  fab2f382          CLZ      r3,r2
00000a  f1c30320          RSB      r3,r3,#0x20
00000e  b2db              UXTB     r3,r3
000010  4aa8              LDR      r2,|L5.692|
000012  5cd2              LDRB     r2,[r2,r3]
000014  428a              CMP      r2,r1
000016  d101              BNE      |L5.28|
000018  f0400004          ORR      r0,r0,#4
                  |L5.28|
;;;107      if (joypad_assignments[idx_from_mask(BTN_D1)]    == i) mask |= BTN_D1;
00001c  2208              MOVS     r2,#8
00001e  fab2f382          CLZ      r3,r2
000022  f1c30320          RSB      r3,r3,#0x20
000026  b2db              UXTB     r3,r3
000028  4aa2              LDR      r2,|L5.692|
00002a  5cd2              LDRB     r2,[r2,r3]
00002c  428a              CMP      r2,r1
00002e  d101              BNE      |L5.52|
000030  f0400008          ORR      r0,r0,#8
                  |L5.52|
;;;108      if (joypad_assignments[idx_from_mask(BTN_L1)]    == i) mask |= BTN_L1;
000034  2210              MOVS     r2,#0x10
000036  fab2f382          CLZ      r3,r2
00003a  f1c30320          RSB      r3,r3,#0x20
00003e  b2db              UXTB     r3,r3
000040  4a9c              LDR      r2,|L5.692|
000042  5cd2              LDRB     r2,[r2,r3]
000044  428a              CMP      r2,r1
000046  d101              BNE      |L5.76|
000048  f0400010          ORR      r0,r0,#0x10
                  |L5.76|
;;;109      if (joypad_assignments[idx_from_mask(BTN_M1)]    == i) mask |= BTN_M1;
00004c  2220              MOVS     r2,#0x20
00004e  fab2f382          CLZ      r3,r2
000052  f1c30320          RSB      r3,r3,#0x20
000056  b2db              UXTB     r3,r3
000058  4a96              LDR      r2,|L5.692|
00005a  5cd2              LDRB     r2,[r2,r3]
00005c  428a              CMP      r2,r1
00005e  d101              BNE      |L5.100|
000060  f0400020          ORR      r0,r0,#0x20
                  |L5.100|
;;;110      if (joypad_assignments[idx_from_mask(BTN_X1)]    == i) mask |= BTN_X1;
000064  2240              MOVS     r2,#0x40
000066  fab2f382          CLZ      r3,r2
00006a  f1c30320          RSB      r3,r3,#0x20
00006e  b2db              UXTB     r3,r3
000070  4a90              LDR      r2,|L5.692|
000072  5cd2              LDRB     r2,[r2,r3]
000074  428a              CMP      r2,r1
000076  d101              BNE      |L5.124|
000078  f0400040          ORR      r0,r0,#0x40
                  |L5.124|
;;;111      if (joypad_assignments[idx_from_mask(BTN_X2)]    == i) mask |= BTN_X2;
00007c  2280              MOVS     r2,#0x80
00007e  fab2f382          CLZ      r3,r2
000082  f1c30320          RSB      r3,r3,#0x20
000086  b2db              UXTB     r3,r3
000088  4a8a              LDR      r2,|L5.692|
00008a  5cd2              LDRB     r2,[r2,r3]
00008c  428a              CMP      r2,r1
00008e  d101              BNE      |L5.148|
000090  f0400080          ORR      r0,r0,#0x80
                  |L5.148|
;;;112      if (joypad_assignments[idx_from_mask(BTN_X3)]    == i) mask |= BTN_X3;
000094  f44f7280          MOV      r2,#0x100
000098  fab2f382          CLZ      r3,r2
00009c  f1c30320          RSB      r3,r3,#0x20
0000a0  b2db              UXTB     r3,r3
0000a2  4a84              LDR      r2,|L5.692|
0000a4  5cd2              LDRB     r2,[r2,r3]
0000a6  428a              CMP      r2,r1
0000a8  d101              BNE      |L5.174|
0000aa  f4407080          ORR      r0,r0,#0x100
                  |L5.174|
;;;113      if (joypad_assignments[idx_from_mask(BTN_X4)]    == i) mask |= BTN_X4;
0000ae  f44f7200          MOV      r2,#0x200
0000b2  fab2f382          CLZ      r3,r2
0000b6  f1c30320          RSB      r3,r3,#0x20
0000ba  b2db              UXTB     r3,r3
0000bc  4a7d              LDR      r2,|L5.692|
0000be  5cd2              LDRB     r2,[r2,r3]
0000c0  428a              CMP      r2,r1
0000c2  d101              BNE      |L5.200|
0000c4  f4407000          ORR      r0,r0,#0x200
                  |L5.200|
;;;114      if (joypad_assignments[idx_from_mask(BTN_JS2)]   == i) mask |= BTN_JS2;
0000c8  f44f6280          MOV      r2,#0x400
0000cc  fab2f382          CLZ      r3,r2
0000d0  f1c30320          RSB      r3,r3,#0x20
0000d4  b2db              UXTB     r3,r3
0000d6  4a77              LDR      r2,|L5.692|
0000d8  5cd2              LDRB     r2,[r2,r3]
0000da  428a              CMP      r2,r1
0000dc  d101              BNE      |L5.226|
0000de  f4406080          ORR      r0,r0,#0x400
                  |L5.226|
;;;115      if (joypad_assignments[idx_from_mask(BTN_D2)]    == i) mask |= BTN_D2;
0000e2  f44f6200          MOV      r2,#0x800
0000e6  fab2f382          CLZ      r3,r2
0000ea  f1c30320          RSB      r3,r3,#0x20
0000ee  b2db              UXTB     r3,r3
0000f0  4a70              LDR      r2,|L5.692|
0000f2  5cd2              LDRB     r2,[r2,r3]
0000f4  428a              CMP      r2,r1
0000f6  d101              BNE      |L5.252|
0000f8  f4406000          ORR      r0,r0,#0x800
                  |L5.252|
;;;116      if (joypad_assignments[idx_from_mask(BTN_R2)]    == i) mask |= BTN_R2;
0000fc  f44f5280          MOV      r2,#0x1000
000100  fab2f382          CLZ      r3,r2
000104  f1c30320          RSB      r3,r3,#0x20
000108  b2db              UXTB     r3,r3
00010a  4a6a              LDR      r2,|L5.692|
00010c  5cd2              LDRB     r2,[r2,r3]
00010e  428a              CMP      r2,r1
000110  d101              BNE      |L5.278|
000112  f4405080          ORR      r0,r0,#0x1000
                  |L5.278|
;;;117      if (joypad_assignments[idx_from_mask(BTN_M2)]    == i) mask |= BTN_M2;
000116  f44f5200          MOV      r2,#0x2000
00011a  fab2f382          CLZ      r3,r2
00011e  f1c30320          RSB      r3,r3,#0x20
000122  b2db              UXTB     r3,r3
000124  4a63              LDR      r2,|L5.692|
000126  5cd2              LDRB     r2,[r2,r3]
000128  428a              CMP      r2,r1
00012a  d101              BNE      |L5.304|
00012c  f4405000          ORR      r0,r0,#0x2000
                  |L5.304|
;;;118      if (joypad_assignments[idx_from_mask(BTN_U2)]    == i) mask |= BTN_U2;
000130  f44f4280          MOV      r2,#0x4000
000134  fab2f382          CLZ      r3,r2
000138  f1c30320          RSB      r3,r3,#0x20
00013c  b2db              UXTB     r3,r3
00013e  4a5d              LDR      r2,|L5.692|
000140  5cd2              LDRB     r2,[r2,r3]
000142  428a              CMP      r2,r1
000144  d101              BNE      |L5.330|
000146  f4404080          ORR      r0,r0,#0x4000
                  |L5.330|
;;;119      if (joypad_assignments[idx_from_mask(BTN_L2)]    == i) mask |= BTN_L2;
00014a  f44f4200          MOV      r2,#0x8000
00014e  fab2f382          CLZ      r3,r2
000152  f1c30320          RSB      r3,r3,#0x20
000156  b2db              UXTB     r3,r3
000158  4a56              LDR      r2,|L5.692|
00015a  5cd2              LDRB     r2,[r2,r3]
00015c  428a              CMP      r2,r1
00015e  d101              BNE      |L5.356|
000160  f4404000          ORR      r0,r0,#0x8000
                  |L5.356|
;;;120      if (joypad_assignments[idx_from_mask(BTN_JS1)]   == i) mask |= BTN_JS1;
000164  2201              MOVS     r2,#1
000166  fab2f382          CLZ      r3,r2
00016a  f1c30320          RSB      r3,r3,#0x20
00016e  b2db              UXTB     r3,r3
000170  4a50              LDR      r2,|L5.692|
000172  5cd2              LDRB     r2,[r2,r3]
000174  428a              CMP      r2,r1
000176  d101              BNE      |L5.380|
000178  f0400001          ORR      r0,r0,#1
                  |L5.380|
;;;121      if (joypad_assignments[idx_from_mask(BTN_U1)]    == i) mask |= BTN_U1;
00017c  2202              MOVS     r2,#2
00017e  fab2f382          CLZ      r3,r2
000182  f1c30320          RSB      r3,r3,#0x20
000186  b2db              UXTB     r3,r3
000188  4a4a              LDR      r2,|L5.692|
00018a  5cd2              LDRB     r2,[r2,r3]
00018c  428a              CMP      r2,r1
00018e  d101              BNE      |L5.404|
000190  f0400002          ORR      r0,r0,#2
                  |L5.404|
;;;122      if (joypad_assignments[idx_from_mask(BTN_JS1_L)] == i) mask |= BTN_JS1_L;
000194  f44f3280          MOV      r2,#0x10000
000198  fab2f382          CLZ      r3,r2
00019c  f1c30320          RSB      r3,r3,#0x20
0001a0  b2db              UXTB     r3,r3
0001a2  4a44              LDR      r2,|L5.692|
0001a4  5cd2              LDRB     r2,[r2,r3]
0001a6  428a              CMP      r2,r1
0001a8  d101              BNE      |L5.430|
0001aa  f4403080          ORR      r0,r0,#0x10000
                  |L5.430|
;;;123      if (joypad_assignments[idx_from_mask(BTN_JS1_R)] == i) mask |= BTN_JS1_R;
0001ae  f44f3200          MOV      r2,#0x20000
0001b2  fab2f382          CLZ      r3,r2
0001b6  f1c30320          RSB      r3,r3,#0x20
0001ba  b2db              UXTB     r3,r3
0001bc  4a3d              LDR      r2,|L5.692|
0001be  5cd2              LDRB     r2,[r2,r3]
0001c0  428a              CMP      r2,r1
0001c2  d101              BNE      |L5.456|
0001c4  f4403000          ORR      r0,r0,#0x20000
                  |L5.456|
;;;124      if (joypad_assignments[idx_from_mask(BTN_JS1_D)] == i) mask |= BTN_JS1_D;
0001c8  f44f2280          MOV      r2,#0x40000
0001cc  fab2f382          CLZ      r3,r2
0001d0  f1c30320          RSB      r3,r3,#0x20
0001d4  b2db              UXTB     r3,r3
0001d6  4a37              LDR      r2,|L5.692|
0001d8  5cd2              LDRB     r2,[r2,r3]
0001da  428a              CMP      r2,r1
0001dc  d101              BNE      |L5.482|
0001de  f4402080          ORR      r0,r0,#0x40000
                  |L5.482|
;;;125      if (joypad_assignments[idx_from_mask(BTN_JS1_U)] == i) mask |= BTN_JS1_U;
0001e2  f44f2200          MOV      r2,#0x80000
0001e6  fab2f382          CLZ      r3,r2
0001ea  f1c30320          RSB      r3,r3,#0x20
0001ee  b2db              UXTB     r3,r3
0001f0  4a30              LDR      r2,|L5.692|
0001f2  5cd2              LDRB     r2,[r2,r3]
0001f4  428a              CMP      r2,r1
0001f6  d101              BNE      |L5.508|
0001f8  f4402000          ORR      r0,r0,#0x80000
                  |L5.508|
;;;126      if (joypad_assignments[idx_from_mask(BTN_JS2_L)] == i) mask |= BTN_JS2_L;
0001fc  f44f1280          MOV      r2,#0x100000
000200  fab2f382          CLZ      r3,r2
000204  f1c30320          RSB      r3,r3,#0x20
000208  b2db              UXTB     r3,r3
00020a  4a2a              LDR      r2,|L5.692|
00020c  5cd2              LDRB     r2,[r2,r3]
00020e  428a              CMP      r2,r1
000210  d101              BNE      |L5.534|
000212  f4401080          ORR      r0,r0,#0x100000
                  |L5.534|
;;;127      if (joypad_assignments[idx_from_mask(BTN_JS2_R)] == i) mask |= BTN_JS2_R;
000216  f44f1200          MOV      r2,#0x200000
00021a  fab2f382          CLZ      r3,r2
00021e  f1c30320          RSB      r3,r3,#0x20
000222  b2db              UXTB     r3,r3
000224  4a23              LDR      r2,|L5.692|
000226  5cd2              LDRB     r2,[r2,r3]
000228  428a              CMP      r2,r1
00022a  d101              BNE      |L5.560|
00022c  f4401000          ORR      r0,r0,#0x200000
                  |L5.560|
;;;128      if (joypad_assignments[idx_from_mask(BTN_JS2_D)] == i) mask |= BTN_JS2_D;
000230  f44f0280          MOV      r2,#0x400000
000234  fab2f382          CLZ      r3,r2
000238  f1c30320          RSB      r3,r3,#0x20
00023c  b2db              UXTB     r3,r3
00023e  4a1d              LDR      r2,|L5.692|
000240  5cd2              LDRB     r2,[r2,r3]
000242  428a              CMP      r2,r1
000244  d101              BNE      |L5.586|
000246  f4400080          ORR      r0,r0,#0x400000
                  |L5.586|
;;;129      if (joypad_assignments[idx_from_mask(BTN_JS2_U)] == i) mask |= BTN_JS2_U;
00024a  f44f0200          MOV      r2,#0x800000
00024e  fab2f382          CLZ      r3,r2
000252  f1c30320          RSB      r3,r3,#0x20
000256  b2db              UXTB     r3,r3
000258  4a16              LDR      r2,|L5.692|
00025a  5cd2              LDRB     r2,[r2,r3]
00025c  428a              CMP      r2,r1
00025e  d101              BNE      |L5.612|
000260  f4400000          ORR      r0,r0,#0x800000
                  |L5.612|
;;;130      if (joypad_assignments[idx_from_mask(BTN_IMU_L)] == i) mask |= BTN_IMU_L;
000264  f04f7280          MOV      r2,#0x1000000
000268  fab2f382          CLZ      r3,r2
00026c  f1c30320          RSB      r3,r3,#0x20
000270  b2db              UXTB     r3,r3
000272  4a10              LDR      r2,|L5.692|
000274  5cd2              LDRB     r2,[r2,r3]
000276  428a              CMP      r2,r1
000278  d101              BNE      |L5.638|
00027a  f0407080          ORR      r0,r0,#0x1000000
                  |L5.638|
;;;131      if (joypad_assignments[idx_from_mask(BTN_IMU_R)] == i) mask |= BTN_IMU_R;
00027e  f04f7200          MOV      r2,#0x2000000
000282  fab2f382          CLZ      r3,r2
000286  f1c30320          RSB      r3,r3,#0x20
00028a  b2db              UXTB     r3,r3
00028c  4a09              LDR      r2,|L5.692|
00028e  5cd2              LDRB     r2,[r2,r3]
000290  428a              CMP      r2,r1
000292  d101              BNE      |L5.664|
000294  f0407000          ORR      r0,r0,#0x2000000
                  |L5.664|
;;;132      if (joypad_assignments[idx_from_mask(BTN_IMU_J)] == i) mask |= BTN_IMU_J;
000298  f04f6280          MOV      r2,#0x4000000
00029c  fab2f382          CLZ      r3,r2
0002a0  f1c30320          RSB      r3,r3,#0x20
0002a4  b2db              UXTB     r3,r3
0002a6  4a03              LDR      r2,|L5.692|
0002a8  5cd2              LDRB     r2,[r2,r3]
0002aa  428a              CMP      r2,r1
0002ac  d101              BNE      |L5.690|
0002ae  f0406080          ORR      r0,r0,#0x4000000
                  |L5.690|
;;;133      return mask;
;;;134    }
0002b2  4770              BX       lr
;;;135    /* USER CODE END 0 */
                          ENDP

                  |L5.692|
                          DCD      joypad_assignments

                          AREA ||i.joypad_icon||, CODE, READONLY, ALIGN=2

                  joypad_icon PROC
;;;95     }
;;;96     char joypad_icon(uint32_t i) {
000000  b50c              PUSH     {r2,r3,lr}
000002  4601              MOV      r1,r0
;;;97       const char icons[6] = {'^', 'V', '<', '>', 'A', 'B'};
000004  a207              ADR      r2,|L6.36|
000006  ca05              LDM      r2,{r0,r2}
000008  e9cd0200          STRD     r0,r2,[sp,#0]
;;;98       return icons[joypad_assignments[idx_from_mask(i)]];
00000c  bf00              NOP      
00000e  fab1f081          CLZ      r0,r1
000012  f1c00020          RSB      r0,r0,#0x20
000016  b2c0              UXTB     r0,r0
000018  4a04              LDR      r2,|L6.44|
00001a  5c10              LDRB     r0,[r2,r0]
00001c  f81d0000          LDRB     r0,[sp,r0]
;;;99     }
000020  bd0c              POP      {r2,r3,pc}
;;;100    void joypad_rotate(uint32_t mask) {
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
000024  5e563c3e          DCB      "^V<>AB",0
000028  414200  
00002b  00                DCB      0
                  |L6.44|
                          DCD      joypad_assignments

                          AREA ||i.joypad_rotate||, CODE, READONLY, ALIGN=2

                  joypad_rotate PROC
;;;99     }
;;;100    void joypad_rotate(uint32_t mask) {
000000  b510              PUSH     {r4,lr}
;;;101      joypad_assignments[idx_from_mask(mask)] += 1;
000002  bf00              NOP      
000004  fab0f280          CLZ      r2,r0
000008  f1c20220          RSB      r2,r2,#0x20
00000c  b2d2              UXTB     r2,r2
00000e  4b0a              LDR      r3,|L7.56|
000010  18d1              ADDS     r1,r2,r3
000012  780a              LDRB     r2,[r1,#0]
000014  1c52              ADDS     r2,r2,#1
000016  700a              STRB     r2,[r1,#0]
;;;102      joypad_assignments[idx_from_mask(mask)] %= 6;
000018  bf00              NOP      
00001a  fab0f280          CLZ      r2,r0
00001e  f1c20220          RSB      r2,r2,#0x20
000022  b2d2              UXTB     r2,r2
000024  18d1              ADDS     r1,r2,r3
000026  780a              LDRB     r2,[r1,#0]
000028  2306              MOVS     r3,#6
00002a  fb92f4f3          SDIV     r4,r2,r3
00002e  fb032214          MLS      r2,r3,r4,r2
000032  700a              STRB     r2,[r1,#0]
;;;103    }
000034  bd10              POP      {r4,pc}
;;;104    uint32_t joypad_assigned(uint8_t i) {
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      joypad_assignments

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;140      */
;;;141    int main(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;142    {
;;;143      /* USER CODE BEGIN 1 */
;;;144    
;;;145      /* USER CODE END 1 */
;;;146    
;;;147      /* MCU Configuration--------------------------------------------------------*/
;;;148    
;;;149      /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
;;;150      HAL_Init();
000002  f7fffffe          BL       HAL_Init
;;;151    
;;;152      /* USER CODE BEGIN Init */
;;;153    
;;;154      /* USER CODE END Init */
;;;155    
;;;156      /* Configure the system clock */
;;;157      SystemClock_Config();
000006  f7fffffe          BL       SystemClock_Config
;;;158    
;;;159      /* USER CODE BEGIN SysInit */
;;;160    	ticks_init();
00000a  bf00              NOP      
00000c  f04f20e0          MOV      r0,#0xe000e000
000010  6900              LDR      r0,[r0,#0x10]
000012  f0400002          ORR      r0,r0,#2
000016  f04f21e0          MOV      r1,#0xe000e000
00001a  6108              STR      r0,[r1,#0x10]
00001c  bf00              NOP      
;;;161      /* USER CODE END SysInit */
;;;162    
;;;163      /* Initialize all configured peripherals */
;;;164      MX_GPIO_Init();
00001e  f7fffffe          BL       MX_GPIO_Init
;;;165      MX_DMA_Init();
000022  f7fffffe          BL       MX_DMA_Init
;;;166      MX_SPI1_Init();
000026  f7fffffe          BL       MX_SPI1_Init
;;;167      MX_USART1_UART_Init();
00002a  f7fffffe          BL       MX_USART1_UART_Init
;;;168      MX_ADC1_Init();
00002e  f7fffffe          BL       MX_ADC1_Init
;;;169      MX_SPI5_Init();
000032  f7fffffe          BL       MX_SPI5_Init
;;;170      MX_USART2_UART_Init();
000036  f7fffffe          BL       MX_USART2_UART_Init
;;;171      MX_TIM13_Init();
00003a  f7fffffe          BL       MX_TIM13_Init
;;;172      MX_DAC_Init();
00003e  f7fffffe          BL       MX_DAC_Init
;;;173      MX_TIM14_Init();
000042  f7fffffe          BL       MX_TIM14_Init
;;;174      MX_TIM12_Init();
000046  f7fffffe          BL       MX_TIM12_Init
;;;175      MX_TIM11_Init();
00004a  f7fffffe          BL       MX_TIM11_Init
;;;176      MX_TIM10_Init();
00004e  f7fffffe          BL       MX_TIM10_Init
;;;177      MX_TIM9_Init();
000052  f7fffffe          BL       MX_TIM9_Init
;;;178      MX_TIM6_Init();
000056  f7fffffe          BL       MX_TIM6_Init
;;;179      MX_TIM7_Init();
00005a  f7fffffe          BL       MX_TIM7_Init
;;;180      MX_SDIO_SD_Init();
00005e  f7fffffe          BL       MX_SDIO_SD_Init
;;;181      /* USER CODE BEGIN 2 */
;;;182      tft_init(PIN_ON_LEFT, BLACK, WHITE, GREEN, RED);
000062  f44f4078          MOV      r0,#0xf800
000066  f44f63fc          MOV      r3,#0x7e0
00006a  f64f72ff          MOV      r2,#0xffff
00006e  2100              MOVS     r1,#0
000070  9000              STR      r0,[sp,#0]
000072  2001              MOVS     r0,#1
000074  f7fffffe          BL       tft_init
;;;183      // IMU_enableAccel(50);
;;;184      joystick_init();
000078  f7fffffe          BL       joystick_init
;;;185    
;;;186      //Frame timer
;;;187      TIM6->PSC = 83;
00007c  2053              MOVS     r0,#0x53
00007e  49fe              LDR      r1,|L8.1144|
000080  6288              STR      r0,[r1,#0x28]
;;;188      TIM6->ARR = 33333;
000082  f2482035          MOV      r0,#0x8235
000086  62c8              STR      r0,[r1,#0x2c]
;;;189      TIM6->CR1 = TIM_CR1_CEN;
000088  2001              MOVS     r0,#1
00008a  6008              STR      r0,[r1,#0]
;;;190      //LCD backlight PWM
;;;191      TIM13->PSC = 8399;
00008c  f24200cf          MOV      r0,#0x20cf
000090  49fa              LDR      r1,|L8.1148|
000092  6008              STR      r0,[r1,#0]
;;;192      TIM13->ARR = 99;
000094  2063              MOVS     r0,#0x63
000096  1d09              ADDS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;193      TIM13->CCR1 = 10;
00009a  200a              MOVS     r0,#0xa
00009c  49f7              LDR      r1,|L8.1148|
00009e  310c              ADDS     r1,r1,#0xc
0000a0  6008              STR      r0,[r1,#0]
;;;194      TIM13->CR1 = TIM_CR1_CEN;
0000a2  2001              MOVS     r0,#1
0000a4  49f5              LDR      r1,|L8.1148|
0000a6  3928              SUBS     r1,r1,#0x28
0000a8  6008              STR      r0,[r1,#0]
;;;195    
;;;196      joypad_assignments[idx_from_mask(BTN_R1)]    = ASSIGN_RIGHT;
0000aa  2004              MOVS     r0,#4
0000ac  fab0f180          CLZ      r1,r0
0000b0  f1c10120          RSB      r1,r1,#0x20
0000b4  b2c9              UXTB     r1,r1
0000b6  48f2              LDR      r0,|L8.1152|
0000b8  2203              MOVS     r2,#3
0000ba  5442              STRB     r2,[r0,r1]
;;;197      joypad_assignments[idx_from_mask(BTN_D1)]    = ASSIGN_DOWN;
0000bc  2008              MOVS     r0,#8
0000be  fab0f180          CLZ      r1,r0
0000c2  f1c10120          RSB      r1,r1,#0x20
0000c6  b2c9              UXTB     r1,r1
0000c8  48ed              LDR      r0,|L8.1152|
0000ca  2201              MOVS     r2,#1
0000cc  5442              STRB     r2,[r0,r1]
;;;198      joypad_assignments[idx_from_mask(BTN_L1)]    = ASSIGN_LEFT;
0000ce  2010              MOVS     r0,#0x10
0000d0  fab0f180          CLZ      r1,r0
0000d4  f1c10120          RSB      r1,r1,#0x20
0000d8  b2c9              UXTB     r1,r1
0000da  48e9              LDR      r0,|L8.1152|
0000dc  2202              MOVS     r2,#2
0000de  5442              STRB     r2,[r0,r1]
;;;199      joypad_assignments[idx_from_mask(BTN_M1)]    = ASSIGN_B;
0000e0  2020              MOVS     r0,#0x20
0000e2  fab0f180          CLZ      r1,r0
0000e6  f1c10120          RSB      r1,r1,#0x20
0000ea  b2c9              UXTB     r1,r1
0000ec  48e4              LDR      r0,|L8.1152|
0000ee  2205              MOVS     r2,#5
0000f0  5442              STRB     r2,[r0,r1]
;;;200      joypad_assignments[idx_from_mask(BTN_JS2)]   = ASSIGN_B;
0000f2  f44f6080          MOV      r0,#0x400
0000f6  fab0f180          CLZ      r1,r0
0000fa  f1c10120          RSB      r1,r1,#0x20
0000fe  b2c9              UXTB     r1,r1
000100  48df              LDR      r0,|L8.1152|
000102  5442              STRB     r2,[r0,r1]
;;;201      joypad_assignments[idx_from_mask(BTN_D2)]    = ASSIGN_B;
000104  f44f6000          MOV      r0,#0x800
000108  fab0f180          CLZ      r1,r0
00010c  f1c10120          RSB      r1,r1,#0x20
000110  b2c9              UXTB     r1,r1
000112  48db              LDR      r0,|L8.1152|
000114  5442              STRB     r2,[r0,r1]
;;;202      joypad_assignments[idx_from_mask(BTN_R2)]    = ASSIGN_A;
000116  f44f5080          MOV      r0,#0x1000
00011a  fab0f180          CLZ      r1,r0
00011e  f1c10120          RSB      r1,r1,#0x20
000122  b2c9              UXTB     r1,r1
000124  48d6              LDR      r0,|L8.1152|
000126  2204              MOVS     r2,#4
000128  5442              STRB     r2,[r0,r1]
;;;203      joypad_assignments[idx_from_mask(BTN_M2)]    = ASSIGN_B;
00012a  02d0              LSLS     r0,r2,#11
00012c  fab0f180          CLZ      r1,r0
000130  f1c10120          RSB      r1,r1,#0x20
000134  b2c9              UXTB     r1,r1
000136  48d2              LDR      r0,|L8.1152|
000138  2205              MOVS     r2,#5
00013a  5442              STRB     r2,[r0,r1]
;;;204      joypad_assignments[idx_from_mask(BTN_U2)]    = ASSIGN_A;
00013c  f44f4080          MOV      r0,#0x4000
000140  fab0f180          CLZ      r1,r0
000144  f1c10120          RSB      r1,r1,#0x20
000148  b2c9              UXTB     r1,r1
00014a  48cd              LDR      r0,|L8.1152|
00014c  2204              MOVS     r2,#4
00014e  5442              STRB     r2,[r0,r1]
;;;205      joypad_assignments[idx_from_mask(BTN_L2)]    = ASSIGN_B;
000150  0350              LSLS     r0,r2,#13
000152  fab0f180          CLZ      r1,r0
000156  f1c10120          RSB      r1,r1,#0x20
00015a  b2c9              UXTB     r1,r1
00015c  48c8              LDR      r0,|L8.1152|
00015e  2205              MOVS     r2,#5
000160  5442              STRB     r2,[r0,r1]
;;;206      joypad_assignments[idx_from_mask(BTN_JS1)]   = ASSIGN_B;
000162  2001              MOVS     r0,#1
000164  fab0f180          CLZ      r1,r0
000168  f1c10120          RSB      r1,r1,#0x20
00016c  b2c9              UXTB     r1,r1
00016e  48c4              LDR      r0,|L8.1152|
000170  5442              STRB     r2,[r0,r1]
;;;207      joypad_assignments[idx_from_mask(BTN_U1)]    = ASSIGN_UP;
000172  2002              MOVS     r0,#2
000174  fab0f180          CLZ      r1,r0
000178  f1c10120          RSB      r1,r1,#0x20
00017c  b2c9              UXTB     r1,r1
00017e  48c0              LDR      r0,|L8.1152|
000180  2200              MOVS     r2,#0
000182  5442              STRB     r2,[r0,r1]
;;;208      joypad_assignments[idx_from_mask(BTN_JS1_L)] = ASSIGN_LEFT;
000184  f44f3080          MOV      r0,#0x10000
000188  fab0f180          CLZ      r1,r0
00018c  f1c10120          RSB      r1,r1,#0x20
000190  b2c9              UXTB     r1,r1
000192  48bb              LDR      r0,|L8.1152|
000194  2202              MOVS     r2,#2
000196  5442              STRB     r2,[r0,r1]
;;;209      joypad_assignments[idx_from_mask(BTN_JS1_R)] = ASSIGN_RIGHT;
000198  0410              LSLS     r0,r2,#16
00019a  fab0f180          CLZ      r1,r0
00019e  f1c10120          RSB      r1,r1,#0x20
0001a2  b2c9              UXTB     r1,r1
0001a4  48b6              LDR      r0,|L8.1152|
0001a6  2203              MOVS     r2,#3
0001a8  5442              STRB     r2,[r0,r1]
;;;210      joypad_assignments[idx_from_mask(BTN_JS1_D)] = ASSIGN_DOWN;
0001aa  f44f2080          MOV      r0,#0x40000
0001ae  fab0f180          CLZ      r1,r0
0001b2  f1c10120          RSB      r1,r1,#0x20
0001b6  b2c9              UXTB     r1,r1
0001b8  48b1              LDR      r0,|L8.1152|
0001ba  2201              MOVS     r2,#1
0001bc  5442              STRB     r2,[r0,r1]
;;;211      joypad_assignments[idx_from_mask(BTN_JS1_U)] = ASSIGN_UP;
0001be  04d0              LSLS     r0,r2,#19
0001c0  fab0f180          CLZ      r1,r0
0001c4  f1c10120          RSB      r1,r1,#0x20
0001c8  b2c9              UXTB     r1,r1
0001ca  48ad              LDR      r0,|L8.1152|
0001cc  2200              MOVS     r2,#0
0001ce  5442              STRB     r2,[r0,r1]
;;;212      joypad_assignments[idx_from_mask(BTN_JS2_L)] = ASSIGN_B;
0001d0  f44f1080          MOV      r0,#0x100000
0001d4  fab0f180          CLZ      r1,r0
0001d8  f1c10120          RSB      r1,r1,#0x20
0001dc  b2c9              UXTB     r1,r1
0001de  48a8              LDR      r0,|L8.1152|
0001e0  2205              MOVS     r2,#5
0001e2  5442              STRB     r2,[r0,r1]
;;;213      joypad_assignments[idx_from_mask(BTN_JS2_R)] = ASSIGN_B;
0001e4  f44f1000          MOV      r0,#0x200000
0001e8  fab0f180          CLZ      r1,r0
0001ec  f1c10120          RSB      r1,r1,#0x20
0001f0  b2c9              UXTB     r1,r1
0001f2  48a3              LDR      r0,|L8.1152|
0001f4  5442              STRB     r2,[r0,r1]
;;;214      joypad_assignments[idx_from_mask(BTN_JS2_D)] = ASSIGN_A;
0001f6  f44f0080          MOV      r0,#0x400000
0001fa  fab0f180          CLZ      r1,r0
0001fe  f1c10120          RSB      r1,r1,#0x20
000202  b2c9              UXTB     r1,r1
000204  489e              LDR      r0,|L8.1152|
000206  2204              MOVS     r2,#4
000208  5442              STRB     r2,[r0,r1]
;;;215      joypad_assignments[idx_from_mask(BTN_JS2_U)] = ASSIGN_A;
00020a  0550              LSLS     r0,r2,#21
00020c  fab0f180          CLZ      r1,r0
000210  f1c10120          RSB      r1,r1,#0x20
000214  b2c9              UXTB     r1,r1
000216  489a              LDR      r0,|L8.1152|
000218  5442              STRB     r2,[r0,r1]
;;;216      joypad_assignments[idx_from_mask(BTN_X1)]    = ASSIGN_SEL;
00021a  2040              MOVS     r0,#0x40
00021c  fab0f180          CLZ      r1,r0
000220  f1c10120          RSB      r1,r1,#0x20
000224  b2c9              UXTB     r1,r1
000226  4896              LDR      r0,|L8.1152|
000228  2207              MOVS     r2,#7
00022a  5442              STRB     r2,[r0,r1]
;;;217      joypad_assignments[idx_from_mask(BTN_X2)]    = ASSIGN_NONE;
00022c  2080              MOVS     r0,#0x80
00022e  fab0f180          CLZ      r1,r0
000232  f1c10120          RSB      r1,r1,#0x20
000236  b2c9              UXTB     r1,r1
000238  4891              LDR      r0,|L8.1152|
00023a  2208              MOVS     r2,#8
00023c  5442              STRB     r2,[r0,r1]
;;;218      joypad_assignments[idx_from_mask(BTN_X3)]    = ASSIGN_NONE;
00023e  0150              LSLS     r0,r2,#5
000240  fab0f180          CLZ      r1,r0
000244  f1c10120          RSB      r1,r1,#0x20
000248  b2c9              UXTB     r1,r1
00024a  488d              LDR      r0,|L8.1152|
00024c  5442              STRB     r2,[r0,r1]
;;;219      joypad_assignments[idx_from_mask(BTN_X4)]    = ASSIGN_START;
00024e  0190              LSLS     r0,r2,#6
000250  fab0f180          CLZ      r1,r0
000254  f1c10120          RSB      r1,r1,#0x20
000258  b2c9              UXTB     r1,r1
00025a  4889              LDR      r0,|L8.1152|
00025c  2206              MOVS     r2,#6
00025e  5442              STRB     r2,[r0,r1]
;;;220      joypad_assignments[idx_from_mask(BTN_IMU_L)] = ASSIGN_LEFT;
000260  f04f7080          MOV      r0,#0x1000000
000264  fab0f180          CLZ      r1,r0
000268  f1c10120          RSB      r1,r1,#0x20
00026c  b2c9              UXTB     r1,r1
00026e  4884              LDR      r0,|L8.1152|
000270  2202              MOVS     r2,#2
000272  5442              STRB     r2,[r0,r1]
;;;221      joypad_assignments[idx_from_mask(BTN_IMU_R)] = ASSIGN_RIGHT;
000274  0610              LSLS     r0,r2,#24
000276  fab0f180          CLZ      r1,r0
00027a  f1c10120          RSB      r1,r1,#0x20
00027e  b2c9              UXTB     r1,r1
000280  487f              LDR      r0,|L8.1152|
000282  2203              MOVS     r2,#3
000284  5442              STRB     r2,[r0,r1]
;;;222      joypad_assignments[idx_from_mask(BTN_IMU_J)] = ASSIGN_A;
000286  f04f6080          MOV      r0,#0x4000000
00028a  fab0f180          CLZ      r1,r0
00028e  f1c10120          RSB      r1,r1,#0x20
000292  b2c9              UXTB     r1,r1
000294  487a              LDR      r0,|L8.1152|
000296  2204              MOVS     r2,#4
000298  5442              STRB     r2,[r0,r1]
;;;223      delay(100);
00029a  2064              MOVS     r0,#0x64
00029c  4979              LDR      r1,|L8.1156|
00029e  6008              STR      r0,[r1,#0]  ; __delay
0002a0  bf00              NOP      
0002a2  bf00              NOP      
                  |L8.676|
0002a4  4977              LDR      r1,|L8.1156|
0002a6  6809              LDR      r1,[r1,#0]  ; __delay
0002a8  2900              CMP      r1,#0
0002aa  d1fb              BNE      |L8.676|
0002ac  bf00              NOP      
;;;224      /* USER CODE END 2 */
;;;225    
;;;226      /* Infinite loop */
;;;227      /* USER CODE BEGIN WHILE */
;;;228      while (1)
0002ae  e30f              B        |L8.2256|
                  |L8.688|
;;;229      {
;;;230        static int GAME_SELECT = 0;
;;;231        #define NUM_OF_GAMES 3
;;;232    
;;;233    
;;;234        static uint32_t last_joypad_state = 0;
;;;235        joypad_update();
0002b0  f7fffffe          BL       joypad_update
;;;236        #define btn_pressed(X) (joypad_state & (X))
;;;237        #define btn_clicked(X) (joypad_state & (X)) && !(last_joypad_state & (X))
;;;238        tft_clear();
0002b4  f7fffffe          BL       tft_clear
;;;239        tft_printc(4, 0, "ELEC3300(24) - Anshuman & Aaron");
0002b8  a273              ADR      r2,|L8.1160|
0002ba  2100              MOVS     r1,#0
0002bc  2004              MOVS     r0,#4
0002be  f7fffffe          BL       tft_printc
;;;240        tft_printc(6, 12, "SELECT");
0002c2  a279              ADR      r2,|L8.1192|
0002c4  210c              MOVS     r1,#0xc
0002c6  2006              MOVS     r0,#6
0002c8  f7fffffe          BL       tft_printc
;;;241        tft_prints(13, 12, "%s Super Mario Bros]", (GAME_SELECT == 0) ? ("[>") : ("-"));
0002cc  4878              LDR      r0,|L8.1200|
0002ce  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
0002d0  b908              CBNZ     r0,|L8.726|
0002d2  a078              ADR      r0,|L8.1204|
0002d4  e000              B        |L8.728|
                  |L8.726|
0002d6  a078              ADR      r0,|L8.1208|
                  |L8.728|
0002d8  4603              MOV      r3,r0
0002da  a278              ADR      r2,|L8.1212|
0002dc  210c              MOVS     r1,#0xc
0002de  200d              MOVS     r0,#0xd
0002e0  f7fffffe          BL       tft_prints
;;;242        tft_prints(13, 13, "%s Battle City]"     , (GAME_SELECT == 1) ? ("[>") : ("-"));
0002e4  4872              LDR      r0,|L8.1200|
0002e6  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
0002e8  2801              CMP      r0,#1
0002ea  d101              BNE      |L8.752|
0002ec  a071              ADR      r0,|L8.1204|
0002ee  e000              B        |L8.754|
                  |L8.752|
0002f0  a071              ADR      r0,|L8.1208|
                  |L8.754|
0002f2  4603              MOV      r3,r0
0002f4  a277              ADR      r2,|L8.1236|
0002f6  210d              MOVS     r1,#0xd
0002f8  4608              MOV      r0,r1
0002fa  f7fffffe          BL       tft_prints
;;;243        tft_prints(13, 14, "%s Mappy]"           , (GAME_SELECT == 2) ? ("[>") : ("-"));
0002fe  486c              LDR      r0,|L8.1200|
000300  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
000302  2802              CMP      r0,#2
000304  d101              BNE      |L8.778|
000306  a06b              ADR      r0,|L8.1204|
000308  e000              B        |L8.780|
                  |L8.778|
00030a  a06b              ADR      r0,|L8.1208|
                  |L8.780|
00030c  4603              MOV      r3,r0
00030e  a275              ADR      r2,|L8.1252|
000310  210e              MOVS     r1,#0xe
000312  200d              MOVS     r0,#0xd
000314  f7fffffe          BL       tft_prints
;;;244       
;;;245      #if 0 
;;;246        // tft_printc(0, 5, " {/\\} \n{<} {>}\n {\\/} ");
;;;247        tft_printc(0, 5, " {^} \n{<}  {>}\n {V} ");
;;;248        tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;249      #else
;;;250        tft_prints(0, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
000318  2008              MOVS     r0,#8
00031a  f7fffffe          BL       joypad_icon
00031e  4604              MOV      r4,r0
000320  2004              MOVS     r0,#4
000322  f7fffffe          BL       joypad_icon
000326  4605              MOV      r5,r0
000328  2020              MOVS     r0,#0x20
00032a  f7fffffe          BL       joypad_icon
00032e  4606              MOV      r6,r0
000330  2010              MOVS     r0,#0x10
000332  f7fffffe          BL       joypad_icon
000336  4607              MOV      r7,r0
000338  2002              MOVS     r0,#2
00033a  f7fffffe          BL       joypad_icon
00033e  4680              MOV      r8,r0
000340  4643              MOV      r3,r8
000342  a26b              ADR      r2,|L8.1264|
000344  2107              MOVS     r1,#7
000346  2000              MOVS     r0,#0
000348  e9cd7600          STRD     r7,r6,[sp,#0]
00034c  e9cd5402          STRD     r5,r4,[sp,#8]
000350  f7fffffe          BL       tft_prints
;;;251          joypad_icon(BTN_U1), joypad_icon(BTN_L1), joypad_icon(BTN_M1), joypad_icon(BTN_R1), joypad_icon(BTN_D1));
;;;252        tft_prints(36, 7, " {%c} \n{%c}{%c}{%c}\n {%c} ",
000354  f44f6000          MOV      r0,#0x800
000358  f7fffffe          BL       joypad_icon
00035c  4604              MOV      r4,r0
00035e  f44f5080          MOV      r0,#0x1000
000362  f7fffffe          BL       joypad_icon
000366  4605              MOV      r5,r0
000368  f44f5000          MOV      r0,#0x2000
00036c  f7fffffe          BL       joypad_icon
000370  4606              MOV      r6,r0
000372  f44f4000          MOV      r0,#0x8000
000376  f7fffffe          BL       joypad_icon
00037a  4607              MOV      r7,r0
00037c  f44f4080          MOV      r0,#0x4000
000380  f7fffffe          BL       joypad_icon
000384  4680              MOV      r8,r0
000386  4643              MOV      r3,r8
000388  a259              ADR      r2,|L8.1264|
00038a  2107              MOVS     r1,#7
00038c  2024              MOVS     r0,#0x24
00038e  e9cd7600          STRD     r7,r6,[sp,#0]
000392  e9cd5402          STRD     r5,r4,[sp,#8]
000396  f7fffffe          BL       tft_prints
;;;253          joypad_icon(BTN_U2), joypad_icon(BTN_L2), joypad_icon(BTN_M2), joypad_icon(BTN_R2), joypad_icon(BTN_D2));
;;;254        tft_prints(0, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
00039a  f44f2080          MOV      r0,#0x40000
00039e  f7fffffe          BL       joypad_icon
0003a2  4604              MOV      r4,r0
0003a4  f44f3000          MOV      r0,#0x20000
0003a8  f7fffffe          BL       joypad_icon
0003ac  4605              MOV      r5,r0
0003ae  2001              MOVS     r0,#1
0003b0  f7fffffe          BL       joypad_icon
0003b4  4606              MOV      r6,r0
0003b6  f44f3080          MOV      r0,#0x10000
0003ba  f7fffffe          BL       joypad_icon
0003be  4607              MOV      r7,r0
0003c0  f44f2000          MOV      r0,#0x80000
0003c4  f7fffffe          BL       joypad_icon
0003c8  4680              MOV      r8,r0
0003ca  4643              MOV      r3,r8
0003cc  a248              ADR      r2,|L8.1264|
0003ce  2102              MOVS     r1,#2
0003d0  2000              MOVS     r0,#0
0003d2  e9cd7600          STRD     r7,r6,[sp,#0]
0003d6  e9cd5402          STRD     r5,r4,[sp,#8]
0003da  f7fffffe          BL       tft_prints
;;;255          joypad_icon(BTN_JS1_U), joypad_icon(BTN_JS1_L), joypad_icon(BTN_JS1), joypad_icon(BTN_JS1_R), joypad_icon(BTN_JS1_D));
;;;256        tft_prints(36, 2, " {%c} \n{%c}{%c}{%c}\n {%c} ",
0003de  f44f0080          MOV      r0,#0x400000
0003e2  f7fffffe          BL       joypad_icon
0003e6  4604              MOV      r4,r0
0003e8  f44f1000          MOV      r0,#0x200000
0003ec  f7fffffe          BL       joypad_icon
0003f0  4605              MOV      r5,r0
0003f2  f44f6080          MOV      r0,#0x400
0003f6  f7fffffe          BL       joypad_icon
0003fa  4606              MOV      r6,r0
0003fc  f44f1080          MOV      r0,#0x100000
000400  f7fffffe          BL       joypad_icon
000404  4607              MOV      r7,r0
000406  f44f0000          MOV      r0,#0x800000
00040a  f7fffffe          BL       joypad_icon
00040e  4680              MOV      r8,r0
000410  4643              MOV      r3,r8
000412  a237              ADR      r2,|L8.1264|
000414  2102              MOVS     r1,#2
000416  2024              MOVS     r0,#0x24
000418  e9cd7600          STRD     r7,r6,[sp,#0]
00041c  e9cd5402          STRD     r5,r4,[sp,#8]
000420  f7fffffe          BL       tft_prints
;;;257          joypad_icon(BTN_JS2_U), joypad_icon(BTN_JS2_L), joypad_icon(BTN_JS2), joypad_icon(BTN_JS2_R), joypad_icon(BTN_JS2_D));
;;;258        
;;;259        if (btn_clicked(BTN_R1))    joypad_rotate(BTN_R1);
000424  4839              LDR      r0,|L8.1292|
000426  6800              LDR      r0,[r0,#0]  ; joypad_state
000428  f0000004          AND      r0,r0,#4
00042c  b138              CBZ      r0,|L8.1086|
00042e  4838              LDR      r0,|L8.1296|
000430  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
000432  f0000004          AND      r0,r0,#4
000436  b910              CBNZ     r0,|L8.1086|
000438  2004              MOVS     r0,#4
00043a  f7fffffe          BL       joypad_rotate
                  |L8.1086|
;;;260        if (btn_clicked(BTN_D1))    joypad_rotate(BTN_D1);
00043e  4833              LDR      r0,|L8.1292|
000440  6800              LDR      r0,[r0,#0]  ; joypad_state
000442  f0000008          AND      r0,r0,#8
000446  b138              CBZ      r0,|L8.1112|
000448  4831              LDR      r0,|L8.1296|
00044a  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
00044c  f0000008          AND      r0,r0,#8
000450  b910              CBNZ     r0,|L8.1112|
000452  2008              MOVS     r0,#8
000454  f7fffffe          BL       joypad_rotate
                  |L8.1112|
;;;261        if (btn_clicked(BTN_L1))    joypad_rotate(BTN_L1);
000458  482c              LDR      r0,|L8.1292|
00045a  6800              LDR      r0,[r0,#0]  ; joypad_state
00045c  f0000010          AND      r0,r0,#0x10
000460  b138              CBZ      r0,|L8.1138|
000462  482b              LDR      r0,|L8.1296|
000464  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
000466  f0000010          AND      r0,r0,#0x10
00046a  b910              CBNZ     r0,|L8.1138|
00046c  2010              MOVS     r0,#0x10
00046e  f7fffffe          BL       joypad_rotate
                  |L8.1138|
;;;262        if (btn_clicked(BTN_M1))    joypad_rotate(BTN_M1);
000472  4826              LDR      r0,|L8.1292|
000474  6800              LDR      r0,[r0,#0]  ; joypad_state
000476  e04d              B        |L8.1300|
                  |L8.1144|
                          DCD      0x40001000
                  |L8.1148|
                          DCD      0x40001c28
                  |L8.1152|
                          DCD      joypad_assignments
                  |L8.1156|
                          DCD      __delay
                  |L8.1160|
000488  454c4543          DCB      "ELEC3300(24) - Anshuman & Aaron",0
00048c  33333030
000490  28323429
000494  202d2041
000498  6e736875
00049c  6d616e20
0004a0  26204161
0004a4  726f6e00
                  |L8.1192|
0004a8  53454c45          DCB      "SELECT",0
0004ac  435400  
0004af  00                DCB      0
                  |L8.1200|
                          DCD      GAME_SELECT
                  |L8.1204|
0004b4  5b3e00            DCB      "[>",0
0004b7  00                DCB      0
                  |L8.1208|
0004b8  2d00              DCB      "-",0
0004ba  00                DCB      0
0004bb  00                DCB      0
                  |L8.1212|
0004bc  25732053          DCB      "%s Super Mario Bros]"
0004c0  75706572
0004c4  204d6172
0004c8  696f2042
0004cc  726f735d
                  |L8.1232|
0004d0  00                DCB      0
0004d1  00                DCB      0
0004d2  00                DCB      0
0004d3  00                DCB      0
                  |L8.1236|
0004d4  25732042          DCB      "%s Battle City]",0
0004d8  6174746c
0004dc  65204369
0004e0  74795d00
                  |L8.1252|
0004e4  2573204d          DCB      "%s Mappy]",0
0004e8  61707079
0004ec  5d00    
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L8.1264|
0004f0  207b2563          DCB      " {%c} \n{%c}{%c}{%c}\n {%c} ",0
0004f4  7d200a7b
0004f8  25637d7b
0004fc  25637d7b
000500  25637d0a
000504  207b2563
000508  7d2000  
00050b  00                DCB      0
                  |L8.1292|
                          DCD      joypad_state
                  |L8.1296|
                          DCD      last_joypad_state
                  |L8.1300|
000514  f0000020          AND      r0,r0,#0x20
000518  b138              CBZ      r0,|L8.1322|
00051a  48ee              LDR      r0,|L8.2260|
00051c  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
00051e  f0000020          AND      r0,r0,#0x20
000522  b910              CBNZ     r0,|L8.1322|
000524  2020              MOVS     r0,#0x20
000526  f7fffffe          BL       joypad_rotate
                  |L8.1322|
;;;263        if (btn_clicked(BTN_JS2))   joypad_rotate(BTN_JS2);
00052a  48eb              LDR      r0,|L8.2264|
00052c  6800              LDR      r0,[r0,#0]  ; joypad_state
00052e  f4006080          AND      r0,r0,#0x400
000532  b140              CBZ      r0,|L8.1350|
000534  48e7              LDR      r0,|L8.2260|
000536  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
000538  f4006080          AND      r0,r0,#0x400
00053c  b918              CBNZ     r0,|L8.1350|
00053e  f44f6080          MOV      r0,#0x400
000542  f7fffffe          BL       joypad_rotate
                  |L8.1350|
;;;264        if (btn_clicked(BTN_D2))    joypad_rotate(BTN_D2);
000546  48e4              LDR      r0,|L8.2264|
000548  6800              LDR      r0,[r0,#0]  ; joypad_state
00054a  f4006000          AND      r0,r0,#0x800
00054e  b140              CBZ      r0,|L8.1378|
000550  48e0              LDR      r0,|L8.2260|
000552  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
000554  f4006000          AND      r0,r0,#0x800
000558  b918              CBNZ     r0,|L8.1378|
00055a  f44f6000          MOV      r0,#0x800
00055e  f7fffffe          BL       joypad_rotate
                  |L8.1378|
;;;265        if (btn_clicked(BTN_R2))    joypad_rotate(BTN_R2);
000562  48dd              LDR      r0,|L8.2264|
000564  6800              LDR      r0,[r0,#0]  ; joypad_state
000566  f4005080          AND      r0,r0,#0x1000
00056a  b140              CBZ      r0,|L8.1406|
00056c  48d9              LDR      r0,|L8.2260|
00056e  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
000570  f4005080          AND      r0,r0,#0x1000
000574  b918              CBNZ     r0,|L8.1406|
000576  f44f5080          MOV      r0,#0x1000
00057a  f7fffffe          BL       joypad_rotate
                  |L8.1406|
;;;266        if (btn_clicked(BTN_M2))    joypad_rotate(BTN_M2);
00057e  48d6              LDR      r0,|L8.2264|
000580  6800              LDR      r0,[r0,#0]  ; joypad_state
000582  f4005000          AND      r0,r0,#0x2000
000586  b140              CBZ      r0,|L8.1434|
000588  48d2              LDR      r0,|L8.2260|
00058a  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
00058c  f4005000          AND      r0,r0,#0x2000
000590  b918              CBNZ     r0,|L8.1434|
000592  f44f5000          MOV      r0,#0x2000
000596  f7fffffe          BL       joypad_rotate
                  |L8.1434|
;;;267        if (btn_clicked(BTN_U2))    joypad_rotate(BTN_U2);
00059a  48cf              LDR      r0,|L8.2264|
00059c  6800              LDR      r0,[r0,#0]  ; joypad_state
00059e  f4004080          AND      r0,r0,#0x4000
0005a2  b140              CBZ      r0,|L8.1462|
0005a4  48cb              LDR      r0,|L8.2260|
0005a6  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
0005a8  f4004080          AND      r0,r0,#0x4000
0005ac  b918              CBNZ     r0,|L8.1462|
0005ae  f44f4080          MOV      r0,#0x4000
0005b2  f7fffffe          BL       joypad_rotate
                  |L8.1462|
;;;268        if (btn_clicked(BTN_L2))    joypad_rotate(BTN_L2);
0005b6  48c8              LDR      r0,|L8.2264|
0005b8  6800              LDR      r0,[r0,#0]  ; joypad_state
0005ba  f4004000          AND      r0,r0,#0x8000
0005be  b140              CBZ      r0,|L8.1490|
0005c0  48c4              LDR      r0,|L8.2260|
0005c2  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
0005c4  f4004000          AND      r0,r0,#0x8000
0005c8  b918              CBNZ     r0,|L8.1490|
0005ca  f44f4000          MOV      r0,#0x8000
0005ce  f7fffffe          BL       joypad_rotate
                  |L8.1490|
;;;269        if (btn_clicked(BTN_JS1))   joypad_rotate(BTN_JS1);
0005d2  48c1              LDR      r0,|L8.2264|
0005d4  6800              LDR      r0,[r0,#0]  ; joypad_state
0005d6  f0000001          AND      r0,r0,#1
0005da  b138              CBZ      r0,|L8.1516|
0005dc  48bd              LDR      r0,|L8.2260|
0005de  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
0005e0  f0000001          AND      r0,r0,#1
0005e4  b910              CBNZ     r0,|L8.1516|
0005e6  2001              MOVS     r0,#1
0005e8  f7fffffe          BL       joypad_rotate
                  |L8.1516|
;;;270        if (btn_clicked(BTN_U1))    joypad_rotate(BTN_U1);
0005ec  48ba              LDR      r0,|L8.2264|
0005ee  6800              LDR      r0,[r0,#0]  ; joypad_state
0005f0  f0000002          AND      r0,r0,#2
0005f4  b138              CBZ      r0,|L8.1542|
0005f6  48b7              LDR      r0,|L8.2260|
0005f8  7800              LDRB     r0,[r0,#0]  ; last_joypad_state
0005fa  f0000002          AND      r0,r0,#2
0005fe  b910              CBNZ     r0,|L8.1542|
000600  2002              MOVS     r0,#2
000602  f7fffffe          BL       joypad_rotate
                  |L8.1542|
;;;271        if (btn_clicked(BTN_JS1_L)) joypad_rotate(BTN_JS1_L);
000606  48b4              LDR      r0,|L8.2264|
000608  6800              LDR      r0,[r0,#0]  ; joypad_state
00060a  f4003080          AND      r0,r0,#0x10000
00060e  b140              CBZ      r0,|L8.1570|
000610  48b0              LDR      r0,|L8.2260|
000612  6800              LDR      r0,[r0,#0]  ; last_joypad_state
000614  f4003080          AND      r0,r0,#0x10000
000618  b918              CBNZ     r0,|L8.1570|
00061a  f44f3080          MOV      r0,#0x10000
00061e  f7fffffe          BL       joypad_rotate
                  |L8.1570|
;;;272        if (btn_clicked(BTN_JS1_R)) joypad_rotate(BTN_JS1_R);
000622  48ad              LDR      r0,|L8.2264|
000624  6800              LDR      r0,[r0,#0]  ; joypad_state
000626  f4003000          AND      r0,r0,#0x20000
00062a  b140              CBZ      r0,|L8.1598|
00062c  48a9              LDR      r0,|L8.2260|
00062e  6800              LDR      r0,[r0,#0]  ; last_joypad_state
000630  f4003000          AND      r0,r0,#0x20000
000634  b918              CBNZ     r0,|L8.1598|
000636  f44f3000          MOV      r0,#0x20000
00063a  f7fffffe          BL       joypad_rotate
                  |L8.1598|
;;;273        if (btn_clicked(BTN_JS1_D)) joypad_rotate(BTN_JS1_D);
00063e  48a6              LDR      r0,|L8.2264|
000640  6800              LDR      r0,[r0,#0]  ; joypad_state
000642  f4002080          AND      r0,r0,#0x40000
000646  b140              CBZ      r0,|L8.1626|
000648  48a2              LDR      r0,|L8.2260|
00064a  6800              LDR      r0,[r0,#0]  ; last_joypad_state
00064c  f4002080          AND      r0,r0,#0x40000
000650  b918              CBNZ     r0,|L8.1626|
000652  f44f2080          MOV      r0,#0x40000
000656  f7fffffe          BL       joypad_rotate
                  |L8.1626|
;;;274        if (btn_clicked(BTN_JS1_U)) joypad_rotate(BTN_JS1_U);
00065a  489f              LDR      r0,|L8.2264|
00065c  6800              LDR      r0,[r0,#0]  ; joypad_state
00065e  f4002000          AND      r0,r0,#0x80000
000662  b140              CBZ      r0,|L8.1654|
000664  489b              LDR      r0,|L8.2260|
000666  6800              LDR      r0,[r0,#0]  ; last_joypad_state
000668  f4002000          AND      r0,r0,#0x80000
00066c  b918              CBNZ     r0,|L8.1654|
00066e  f44f2000          MOV      r0,#0x80000
000672  f7fffffe          BL       joypad_rotate
                  |L8.1654|
;;;275        if (btn_clicked(BTN_JS2_L)) joypad_rotate(BTN_JS2_L);
000676  4898              LDR      r0,|L8.2264|
000678  6800              LDR      r0,[r0,#0]  ; joypad_state
00067a  f4001080          AND      r0,r0,#0x100000
00067e  b140              CBZ      r0,|L8.1682|
000680  4894              LDR      r0,|L8.2260|
000682  6800              LDR      r0,[r0,#0]  ; last_joypad_state
000684  f4001080          AND      r0,r0,#0x100000
000688  b918              CBNZ     r0,|L8.1682|
00068a  f44f1080          MOV      r0,#0x100000
00068e  f7fffffe          BL       joypad_rotate
                  |L8.1682|
;;;276        if (btn_clicked(BTN_JS2_R)) joypad_rotate(BTN_JS2_R);
000692  4891              LDR      r0,|L8.2264|
000694  6800              LDR      r0,[r0,#0]  ; joypad_state
000696  f4001000          AND      r0,r0,#0x200000
00069a  b140              CBZ      r0,|L8.1710|
00069c  488d              LDR      r0,|L8.2260|
00069e  6800              LDR      r0,[r0,#0]  ; last_joypad_state
0006a0  f4001000          AND      r0,r0,#0x200000
0006a4  b918              CBNZ     r0,|L8.1710|
0006a6  f44f1000          MOV      r0,#0x200000
0006aa  f7fffffe          BL       joypad_rotate
                  |L8.1710|
;;;277        if (btn_clicked(BTN_JS2_D)) joypad_rotate(BTN_JS2_D);
0006ae  488a              LDR      r0,|L8.2264|
0006b0  6800              LDR      r0,[r0,#0]  ; joypad_state
0006b2  f4000080          AND      r0,r0,#0x400000
0006b6  b140              CBZ      r0,|L8.1738|
0006b8  4886              LDR      r0,|L8.2260|
0006ba  6800              LDR      r0,[r0,#0]  ; last_joypad_state
0006bc  f4000080          AND      r0,r0,#0x400000
0006c0  b918              CBNZ     r0,|L8.1738|
0006c2  f44f0080          MOV      r0,#0x400000
0006c6  f7fffffe          BL       joypad_rotate
                  |L8.1738|
;;;278        if (btn_clicked(BTN_JS2_U)) joypad_rotate(BTN_JS2_U);
0006ca  4883              LDR      r0,|L8.2264|
0006cc  6800              LDR      r0,[r0,#0]  ; joypad_state
0006ce  f4000000          AND      r0,r0,#0x800000
0006d2  b140              CBZ      r0,|L8.1766|
0006d4  487f              LDR      r0,|L8.2260|
0006d6  6800              LDR      r0,[r0,#0]  ; last_joypad_state
0006d8  f4000000          AND      r0,r0,#0x800000
0006dc  b918              CBNZ     r0,|L8.1766|
0006de  f44f0000          MOV      r0,#0x800000
0006e2  f7fffffe          BL       joypad_rotate
                  |L8.1766|
;;;279        joypad_A     = joypad_assigned(ASSIGN_A);
0006e6  2004              MOVS     r0,#4
0006e8  f7fffffe          BL       joypad_assigned
0006ec  497b              LDR      r1,|L8.2268|
0006ee  6008              STR      r0,[r1,#0]  ; joypad_A
;;;280        joypad_B     = joypad_assigned(ASSIGN_B);
0006f0  2005              MOVS     r0,#5
0006f2  f7fffffe          BL       joypad_assigned
0006f6  497a              LDR      r1,|L8.2272|
0006f8  6008              STR      r0,[r1,#0]  ; joypad_B
;;;281        joypad_U     = joypad_assigned(ASSIGN_UP);
0006fa  2000              MOVS     r0,#0
0006fc  f7fffffe          BL       joypad_assigned
000700  4978              LDR      r1,|L8.2276|
000702  6008              STR      r0,[r1,#0]  ; joypad_U
;;;282        joypad_D     = joypad_assigned(ASSIGN_DOWN);
000704  2001              MOVS     r0,#1
000706  f7fffffe          BL       joypad_assigned
00070a  4977              LDR      r1,|L8.2280|
00070c  6008              STR      r0,[r1,#0]  ; joypad_D
;;;283        joypad_L     = joypad_assigned(ASSIGN_LEFT);
00070e  2002              MOVS     r0,#2
000710  f7fffffe          BL       joypad_assigned
000714  4975              LDR      r1,|L8.2284|
000716  6008              STR      r0,[r1,#0]  ; joypad_L
;;;284        joypad_R     = joypad_assigned(ASSIGN_RIGHT);
000718  2003              MOVS     r0,#3
00071a  f7fffffe          BL       joypad_assigned
00071e  4974              LDR      r1,|L8.2288|
000720  6008              STR      r0,[r1,#0]  ; joypad_R
;;;285        joypad_SEL   = joypad_assigned(ASSIGN_SEL);
000722  2007              MOVS     r0,#7
000724  f7fffffe          BL       joypad_assigned
000728  4972              LDR      r1,|L8.2292|
00072a  6008              STR      r0,[r1,#0]  ; joypad_SEL
;;;286        joypad_START = joypad_assigned(ASSIGN_START);
00072c  2006              MOVS     r0,#6
00072e  f7fffffe          BL       joypad_assigned
000732  4971              LDR      r1,|L8.2296|
000734  6008              STR      r0,[r1,#0]  ; joypad_START
;;;287    
;;;288        // tft_printc(36, 5, " {A} \n{B} {A}\n {B} ");
;;;289      #endif
;;;290        tft_prints(0,  14, "{SEL}");
000736  a271              ADR      r2,|L8.2300|
000738  210e              MOVS     r1,#0xe
00073a  2000              MOVS     r0,#0
00073c  f7fffffe          BL       tft_prints
;;;291        tft_prints(36, 14, "{STRT}");
000740  a270              ADR      r2,|L8.2308|
000742  210e              MOVS     r1,#0xe
000744  2024              MOVS     r0,#0x24
000746  f7fffffe          BL       tft_prints
;;;292        tft_printc(5, 1, " __    __  ________   ______   \n\
00074a  4a70              LDR      r2,|L8.2316|
00074c  2101              MOVS     r1,#1
00074e  2005              MOVS     r0,#5
000750  f7fffffe          BL       tft_printc
;;;293    /  \\  /  |/        | /      \\ \n\
;;;294    [$$]  \\ [$$] |[$$$$$$$$]/ /[$$$$$$]  |\n\
;;;295    [$$$]  \\[$$] |[$$] |__    [$$] \\__[$$]/ \n\
;;;296    [$$$$]  [$$] |[$$]    |   [$$]      \\ \n\
;;;297    [$$] [$$] [$$] |[$$$$$]/     [$$$$$$]  |\n\
;;;298    [$$] |[$$$$] |[$$] |_____ /  \\__[$$] |\n\
;;;299    [$$] | [$$$] |[$$]       |[$$]    [$$]/ \n\
;;;300    [$$]/   [$$]/ [$$$$$$$$]/  [$$$$$$]/  ");
;;;301    
;;;302        tft_prints(0,13, "%sIMU]",(getIMUControl())?"[":"");
000754  f7fffffe          BL       getIMUControl
000758  b108              CBZ      r0,|L8.1886|
00075a  a06d              ADR      r0,|L8.2320|
00075c  e001              B        |L8.1890|
                  |L8.1886|
00075e  f2af2090          ADR      r0,|L8.1232|
                  |L8.1890|
000762  4604              MOV      r4,r0
000764  4623              MOV      r3,r4
000766  a26b              ADR      r2,|L8.2324|
000768  210d              MOVS     r1,#0xd
00076a  2000              MOVS     r0,#0
00076c  f7fffffe          BL       tft_prints
;;;303        // IMU_dataAvailable();
;;;304        // tft_printi(6,11,(int16_t)getAccelY()*10);
;;;305        // tft_printi(0, 1, get_ticks()%1000);
;;;306        // tft_printi(5,1,(int16_t)(getQuatI()*1000));
;;;307        // tft_printi(5,2,(int16_t)(getQuatJ()*1000));
;;;308        // tft_printi(5,3,(int16_t)(getQuatK()*1000));
;;;309        // tft_printi(5,4,(int16_t)(getQuatReal()*1000));
;;;310        // tft_printi(10,1,(int16_t)(getRoll()*10));
;;;311        // tft_printi(10,2,(int16_t)(getPitch()*10));
;;;312        // tft_printi(10,3,(int16_t)(getYaw()*10));
;;;313        // tft_printi(5,2,(int16_t)(getAccelX()*1000));
;;;314    
;;;315        // tft_printi(5,1,getAccelLeftRight());
;;;316        // static uint8_t asdf = 0;
;;;317        // tft_printi(5,4,asdf+= getAccelFlick());
;;;318    
;;;319        tft_update();
000770  f7fffffe          BL       tft_update
;;;320        
;;;321        static uint32_t last_blink = 0;
;;;322        if ((get_ticks() - last_blink) > 100) {
000774  bf00              NOP      
000776  4869              LDR      r0,|L8.2332|
000778  6800              LDR      r0,[r0,#0]  ; __ticks
00077a  4969              LDR      r1,|L8.2336|
00077c  6809              LDR      r1,[r1,#0]  ; last_blink
00077e  1a40              SUBS     r0,r0,r1
000780  2864              CMP      r0,#0x64
000782  d90c              BLS      |L8.1950|
;;;323          gpio_toggle(LED2);
000784  f44f4080          MOV      r0,#0x4000
000788  4966              LDR      r1,|L8.2340|
00078a  6949              LDR      r1,[r1,#0x14]
00078c  4041              EORS     r1,r1,r0
00078e  4a65              LDR      r2,|L8.2340|
000790  6151              STR      r1,[r2,#0x14]
000792  bf00              NOP      
;;;324          last_blink = get_ticks();
000794  bf00              NOP      
000796  4861              LDR      r0,|L8.2332|
000798  6800              LDR      r0,[r0,#0]  ; __ticks
00079a  4961              LDR      r1,|L8.2336|
00079c  6008              STR      r0,[r1,#0]  ; last_blink
                  |L8.1950|
;;;325        }
;;;326    
;;;327        static uint32_t last_bright = 0;
;;;328        if ((get_ticks() - last_bright) > 50) {
00079e  bf00              NOP      
0007a0  485e              LDR      r0,|L8.2332|
0007a2  6800              LDR      r0,[r0,#0]  ; __ticks
0007a4  4960              LDR      r1,|L8.2344|
0007a6  6809              LDR      r1,[r1,#0]  ; last_bright
0007a8  1a40              SUBS     r0,r0,r1
0007aa  2832              CMP      r0,#0x32
0007ac  d917              BLS      |L8.2014|
;;;329          if (btn_pressed(BTN_X2)) TIM13->CCR1+= 3;
0007ae  484a              LDR      r0,|L8.2264|
0007b0  6800              LDR      r0,[r0,#0]  ; joypad_state
0007b2  f0000080          AND      r0,r0,#0x80
0007b6  b120              CBZ      r0,|L8.1986|
0007b8  485c              LDR      r0,|L8.2348|
0007ba  6800              LDR      r0,[r0,#0]
0007bc  1cc0              ADDS     r0,r0,#3
0007be  495b              LDR      r1,|L8.2348|
0007c0  6008              STR      r0,[r1,#0]
                  |L8.1986|
;;;330          TIM13->CCR1%= 100;
0007c2  485a              LDR      r0,|L8.2348|
0007c4  6800              LDR      r0,[r0,#0]
0007c6  2164              MOVS     r1,#0x64
0007c8  fbb0f2f1          UDIV     r2,r0,r1
0007cc  fb010012          MLS      r0,r1,r2,r0
0007d0  4956              LDR      r1,|L8.2348|
0007d2  6008              STR      r0,[r1,#0]
;;;331          last_bright = get_ticks();
0007d4  bf00              NOP      
0007d6  4851              LDR      r0,|L8.2332|
0007d8  6800              LDR      r0,[r0,#0]  ; __ticks
0007da  4953              LDR      r1,|L8.2344|
0007dc  6008              STR      r0,[r1,#0]  ; last_bright
                  |L8.2014|
;;;332        }
;;;333    
;;;334        //if (btn_clicked(BTN_X1)) 
;;;335          //toggleIMUControl();
;;;336    
;;;337        if (btn_clicked(BTN_X3)) {
0007de  483e              LDR      r0,|L8.2264|
0007e0  6800              LDR      r0,[r0,#0]  ; joypad_state
0007e2  f4007080          AND      r0,r0,#0x100
0007e6  b190              CBZ      r0,|L8.2062|
0007e8  483a              LDR      r0,|L8.2260|
0007ea  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
0007ec  f4007080          AND      r0,r0,#0x100
0007f0  b968              CBNZ     r0,|L8.2062|
;;;338          GAME_SELECT++;
0007f2  484f              LDR      r0,|L8.2352|
0007f4  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
0007f6  1c40              ADDS     r0,r0,#1
0007f8  494d              LDR      r1,|L8.2352|
0007fa  6008              STR      r0,[r1,#0]  ; GAME_SELECT
;;;339          GAME_SELECT %= 3;
0007fc  4608              MOV      r0,r1
0007fe  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
000800  2103              MOVS     r1,#3
000802  fb90f2f1          SDIV     r2,r0,r1
000806  fb010012          MLS      r0,r1,r2,r0
00080a  4949              LDR      r1,|L8.2352|
00080c  6008              STR      r0,[r1,#0]  ; GAME_SELECT
                  |L8.2062|
;;;340        }
;;;341        if (btn_clicked(BTN_X4)) {
00080e  4832              LDR      r0,|L8.2264|
000810  6800              LDR      r0,[r0,#0]  ; joypad_state
000812  f4007000          AND      r0,r0,#0x200
000816  b3e8              CBZ      r0,|L8.2196|
000818  482e              LDR      r0,|L8.2260|
00081a  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
00081c  f4007000          AND      r0,r0,#0x200
000820  bbc0              CBNZ     r0,|L8.2196|
;;;342          nes_init(rom_select(GAME_SELECT));
000822  4843              LDR      r0,|L8.2352|
000824  6800              LDR      r0,[r0,#0]  ; GAME_SELECT
000826  f7fffffe          BL       rom_select
00082a  4604              MOV      r4,r0
00082c  f7fffffe          BL       nes_init
;;;343    
;;;344          while (1) {
000830  e049              B        |L8.2246|
                  |L8.2098|
;;;345            if ((get_ticks() - last_bright) > 50) {
000832  bf00              NOP      
000834  4839              LDR      r0,|L8.2332|
000836  6800              LDR      r0,[r0,#0]  ; __ticks
000838  493b              LDR      r1,|L8.2344|
00083a  6809              LDR      r1,[r1,#0]  ; last_bright
00083c  1a40              SUBS     r0,r0,r1
00083e  2832              CMP      r0,#0x32
000840  d917              BLS      |L8.2162|
;;;346              if (btn_pressed(BTN_X2)) TIM13->CCR1+= 3;
000842  4825              LDR      r0,|L8.2264|
000844  6800              LDR      r0,[r0,#0]  ; joypad_state
000846  f0000080          AND      r0,r0,#0x80
00084a  b120              CBZ      r0,|L8.2134|
00084c  4837              LDR      r0,|L8.2348|
00084e  6800              LDR      r0,[r0,#0]
000850  1cc0              ADDS     r0,r0,#3
000852  4936              LDR      r1,|L8.2348|
000854  6008              STR      r0,[r1,#0]
                  |L8.2134|
;;;347              TIM13->CCR1 %= 100;
000856  4835              LDR      r0,|L8.2348|
000858  6800              LDR      r0,[r0,#0]
00085a  2164              MOVS     r1,#0x64
00085c  fbb0f2f1          UDIV     r2,r0,r1
000860  fb010012          MLS      r0,r1,r2,r0
000864  4931              LDR      r1,|L8.2348|
000866  6008              STR      r0,[r1,#0]
;;;348              last_bright = get_ticks();
000868  bf00              NOP      
00086a  482c              LDR      r0,|L8.2332|
00086c  6800              LDR      r0,[r0,#0]  ; __ticks
00086e  492e              LDR      r1,|L8.2344|
000870  6008              STR      r0,[r1,#0]  ; last_bright
                  |L8.2162|
;;;349            }
;;;350            if (TIM6->SR & TIM_SR_UIF) {
000872  4830              LDR      r0,|L8.2356|
000874  6900              LDR      r0,[r0,#0x10]
000876  f0000001          AND      r0,r0,#1
00087a  b1e8              CBZ      r0,|L8.2232|
;;;351              //IMU_dataAvailable();
;;;352              joypad_update();
00087c  f7fffffe          BL       joypad_update
;;;353    
;;;354              TIM6->SR = 0;
000880  2000              MOVS     r0,#0
000882  492c              LDR      r1,|L8.2356|
000884  6108              STR      r0,[r1,#0x10]
;;;355              nes_frame(0);
000886  f7fffffe          BL       nes_frame
;;;356              // gpio_toggle(LED1);
;;;357              nes_frame(1);
00088a  2001              MOVS     r0,#1
00088c  f7fffffe          BL       nes_frame
;;;358              // gpio_toggle(LED1);
;;;359              if (btn_clicked(BTN_X3)) cpu_reset();
000890  4811              LDR      r0,|L8.2264|
000892  e000              B        |L8.2198|
                  |L8.2196|
000894  e018              B        |L8.2248|
                  |L8.2198|
000896  6800              LDR      r0,[r0,#0]  ; joypad_state
000898  f4007080          AND      r0,r0,#0x100
00089c  b130              CBZ      r0,|L8.2220|
00089e  480d              LDR      r0,|L8.2260|
0008a0  8800              LDRH     r0,[r0,#0]  ; last_joypad_state
0008a2  f4007080          AND      r0,r0,#0x100
0008a6  b908              CBNZ     r0,|L8.2220|
0008a8  f7fffffe          BL       cpu_reset
                  |L8.2220|
;;;360              gpio_set(LED2);
0008ac  f44f4080          MOV      r0,#0x4000
0008b0  491c              LDR      r1,|L8.2340|
0008b2  6188              STR      r0,[r1,#0x18]
0008b4  bf00              NOP      
0008b6  e006              B        |L8.2246|
                  |L8.2232|
;;;361            } else {
;;;362              gpio_reset(LED2);
0008b8  f44f4080          MOV      r0,#0x4000
0008bc  0401              LSLS     r1,r0,#16
0008be  4a19              LDR      r2,|L8.2340|
0008c0  6191              STR      r1,[r2,#0x18]
0008c2  bf00              NOP      
0008c4  bf00              NOP      
                  |L8.2246|
0008c6  e7b4              B        |L8.2098|
                  |L8.2248|
;;;363            }
;;;364          }
;;;365        }
;;;366        last_joypad_state = joypad_state;
0008c8  4803              LDR      r0,|L8.2264|
0008ca  6800              LDR      r0,[r0,#0]  ; joypad_state
0008cc  4901              LDR      r1,|L8.2260|
0008ce  6008              STR      r0,[r1,#0]  ; last_joypad_state
                  |L8.2256|
0008d0  e4ee              B        |L8.688|
;;;367        /* USER CODE END WHILE */
;;;368    
;;;369        /* USER CODE BEGIN 3 */
;;;370      }
;;;371      /* USER CODE END 3 */
;;;372    }
;;;373    
                          ENDP

0008d2  0000              DCW      0x0000
                  |L8.2260|
                          DCD      last_joypad_state
                  |L8.2264|
                          DCD      joypad_state
                  |L8.2268|
                          DCD      joypad_A
                  |L8.2272|
                          DCD      joypad_B
                  |L8.2276|
                          DCD      joypad_U
                  |L8.2280|
                          DCD      joypad_D
                  |L8.2284|
                          DCD      joypad_L
                  |L8.2288|
                          DCD      joypad_R
                  |L8.2292|
                          DCD      joypad_SEL
                  |L8.2296|
                          DCD      joypad_START
                  |L8.2300|
0008fc  7b53454c          DCB      "{SEL}",0
000900  7d00    
000902  00                DCB      0
000903  00                DCB      0
                  |L8.2308|
000904  7b535452          DCB      "{STRT}",0
000908  547d00  
00090b  00                DCB      0
                  |L8.2316|
                          DCD      ||.conststring||
                  |L8.2320|
000910  5b00              DCB      "[",0
000912  00                DCB      0
000913  00                DCB      0
                  |L8.2324|
000914  2573494d          DCB      "%sIMU]",0
000918  555d00  
00091b  00                DCB      0
                  |L8.2332|
                          DCD      __ticks
                  |L8.2336|
                          DCD      last_blink
                  |L8.2340|
                          DCD      0x40020c00
                  |L8.2344|
                          DCD      last_bright
                  |L8.2348|
                          DCD      0x40001c34
                  |L8.2352|
                          DCD      GAME_SELECT
                  |L8.2356|
                          DCD      0x40001000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  joypad_assignments
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8
                  aRCC_PLLSAIDIVRPrescTable
000008  02040810          DCB      0x02,0x04,0x08,0x10
                  OFFSET_TAB_CCMRx
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  040404            DCB      0x04,0x04,0x04
                  SHIFT_TAB_OCxx
000013  00                DCB      0x00
000014  00080000          DCB      0x00,0x08,0x00,0x00
000018  0008              DCB      0x00,0x08
                  SHIFT_TAB_ICxx
00001a  0000              DCB      0x00,0x00
00001c  08000000          DCB      0x08,0x00,0x00,0x00
000020  08                DCB      0x08
                  SHIFT_TAB_CCxP
000021  000204            DCB      0x00,0x02,0x04
000024  06080a0c          DCB      0x06,0x08,0x0a,0x0c
                  SHIFT_TAB_OISx
000028  00010203          DCB      0x00,0x01,0x02,0x03
00002c  040506            DCB      0x04,0x05,0x06

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  205f5f20          DCB      " __    __  ________   ______   \n/  \\  /  |/        | "
000004  2020205f
000008  5f20205f
00000c  5f5f5f5f
000010  5f5f5f20
000014  20205f5f
000018  5f5f5f5f
00001c  2020200a
000020  2f20205c
000024  20202f20
000028  207c2f20
00002c  20202020
000030  2020207c
000034  20      
000035  2f202020          DCB      "/      \\ \n[$$$$]  \\ [$$$$] |[$$$$$$$$$$$$$$$$]/ /[$$"
000039  2020205c
00003d  200a5b24
000041  245d2020
000045  5c205b24
000049  245d207c
00004d  5b242424
000051  24242424
000055  245d2f20
000059  2f5b24  
00005c  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$$$]  \\[$$$$] |[$$$$] |__    [$$$$"
000060  245d2020
000064  7c0a5b24
000068  24245d20
00006c  205c5b24
000070  245d207c
000074  5b24245d
000078  207c5f5f
00007c  20202020
000080  5b2424  
000083  5d205c5f          DCB      "] \\__[$$$$]/ \n[$$$$$$$$]  [$$$$] |[$$$$]    |   [$$$$"
000087  5f5b2424
00008b  5d2f200a
00008f  5b242424
000093  245d2020
000097  5b24245d
00009b  207c5b24
00009f  245d2020
0000a3  20207c20
0000a7  20205b24
0000ab  24      
0000ac  5d202020          DCB      "]      \\ \n[$$$$] [$$$$] [$$$$] |[$$$$$$$$$$]/     [$$"
0000b0  2020205c
0000b4  200a5b24
0000b8  245d205b
0000bc  24245d20
0000c0  5b24245d
0000c4  207c5b24
0000c8  24242424
0000cc  5d2f2020
0000d0  2020205b
0000d4  24      
0000d5  24242424          DCB      "$$$$$$$$$$]  |\n[$$$$] |[$$$$$$$$] |[$$$$] |_____ /  \\"
0000d9  245d2020
0000dd  7c0a5b24
0000e1  245d207c
0000e5  5b242424
0000e9  245d207c
0000ed  5b24245d
0000f1  207c5f5f
0000f5  5f5f5f20
0000f9  2f20205c
0000fd  5f5f5b24          DCB      "__[$$$$] |\n[$$$$] | [$$$$$$] |[$$$$]       |[$$$$]    "
000101  245d207c
000105  0a5b2424
000109  5d207c20
00010d  5b242424
000111  5d207c5b
000115  24245d20
000119  20202020
00011d  20207c5b
000121  24245d20
000125  202020  
000128  5b24245d          DCB      "[$$$$]/ \n[$$$$]/   [$$$$]/ [$$$$$$$$$$$$$$$$]/  [$$$$$$"
00012c  2f200a5b
000130  24245d2f
000134  2020205b
000138  24245d2f
00013c  205b2424
000140  24242424
000144  24245d2f
000148  20205b24
00014c  2424    
00014e  2424245d          DCB      "$$$$$$]/  ",0
000152  2f202000

                          AREA ||.data||, DATA, ALIGN=2

                  assignable_buttons
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                          DCD      0x00008000
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00010000
                          DCD      0x00020000
                          DCD      0x00040000
                          DCD      0x00080000
                          DCD      0x00100000
                          DCD      0x00200000
                          DCD      0x00400000
                          DCD      0x00800000
                  __ticks
                          DCD      0x00000000
                  __delay
                          DCD      0x00000000
                  __tickf
000058  01000000          DCB      0x01,0x00,0x00,0x00
                  GAME_SELECT
                          DCD      0x00000000
                  last_joypad_state
                          DCD      0x00000000
                  last_blink
                          DCD      0x00000000
                  last_bright
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_e9093bf9____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____REVSH|
#line 402
|__asm___6_main_c_e9093bf9____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_e9093bf9____RRX|
#line 587
|__asm___6_main_c_e9093bf9____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
