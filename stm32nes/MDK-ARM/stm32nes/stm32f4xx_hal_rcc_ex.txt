; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal_rcc_ex.o --depend=stm32nes\stm32f4xx_hal_rcc_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal_rcc_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_DisablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLI2S PROC
;;;2891     */
;;;2892   HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
000000  b510              PUSH     {r4,lr}
;;;2893   {
;;;2894     uint32_t tickstart;
;;;2895   
;;;2896     /* Disable the PLLI2S */
;;;2897     __HAL_RCC_PLLI2S_DISABLE();
000002  2000              MOVS     r0,#0
000004  490a              LDR      r1,|L1.48|
000006  6688              STR      r0,[r1,#0x68]
;;;2898   
;;;2899     /* Wait till PLLI2S is disabled */
;;;2900     tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4604              MOV      r4,r0
;;;2901     while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
00000e  e006              B        |L1.30|
                  |L1.16|
;;;2902     {
;;;2903       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
000010  f7fffffe          BL       HAL_GetTick
000014  1b00              SUBS     r0,r0,r4
000016  2802              CMP      r0,#2
000018  d901              BLS      |L1.30|
;;;2904       {
;;;2905         /* return in case of Timeout detected */
;;;2906         return HAL_TIMEOUT;
00001a  2003              MOVS     r0,#3
                  |L1.28|
;;;2907       }
;;;2908     }
;;;2909   
;;;2910     return HAL_OK;
;;;2911   }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  4805              LDR      r0,|L1.52|
000020  6800              LDR      r0,[r0,#0]            ;2901
000022  f0006000          AND      r0,r0,#0x8000000      ;2901
000026  2800              CMP      r0,#0                 ;2901
000028  d1f2              BNE      |L1.16|
00002a  bf00              NOP                            ;2910
00002c  e7f6              B        |L1.28|
;;;2912   
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x42470000
                  |L1.52|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_DisablePLLSAI||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLSAI PROC
;;;2995     */
;;;2996   HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
000000  b510              PUSH     {r4,lr}
;;;2997   {
;;;2998     uint32_t tickstart;
;;;2999   
;;;3000     /* Disable the PLLSAI */
;;;3001     __HAL_RCC_PLLSAI_DISABLE();
000002  2000              MOVS     r0,#0
000004  490a              LDR      r1,|L2.48|
000006  6708              STR      r0,[r1,#0x70]
;;;3002   
;;;3003     /* Wait till PLLSAI is disabled */
;;;3004     tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4604              MOV      r4,r0
;;;3005     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
00000e  e006              B        |L2.30|
                  |L2.16|
;;;3006     {
;;;3007       if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
000010  f7fffffe          BL       HAL_GetTick
000014  1b00              SUBS     r0,r0,r4
000016  2802              CMP      r0,#2
000018  d901              BLS      |L2.30|
;;;3008       {
;;;3009         /* return in case of Timeout detected */
;;;3010         return HAL_TIMEOUT;
00001a  2003              MOVS     r0,#3
                  |L2.28|
;;;3011       }
;;;3012     }
;;;3013   
;;;3014     return HAL_OK;
;;;3015   }
00001c  bd10              POP      {r4,pc}
                  |L2.30|
00001e  4805              LDR      r0,|L2.52|
000020  6800              LDR      r0,[r0,#0]            ;3005
000022  f3c07040          UBFX     r0,r0,#29,#1          ;3005
000026  2800              CMP      r0,#0                 ;3005
000028  d1f2              BNE      |L2.16|
00002a  bf00              NOP                            ;3014
00002c  e7f6              B        |L2.28|
;;;3016   
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x42470000
                  |L2.52|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLI2S PROC
;;;2808     */
;;;2809   HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
000000  b570              PUSH     {r4-r6,lr}
;;;2810   {
000002  4604              MOV      r4,r0
;;;2811     uint32_t tickstart;
;;;2812   
;;;2813     /* Check for parameters */
;;;2814     assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
;;;2815     assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
;;;2816   #if defined(RCC_PLLI2SCFGR_PLLI2SM)
;;;2817     assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SInit->PLLI2SM));
;;;2818   #endif /* RCC_PLLI2SCFGR_PLLI2SM */
;;;2819   #if defined(RCC_PLLI2SCFGR_PLLI2SP)
;;;2820     assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
;;;2821   #endif /* RCC_PLLI2SCFGR_PLLI2SP */
;;;2822   #if defined(RCC_PLLI2SCFGR_PLLI2SQ)
;;;2823     assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
;;;2824   #endif /* RCC_PLLI2SCFGR_PLLI2SQ */
;;;2825   
;;;2826     /* Disable the PLLI2S */
;;;2827     __HAL_RCC_PLLI2S_DISABLE();
000004  2000              MOVS     r0,#0
000006  491a              LDR      r1,|L3.112|
000008  6688              STR      r0,[r1,#0x68]
;;;2828   
;;;2829     /* Wait till PLLI2S is disabled */
;;;2830     tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4605              MOV      r5,r0
;;;2831     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
000010  e006              B        |L3.32|
                  |L3.18|
;;;2832     {
;;;2833       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  2802              CMP      r0,#2
00001a  d901              BLS      |L3.32|
;;;2834       {
;;;2835         /* return in case of Timeout detected */
;;;2836         return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
                  |L3.30|
;;;2837       }
;;;2838     }
;;;2839   
;;;2840     /* Configure the PLLI2S division factors */
;;;2841   #if defined(STM32F446xx)
;;;2842     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2843     /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
;;;2844     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2845     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2846     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2847                             PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2848   #elif defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) ||\
;;;2849         defined(STM32F413xx) || defined(STM32F423xx)
;;;2850     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
;;;2851     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2852     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2853     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2854                             PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2855   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||\
;;;2856         defined(STM32F469xx) || defined(STM32F479xx)
;;;2857     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;2858     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2859     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2860     __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2861   #elif defined(STM32F411xE)
;;;2862     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2863     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2864     __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2865   #else
;;;2866     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
;;;2867     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2868     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2869   #endif /* STM32F446xx */
;;;2870   
;;;2871     /* Enable the PLLI2S */
;;;2872     __HAL_RCC_PLLI2S_ENABLE();
;;;2873   
;;;2874     /* Wait till PLLI2S is ready */
;;;2875     tickstart = HAL_GetTick();
;;;2876     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
;;;2877     {
;;;2878       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;2879       {
;;;2880         /* return in case of Timeout detected */
;;;2881         return HAL_TIMEOUT;
;;;2882       }
;;;2883     }
;;;2884   
;;;2885    return HAL_OK;
;;;2886   }
00001e  bd70              POP      {r4-r6,pc}
                  |L3.32|
000020  4814              LDR      r0,|L3.116|
000022  6800              LDR      r0,[r0,#0]            ;2831
000024  f3c060c0          UBFX     r0,r0,#27,#1          ;2831
000028  2800              CMP      r0,#0                 ;2831
00002a  d1f2              BNE      |L3.18|
00002c  6820              LDR      r0,[r4,#0]            ;2860
00002e  0180              LSLS     r0,r0,#6              ;2860
000030  7a21              LDRB     r1,[r4,#8]            ;2860
000032  ea406001          ORR      r0,r0,r1,LSL #24      ;2860
000036  7921              LDRB     r1,[r4,#4]            ;2860
000038  ea407001          ORR      r0,r0,r1,LSL #28      ;2860
00003c  490d              LDR      r1,|L3.116|
00003e  3184              ADDS     r1,r1,#0x84           ;2860
000040  6008              STR      r0,[r1,#0]            ;2860
000042  2001              MOVS     r0,#1                 ;2872
000044  490a              LDR      r1,|L3.112|
000046  6688              STR      r0,[r1,#0x68]         ;2872
000048  f7fffffe          BL       HAL_GetTick
00004c  4605              MOV      r5,r0                 ;2875
00004e  e006              B        |L3.94|
                  |L3.80|
000050  f7fffffe          BL       HAL_GetTick
000054  1b40              SUBS     r0,r0,r5              ;2878
000056  2802              CMP      r0,#2                 ;2878
000058  d901              BLS      |L3.94|
00005a  2003              MOVS     r0,#3                 ;2881
00005c  e7df              B        |L3.30|
                  |L3.94|
00005e  4805              LDR      r0,|L3.116|
000060  6800              LDR      r0,[r0,#0]            ;2876
000062  f3c060c0          UBFX     r0,r0,#27,#1          ;2876
000066  2800              CMP      r0,#0                 ;2876
000068  d0f2              BEQ      |L3.80|
00006a  2000              MOVS     r0,#0                 ;2885
00006c  e7d7              B        |L3.30|
;;;2887   
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x42470000
                  |L3.116|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLSAI||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLSAI PROC
;;;2921     */
;;;2922   HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
000000  b570              PUSH     {r4-r6,lr}
;;;2923   {
000002  4604              MOV      r4,r0
;;;2924     uint32_t tickstart;
;;;2925   
;;;2926     /* Check for parameters */
;;;2927     assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIInit->PLLSAIN));
;;;2928     assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIInit->PLLSAIQ));
;;;2929   #if defined(RCC_PLLSAICFGR_PLLSAIM)
;;;2930     assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIInit->PLLSAIM));
;;;2931   #endif /* RCC_PLLSAICFGR_PLLSAIM */
;;;2932   #if defined(RCC_PLLSAICFGR_PLLSAIP)
;;;2933     assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIInit->PLLSAIP));
;;;2934   #endif /* RCC_PLLSAICFGR_PLLSAIP */
;;;2935   #if defined(RCC_PLLSAICFGR_PLLSAIR)
;;;2936     assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
;;;2937   #endif /* RCC_PLLSAICFGR_PLLSAIR */
;;;2938   
;;;2939     /* Disable the PLLSAI */
;;;2940     __HAL_RCC_PLLSAI_DISABLE();
000004  2000              MOVS     r0,#0
000006  491a              LDR      r1,|L4.112|
000008  6708              STR      r0,[r1,#0x70]
;;;2941   
;;;2942     /* Wait till PLLSAI is disabled */
;;;2943     tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4605              MOV      r5,r0
;;;2944     while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
000010  e006              B        |L4.32|
                  |L4.18|
;;;2945     {
;;;2946       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  2802              CMP      r0,#2
00001a  d901              BLS      |L4.32|
;;;2947       {
;;;2948         /* return in case of Timeout detected */
;;;2949         return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
                  |L4.30|
;;;2950       }
;;;2951     }
;;;2952   
;;;2953     /* Configure the PLLSAI division factors */
;;;2954   #if defined(STM32F446xx)
;;;2955     /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */
;;;2956     /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
;;;2957     /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
;;;2958     /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
;;;2959     __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIM, PLLSAIInit->PLLSAIN, \
;;;2960                             PLLSAIInit->PLLSAIP, PLLSAIInit->PLLSAIQ, 0U);
;;;2961   #elif defined(STM32F469xx) || defined(STM32F479xx)
;;;2962     /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
;;;2963     /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
;;;2964     /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
;;;2965     /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
;;;2966     __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
;;;2967                             PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
;;;2968   #else
;;;2969     /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x PLLSAIN */
;;;2970     /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
;;;2971     /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
;;;2972     __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
;;;2973   #endif /* STM32F446xx */
;;;2974   
;;;2975     /* Enable the PLLSAI */
;;;2976     __HAL_RCC_PLLSAI_ENABLE();
;;;2977   
;;;2978     /* Wait till PLLSAI is ready */
;;;2979     tickstart = HAL_GetTick();
;;;2980     while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
;;;2981     {
;;;2982       if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
;;;2983       {
;;;2984         /* return in case of Timeout detected */
;;;2985         return HAL_TIMEOUT;
;;;2986       }
;;;2987     }
;;;2988   
;;;2989    return HAL_OK;
;;;2990   }
00001e  bd70              POP      {r4-r6,pc}
                  |L4.32|
000020  4814              LDR      r0,|L4.116|
000022  6800              LDR      r0,[r0,#0]            ;2944
000024  f3c07040          UBFX     r0,r0,#29,#1          ;2944
000028  2800              CMP      r0,#0                 ;2944
00002a  d1f2              BNE      |L4.18|
00002c  6820              LDR      r0,[r4,#0]            ;2972
00002e  0180              LSLS     r0,r0,#6              ;2972
000030  7921              LDRB     r1,[r4,#4]            ;2972
000032  ea406001          ORR      r0,r0,r1,LSL #24      ;2972
000036  7a21              LDRB     r1,[r4,#8]            ;2972
000038  ea407001          ORR      r0,r0,r1,LSL #28      ;2972
00003c  490d              LDR      r1,|L4.116|
00003e  3188              ADDS     r1,r1,#0x88           ;2972
000040  6008              STR      r0,[r1,#0]            ;2972
000042  2001              MOVS     r0,#1                 ;2976
000044  490a              LDR      r1,|L4.112|
000046  6708              STR      r0,[r1,#0x70]         ;2976
000048  f7fffffe          BL       HAL_GetTick
00004c  4605              MOV      r5,r0                 ;2979
00004e  e006              B        |L4.94|
                  |L4.80|
000050  f7fffffe          BL       HAL_GetTick
000054  1b40              SUBS     r0,r0,r5              ;2982
000056  2802              CMP      r0,#2                 ;2982
000058  d901              BLS      |L4.94|
00005a  2003              MOVS     r0,#3                 ;2985
00005c  e7df              B        |L4.30|
                  |L4.94|
00005e  4805              LDR      r0,|L4.116|
000060  6800              LDR      r0,[r0,#0]            ;2980
000062  f3c07040          UBFX     r0,r0,#29,#1          ;2980
000066  2800              CMP      r0,#0                 ;2980
000068  d0f2              BEQ      |L4.80|
00006a  2000              MOVS     r0,#0                 ;2989
00006c  e7d7              B        |L4.30|
;;;2991   
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
                          DCD      0x42470000
                  |L4.116|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;2403     */
;;;2404   void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  223f              MOVS     r2,#0x3f
;;;2405   {
;;;2406     uint32_t tempreg;
;;;2407   
;;;2408     /* Set all possible values for the extended clock type parameter------------*/
;;;2409     PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_SAI_PLLSAI | RCC_PERIPHCLK_SAI_PLLI2S | RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_RTC;
000002  6002              STR      r2,[r0,#0]
;;;2410   
;;;2411     /* Get the PLLI2S Clock configuration -----------------------------------------------*/
;;;2412     PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
000004  4a26              LDR      r2,|L5.160|
000006  6812              LDR      r2,[r2,#0]
000008  f3c21288          UBFX     r2,r2,#6,#9
00000c  6042              STR      r2,[r0,#4]
;;;2413     PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
00000e  4a24              LDR      r2,|L5.160|
000010  6812              LDR      r2,[r2,#0]
000012  f3c27302          UBFX     r3,r2,#28,#3
000016  6083              STR      r3,[r0,#8]
;;;2414     PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
000018  4a21              LDR      r2,|L5.160|
00001a  6812              LDR      r2,[r2,#0]
00001c  f3c26303          UBFX     r3,r2,#24,#4
000020  60c3              STR      r3,[r0,#0xc]
;;;2415     /* Get the PLLSAI Clock configuration -----------------------------------------------*/
;;;2416     PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
000022  4a1f              LDR      r2,|L5.160|
000024  1d12              ADDS     r2,r2,#4
000026  6812              LDR      r2,[r2,#0]
000028  f3c21288          UBFX     r2,r2,#6,#9
00002c  6102              STR      r2,[r0,#0x10]
;;;2417     PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
00002e  4a1c              LDR      r2,|L5.160|
000030  1d12              ADDS     r2,r2,#4
000032  6812              LDR      r2,[r2,#0]
000034  f3c27302          UBFX     r3,r2,#28,#3
000038  6183              STR      r3,[r0,#0x18]
;;;2418     PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
00003a  4a19              LDR      r2,|L5.160|
00003c  1d12              ADDS     r2,r2,#4
00003e  6812              LDR      r2,[r2,#0]
000040  f3c26303          UBFX     r3,r2,#24,#4
000044  6143              STR      r3,[r0,#0x14]
;;;2419     /* Get the PLLSAI/PLLI2S division factors -----------------------------------------------*/
;;;2420     PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
000046  4a16              LDR      r2,|L5.160|
000048  3208              ADDS     r2,r2,#8
00004a  6812              LDR      r2,[r2,#0]
00004c  f002021f          AND      r2,r2,#0x1f
000050  61c2              STR      r2,[r0,#0x1c]
;;;2421     PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
000052  4a13              LDR      r2,|L5.160|
000054  3208              ADDS     r2,r2,#8
000056  6812              LDR      r2,[r2,#0]
000058  f3c22204          UBFX     r2,r2,#8,#5
00005c  6202              STR      r2,[r0,#0x20]
;;;2422     PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
00005e  4a10              LDR      r2,|L5.160|
000060  3208              ADDS     r2,r2,#8
000062  6812              LDR      r2,[r2,#0]
000064  f4023240          AND      r2,r2,#0x30000
000068  6242              STR      r2,[r0,#0x24]
;;;2423     /* Get the RTC Clock configuration -----------------------------------------------*/
;;;2424     tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
00006a  4a0d              LDR      r2,|L5.160|
00006c  3a7c              SUBS     r2,r2,#0x7c
00006e  6812              LDR      r2,[r2,#0]
000070  f40211f8          AND      r1,r2,#0x1f0000
;;;2425     PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
000074  4a0a              LDR      r2,|L5.160|
000076  3a14              SUBS     r2,r2,#0x14
000078  6812              LDR      r2,[r2,#0]
00007a  f4027240          AND      r2,r2,#0x300
00007e  430a              ORRS     r2,r2,r1
000080  6282              STR      r2,[r0,#0x28]
;;;2426   
;;;2427     if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
000082  4a07              LDR      r2,|L5.160|
000084  3208              ADDS     r2,r2,#8
000086  6812              LDR      r2,[r2,#0]
000088  f0027280          AND      r2,r2,#0x1000000
00008c  b91a              CBNZ     r2,|L5.150|
;;;2428     {
;;;2429       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
00008e  2200              MOVS     r2,#0
000090  f880202c          STRB     r2,[r0,#0x2c]
000094  e002              B        |L5.156|
                  |L5.150|
;;;2430     }
;;;2431     else
;;;2432     {
;;;2433       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
000096  2201              MOVS     r2,#1
000098  f880202c          STRB     r2,[r0,#0x2c]
                  |L5.156|
;;;2434     }
;;;2435   }
00009c  4770              BX       lr
;;;2436   
                          ENDP

00009e  0000              DCW      0x0000
                  |L5.160|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;2444     */
;;;2445   uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b570              PUSH     {r4-r6,lr}
;;;2446   {
000002  4601              MOV      r1,r0
;;;2447     /* This variable used to store the I2S clock frequency (value in Hz) */
;;;2448     uint32_t frequency = 0U;
000004  2000              MOVS     r0,#0
;;;2449     /* This variable used to store the VCO Input (value in Hz) */
;;;2450     uint32_t vcoinput = 0U;
000006  2200              MOVS     r2,#0
;;;2451     uint32_t srcclk = 0U;
000008  2300              MOVS     r3,#0
;;;2452     /* This variable used to store the VCO Output (value in Hz) */
;;;2453     uint32_t vcooutput = 0U;
00000a  2400              MOVS     r4,#0
;;;2454     switch (PeriphClk)
00000c  2901              CMP      r1,#1
00000e  d134              BNE      |L6.122|
;;;2455     {
;;;2456     case RCC_PERIPHCLK_I2S:
;;;2457       {
;;;2458         /* Get the current I2S source */
;;;2459         srcclk = __HAL_RCC_GET_I2S_SOURCE();
000010  4d1b              LDR      r5,|L6.128|
000012  682d              LDR      r5,[r5,#0]
000014  f4050300          AND      r3,r5,#0x800000
;;;2460         switch (srcclk)
000018  b11b              CBZ      r3,|L6.34|
00001a  2b01              CMP      r3,#1
00001c  d129              BNE      |L6.114|
;;;2461         {
;;;2462         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
;;;2463         case RCC_I2SCLKSOURCE_EXT:
;;;2464           {
;;;2465             /* Set the I2S clock to the external clock  value */
;;;2466             frequency = EXTERNAL_CLOCK_VALUE;
00001e  4819              LDR      r0,|L6.132|
;;;2467             break;
000020  e029              B        |L6.118|
                  |L6.34|
;;;2468           }
;;;2469         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
;;;2470         case RCC_I2SCLKSOURCE_PLLI2S:
;;;2471           {
;;;2472             /* Configure the PLLI2S division factor */
;;;2473             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;2474             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
000022  4d17              LDR      r5,|L6.128|
000024  1f2d              SUBS     r5,r5,#4
000026  682d              LDR      r5,[r5,#0]
000028  f4050580          AND      r5,r5,#0x400000
00002c  f5b50f80          CMP      r5,#0x400000
000030  d108              BNE      |L6.68|
;;;2475             {
;;;2476               /* Get the I2S source clock value */
;;;2477               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000032  4d13              LDR      r5,|L6.128|
000034  1f2d              SUBS     r5,r5,#4
000036  682d              LDR      r5,[r5,#0]
000038  f005053f          AND      r5,r5,#0x3f
00003c  4e12              LDR      r6,|L6.136|
00003e  fbb6f2f5          UDIV     r2,r6,r5
000042  e007              B        |L6.84|
                  |L6.68|
;;;2478             }
;;;2479             else
;;;2480             {
;;;2481               /* Get the I2S source clock value */
;;;2482               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000044  4d0e              LDR      r5,|L6.128|
000046  1f2d              SUBS     r5,r5,#4
000048  682d              LDR      r5,[r5,#0]
00004a  f005053f          AND      r5,r5,#0x3f
00004e  4e0f              LDR      r6,|L6.140|
000050  fbb6f2f5          UDIV     r2,r6,r5
                  |L6.84|
;;;2483             }
;;;2484   
;;;2485             /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;2486             vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
000054  4d0a              LDR      r5,|L6.128|
000056  357c              ADDS     r5,r5,#0x7c
000058  682d              LDR      r5,[r5,#0]
00005a  f3c51588          UBFX     r5,r5,#6,#9
00005e  fb05f402          MUL      r4,r5,r2
;;;2487             /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
;;;2488             frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
000062  4d07              LDR      r5,|L6.128|
000064  357c              ADDS     r5,r5,#0x7c
000066  682d              LDR      r5,[r5,#0]
000068  f3c57502          UBFX     r5,r5,#28,#3
00006c  fbb4f0f5          UDIV     r0,r4,r5
;;;2489             break;
000070  e001              B        |L6.118|
                  |L6.114|
;;;2490           }
;;;2491           /* Clock not enabled for I2S */
;;;2492         default:
;;;2493           {
;;;2494             frequency = 0U;
000072  2000              MOVS     r0,#0
;;;2495             break;
000074  bf00              NOP      
                  |L6.118|
000076  bf00              NOP                            ;2467
;;;2496           }
;;;2497         }
;;;2498         break;
000078  bf00              NOP      
                  |L6.122|
00007a  bf00              NOP      
;;;2499       }
;;;2500     }
;;;2501     return frequency;
;;;2502   }
00007c  bd70              POP      {r4-r6,pc}
;;;2503   #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */
                          ENDP

00007e  0000              DCW      0x0000
                  |L6.128|
                          DCD      0x40023808
                  |L6.132|
                          DCD      0x00bb8000
                  |L6.136|
                          DCD      0x007a1200
                  |L6.140|
                          DCD      0x00f42400

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;2180     */
;;;2181   HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2182   {
000002  4604              MOV      r4,r0
;;;2183     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;2184     uint32_t tmpreg1 = 0U;
000006  2600              MOVS     r6,#0
;;;2185   
;;;2186     /* Check the parameters */
;;;2187     assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;2188   
;;;2189     /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
;;;2190     /*----------------------- Common configuration SAI/I2S ---------------------*/
;;;2191     /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
;;;2192        factor is common parameters for both peripherals */
;;;2193     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
000008  7820              LDRB     r0,[r4,#0]
00000a  f0000001          AND      r0,r0,#1
00000e  b920              CBNZ     r0,|L7.26|
;;;2194        (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
000010  7820              LDRB     r0,[r4,#0]
000012  f0000002          AND      r0,r0,#2
000016  2802              CMP      r0,#2
000018  d152              BNE      |L7.192|
                  |L7.26|
;;;2195     {
;;;2196       /* check for Parameters */
;;;2197       assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;2198   
;;;2199       /* Disable the PLLI2S */
;;;2200       __HAL_RCC_PLLI2S_DISABLE();
00001a  2000              MOVS     r0,#0
00001c  49a8              LDR      r1,|L7.704|
00001e  6688              STR      r0,[r1,#0x68]
;;;2201       /* Get tick */
;;;2202       tickstart = HAL_GetTick();
000020  f7fffffe          BL       HAL_GetTick
000024  4605              MOV      r5,r0
;;;2203       /* Wait till PLLI2S is disabled */
;;;2204       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
000026  e006              B        |L7.54|
                  |L7.40|
;;;2205       {
;;;2206         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000028  f7fffffe          BL       HAL_GetTick
00002c  1b40              SUBS     r0,r0,r5
00002e  2802              CMP      r0,#2
000030  d901              BLS      |L7.54|
;;;2207         {
;;;2208           /* return in case of Timeout detected */
;;;2209           return HAL_TIMEOUT;
000032  2003              MOVS     r0,#3
                  |L7.52|
;;;2210         }
;;;2211       }
;;;2212   
;;;2213       /*---------------------------- I2S configuration -------------------------*/
;;;2214       /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
;;;2215         only for I2S configuration */
;;;2216       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
;;;2217       {
;;;2218         /* check for Parameters */
;;;2219         assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;2220         /* Configure the PLLI2S division factors */
;;;2221         /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
;;;2222         /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;2223         __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
;;;2224       }
;;;2225   
;;;2226       /*---------------------------- SAI configuration -------------------------*/
;;;2227       /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
;;;2228          be added only for SAI configuration */
;;;2229       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
;;;2230       {
;;;2231         /* Check the PLLI2S division factors */
;;;2232         assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
;;;2233         assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
;;;2234   
;;;2235         /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
;;;2236         tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
;;;2237         /* Configure the PLLI2S division factors */
;;;2238         /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;2239         /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;2240         /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
;;;2241         __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
;;;2242         /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
;;;2243         __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
;;;2244       }
;;;2245   
;;;2246       /* Enable the PLLI2S */
;;;2247       __HAL_RCC_PLLI2S_ENABLE();
;;;2248       /* Get tick */
;;;2249       tickstart = HAL_GetTick();
;;;2250       /* Wait till PLLI2S is ready */
;;;2251       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;2252       {
;;;2253         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;2254         {
;;;2255           /* return in case of Timeout detected */
;;;2256           return HAL_TIMEOUT;
;;;2257         }
;;;2258       }
;;;2259     }
;;;2260     /*--------------------------------------------------------------------------*/
;;;2261   
;;;2262     /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
;;;2263     /*----------------------- Common configuration SAI/LTDC --------------------*/
;;;2264     /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
;;;2265        factor is common parameters for both peripherals */
;;;2266     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
;;;2267        (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
;;;2268     {
;;;2269       /* Check the PLLSAI division factors */
;;;2270       assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
;;;2271   
;;;2272       /* Disable PLLSAI Clock */
;;;2273       __HAL_RCC_PLLSAI_DISABLE();
;;;2274       /* Get tick */
;;;2275       tickstart = HAL_GetTick();
;;;2276       /* Wait till PLLSAI is disabled */
;;;2277       while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
;;;2278       {
;;;2279         if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
;;;2280         {
;;;2281           /* return in case of Timeout detected */
;;;2282           return HAL_TIMEOUT;
;;;2283         }
;;;2284       }
;;;2285   
;;;2286       /*---------------------------- SAI configuration -------------------------*/
;;;2287       /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
;;;2288          be added only for SAI configuration */
;;;2289       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
;;;2290       {
;;;2291         assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
;;;2292         assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
;;;2293   
;;;2294         /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
;;;2295         tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
;;;2296         /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;2297         /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;2298         /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
;;;2299         __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
;;;2300         /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
;;;2301         __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
;;;2302       }
;;;2303   
;;;2304       /*---------------------------- LTDC configuration ------------------------*/
;;;2305       if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
;;;2306       {
;;;2307         assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
;;;2308         assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
;;;2309   
;;;2310         /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
;;;2311         tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
;;;2312         /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
;;;2313         /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
;;;2314         /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
;;;2315         __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
;;;2316         /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
;;;2317         __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
;;;2318       }
;;;2319       /* Enable PLLSAI Clock */
;;;2320       __HAL_RCC_PLLSAI_ENABLE();
;;;2321       /* Get tick */
;;;2322       tickstart = HAL_GetTick();
;;;2323       /* Wait till PLLSAI is ready */
;;;2324       while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
;;;2325       {
;;;2326         if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
;;;2327         {
;;;2328           /* return in case of Timeout detected */
;;;2329           return HAL_TIMEOUT;
;;;2330         }
;;;2331       }
;;;2332     }
;;;2333     /*--------------------------------------------------------------------------*/
;;;2334   
;;;2335     /*---------------------------- RTC configuration ---------------------------*/
;;;2336     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
;;;2337     {
;;;2338       /* Check for RTC Parameters used to output RTCCLK */
;;;2339       assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;2340   
;;;2341       /* Enable Power Clock*/
;;;2342       __HAL_RCC_PWR_CLK_ENABLE();
;;;2343   
;;;2344       /* Enable write access to Backup domain */
;;;2345       PWR->CR |= PWR_CR_DBP;
;;;2346   
;;;2347       /* Get tick */
;;;2348       tickstart = HAL_GetTick();
;;;2349   
;;;2350       while((PWR->CR & PWR_CR_DBP) == RESET)
;;;2351       {
;;;2352         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;2353         {
;;;2354           return HAL_TIMEOUT;
;;;2355         }
;;;2356       }
;;;2357       /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
;;;2358       tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
;;;2359       if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
;;;2360       {
;;;2361         /* Store the content of BDCR register before the reset of Backup Domain */
;;;2362         tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;2363         /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;2364         __HAL_RCC_BACKUPRESET_FORCE();
;;;2365         __HAL_RCC_BACKUPRESET_RELEASE();
;;;2366         /* Restore the Content of BDCR register */
;;;2367         RCC->BDCR = tmpreg1;
;;;2368   
;;;2369         /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
;;;2370         if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
;;;2371         {
;;;2372           /* Get tick */
;;;2373           tickstart = HAL_GetTick();
;;;2374   
;;;2375           /* Wait till LSE is ready */
;;;2376           while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;2377           {
;;;2378             if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;2379             {
;;;2380               return HAL_TIMEOUT;
;;;2381             }
;;;2382           }
;;;2383         }
;;;2384       }
;;;2385       __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;2386     }
;;;2387     /*--------------------------------------------------------------------------*/
;;;2388   
;;;2389     /*---------------------------- TIM configuration ---------------------------*/
;;;2390     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
;;;2391     {
;;;2392       __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
;;;2393     }
;;;2394     return HAL_OK;
;;;2395   }
000034  bdf8              POP      {r3-r7,pc}
                  |L7.54|
000036  48a3              LDR      r0,|L7.708|
000038  6800              LDR      r0,[r0,#0]            ;2204
00003a  f3c060c0          UBFX     r0,r0,#27,#1          ;2204
00003e  2800              CMP      r0,#0                 ;2204
000040  d1f2              BNE      |L7.40|
000042  7820              LDRB     r0,[r4,#0]            ;2216
000044  f0000001          AND      r0,r0,#1              ;2216
000048  b138              CBZ      r0,|L7.90|
00004a  6860              LDR      r0,[r4,#4]            ;2223
00004c  0181              LSLS     r1,r0,#6              ;2223
00004e  7a20              LDRB     r0,[r4,#8]            ;2223
000050  ea417000          ORR      r0,r1,r0,LSL #28      ;2223
000054  499b              LDR      r1,|L7.708|
000056  3184              ADDS     r1,r1,#0x84           ;2223
000058  6008              STR      r0,[r1,#0]            ;2223
                  |L7.90|
00005a  7820              LDRB     r0,[r4,#0]            ;2229
00005c  f0000002          AND      r0,r0,#2              ;2229
000060  2802              CMP      r0,#2                 ;2229
000062  d119              BNE      |L7.152|
000064  4897              LDR      r0,|L7.708|
000066  3084              ADDS     r0,r0,#0x84           ;2236
000068  6800              LDR      r0,[r0,#0]            ;2236
00006a  f3c07602          UBFX     r6,r0,#28,#3          ;2236
00006e  6860              LDR      r0,[r4,#4]            ;2241
000070  0181              LSLS     r1,r0,#6              ;2241
000072  7b20              LDRB     r0,[r4,#0xc]          ;2241
000074  ea416000          ORR      r0,r1,r0,LSL #24      ;2241
000078  ea407006          ORR      r0,r0,r6,LSL #28      ;2241
00007c  4991              LDR      r1,|L7.708|
00007e  3184              ADDS     r1,r1,#0x84           ;2241
000080  6008              STR      r0,[r1,#0]            ;2241
000082  4890              LDR      r0,|L7.708|
000084  308c              ADDS     r0,r0,#0x8c           ;2243
000086  6800              LDR      r0,[r0,#0]            ;2243
000088  f020001f          BIC      r0,r0,#0x1f           ;2243
00008c  69e1              LDR      r1,[r4,#0x1c]         ;2243
00008e  1e49              SUBS     r1,r1,#1              ;2243
000090  4308              ORRS     r0,r0,r1              ;2243
000092  498c              LDR      r1,|L7.708|
000094  318c              ADDS     r1,r1,#0x8c           ;2243
000096  6008              STR      r0,[r1,#0]            ;2243
                  |L7.152|
000098  2001              MOVS     r0,#1                 ;2247
00009a  4989              LDR      r1,|L7.704|
00009c  6688              STR      r0,[r1,#0x68]         ;2247
00009e  f7fffffe          BL       HAL_GetTick
0000a2  4605              MOV      r5,r0                 ;2249
0000a4  e006              B        |L7.180|
                  |L7.166|
0000a6  f7fffffe          BL       HAL_GetTick
0000aa  1b40              SUBS     r0,r0,r5              ;2253
0000ac  2802              CMP      r0,#2                 ;2253
0000ae  d901              BLS      |L7.180|
0000b0  2003              MOVS     r0,#3                 ;2256
0000b2  e7bf              B        |L7.52|
                  |L7.180|
0000b4  4883              LDR      r0,|L7.708|
0000b6  6800              LDR      r0,[r0,#0]            ;2251
0000b8  f3c060c0          UBFX     r0,r0,#27,#1          ;2251
0000bc  2800              CMP      r0,#0                 ;2251
0000be  d0f2              BEQ      |L7.166|
                  |L7.192|
0000c0  7820              LDRB     r0,[r4,#0]            ;2266
0000c2  f0000004          AND      r0,r0,#4              ;2266
0000c6  2804              CMP      r0,#4                 ;2266
0000c8  d004              BEQ      |L7.212|
0000ca  7820              LDRB     r0,[r4,#0]            ;2267
0000cc  f0000008          AND      r0,r0,#8              ;2267
0000d0  2808              CMP      r0,#8                 ;2267
0000d2  d163              BNE      |L7.412|
                  |L7.212|
0000d4  2000              MOVS     r0,#0                 ;2273
0000d6  497a              LDR      r1,|L7.704|
0000d8  6708              STR      r0,[r1,#0x70]         ;2273
0000da  f7fffffe          BL       HAL_GetTick
0000de  4605              MOV      r5,r0                 ;2275
0000e0  e006              B        |L7.240|
                  |L7.226|
0000e2  f7fffffe          BL       HAL_GetTick
0000e6  1b40              SUBS     r0,r0,r5              ;2279
0000e8  2802              CMP      r0,#2                 ;2279
0000ea  d901              BLS      |L7.240|
0000ec  2003              MOVS     r0,#3                 ;2282
0000ee  e7a1              B        |L7.52|
                  |L7.240|
0000f0  4874              LDR      r0,|L7.708|
0000f2  6800              LDR      r0,[r0,#0]            ;2277
0000f4  f3c07040          UBFX     r0,r0,#29,#1          ;2277
0000f8  2800              CMP      r0,#0                 ;2277
0000fa  d1f2              BNE      |L7.226|
0000fc  7820              LDRB     r0,[r4,#0]            ;2289
0000fe  f0000004          AND      r0,r0,#4              ;2289
000102  2804              CMP      r0,#4                 ;2289
000104  d119              BNE      |L7.314|
000106  486f              LDR      r0,|L7.708|
000108  3088              ADDS     r0,r0,#0x88           ;2295
00010a  6800              LDR      r0,[r0,#0]            ;2295
00010c  f3c07602          UBFX     r6,r0,#28,#3          ;2295
000110  6920              LDR      r0,[r4,#0x10]         ;2299
000112  0181              LSLS     r1,r0,#6              ;2299
000114  7d20              LDRB     r0,[r4,#0x14]         ;2299
000116  ea416000          ORR      r0,r1,r0,LSL #24      ;2299
00011a  ea407006          ORR      r0,r0,r6,LSL #28      ;2299
00011e  4969              LDR      r1,|L7.708|
000120  3188              ADDS     r1,r1,#0x88           ;2299
000122  6008              STR      r0,[r1,#0]            ;2299
000124  1d08              ADDS     r0,r1,#4              ;2301
000126  6800              LDR      r0,[r0,#0]            ;2301
000128  f42051f8          BIC      r1,r0,#0x1f00         ;2301
00012c  6a20              LDR      r0,[r4,#0x20]         ;2301
00012e  1e40              SUBS     r0,r0,#1              ;2301
000130  ea412000          ORR      r0,r1,r0,LSL #8       ;2301
000134  4963              LDR      r1,|L7.708|
000136  318c              ADDS     r1,r1,#0x8c           ;2301
000138  6008              STR      r0,[r1,#0]            ;2301
                  |L7.314|
00013a  7820              LDRB     r0,[r4,#0]            ;2305
00013c  f0000008          AND      r0,r0,#8              ;2305
000140  2808              CMP      r0,#8                 ;2305
000142  d117              BNE      |L7.372|
000144  485f              LDR      r0,|L7.708|
000146  3088              ADDS     r0,r0,#0x88           ;2311
000148  6800              LDR      r0,[r0,#0]            ;2311
00014a  f3c06603          UBFX     r6,r0,#24,#4          ;2311
00014e  6920              LDR      r0,[r4,#0x10]         ;2315
000150  0180              LSLS     r0,r0,#6              ;2315
000152  ea406106          ORR      r1,r0,r6,LSL #24      ;2315
000156  7e20              LDRB     r0,[r4,#0x18]         ;2315
000158  ea417000          ORR      r0,r1,r0,LSL #28      ;2315
00015c  4959              LDR      r1,|L7.708|
00015e  3188              ADDS     r1,r1,#0x88           ;2315
000160  6008              STR      r0,[r1,#0]            ;2315
000162  1d08              ADDS     r0,r1,#4              ;2317
000164  6800              LDR      r0,[r0,#0]            ;2317
000166  f4203040          BIC      r0,r0,#0x30000        ;2317
00016a  6a61              LDR      r1,[r4,#0x24]         ;2317
00016c  4308              ORRS     r0,r0,r1              ;2317
00016e  4955              LDR      r1,|L7.708|
000170  318c              ADDS     r1,r1,#0x8c           ;2317
000172  6008              STR      r0,[r1,#0]            ;2317
                  |L7.372|
000174  2001              MOVS     r0,#1                 ;2320
000176  4952              LDR      r1,|L7.704|
000178  6708              STR      r0,[r1,#0x70]         ;2320
00017a  f7fffffe          BL       HAL_GetTick
00017e  4605              MOV      r5,r0                 ;2322
000180  e006              B        |L7.400|
                  |L7.386|
000182  f7fffffe          BL       HAL_GetTick
000186  1b40              SUBS     r0,r0,r5              ;2326
000188  2802              CMP      r0,#2                 ;2326
00018a  d901              BLS      |L7.400|
00018c  2003              MOVS     r0,#3                 ;2329
00018e  e751              B        |L7.52|
                  |L7.400|
000190  484c              LDR      r0,|L7.708|
000192  6800              LDR      r0,[r0,#0]            ;2324
000194  f3c07040          UBFX     r0,r0,#29,#1          ;2324
000198  2800              CMP      r0,#0                 ;2324
00019a  d0f2              BEQ      |L7.386|
                  |L7.412|
00019c  7820              LDRB     r0,[r4,#0]            ;2336
00019e  f0000020          AND      r0,r0,#0x20           ;2336
0001a2  2820              CMP      r0,#0x20              ;2336
0001a4  d17e              BNE      |L7.676|
0001a6  bf00              NOP                            ;2342
0001a8  2000              MOVS     r0,#0                 ;2342
0001aa  9000              STR      r0,[sp,#0]            ;2342
0001ac  4845              LDR      r0,|L7.708|
0001ae  3040              ADDS     r0,r0,#0x40           ;2342
0001b0  6800              LDR      r0,[r0,#0]            ;2342
0001b2  f0405080          ORR      r0,r0,#0x10000000     ;2342
0001b6  4943              LDR      r1,|L7.708|
0001b8  3140              ADDS     r1,r1,#0x40           ;2342
0001ba  6008              STR      r0,[r1,#0]            ;2342
0001bc  4608              MOV      r0,r1                 ;2342
0001be  6800              LDR      r0,[r0,#0]            ;2342
0001c0  f0005080          AND      r0,r0,#0x10000000     ;2342
0001c4  9000              STR      r0,[sp,#0]            ;2342
0001c6  bf00              NOP                            ;2342
0001c8  bf00              NOP                            ;2342
0001ca  483f              LDR      r0,|L7.712|
0001cc  6800              LDR      r0,[r0,#0]            ;2345
0001ce  f4407080          ORR      r0,r0,#0x100          ;2345
0001d2  493d              LDR      r1,|L7.712|
0001d4  6008              STR      r0,[r1,#0]            ;2345
0001d6  f7fffffe          BL       HAL_GetTick
0001da  4605              MOV      r5,r0                 ;2348
0001dc  e006              B        |L7.492|
                  |L7.478|
0001de  f7fffffe          BL       HAL_GetTick
0001e2  1b40              SUBS     r0,r0,r5              ;2352
0001e4  2802              CMP      r0,#2                 ;2352
0001e6  d901              BLS      |L7.492|
0001e8  2003              MOVS     r0,#3                 ;2354
0001ea  e723              B        |L7.52|
                  |L7.492|
0001ec  4836              LDR      r0,|L7.712|
0001ee  6800              LDR      r0,[r0,#0]            ;2350
0001f0  f4007080          AND      r0,r0,#0x100          ;2350
0001f4  2800              CMP      r0,#0                 ;2350
0001f6  d0f2              BEQ      |L7.478|
0001f8  4832              LDR      r0,|L7.708|
0001fa  3070              ADDS     r0,r0,#0x70           ;2358
0001fc  6800              LDR      r0,[r0,#0]            ;2358
0001fe  f4007640          AND      r6,r0,#0x300          ;2358
000202  b34e              CBZ      r6,|L7.600|
000204  8d20              LDRH     r0,[r4,#0x28]         ;2359
000206  f4007040          AND      r0,r0,#0x300          ;2359
00020a  42b0              CMP      r0,r6                 ;2359
00020c  d024              BEQ      |L7.600|
00020e  482d              LDR      r0,|L7.708|
000210  3070              ADDS     r0,r0,#0x70           ;2362
000212  6800              LDR      r0,[r0,#0]            ;2362
000214  f4207640          BIC      r6,r0,#0x300          ;2362
000218  2001              MOVS     r0,#1                 ;2364
00021a  492c              LDR      r1,|L7.716|
00021c  6008              STR      r0,[r1,#0]            ;2364
00021e  2000              MOVS     r0,#0                 ;2365
000220  6008              STR      r0,[r1,#0]            ;2365
000222  4828              LDR      r0,|L7.708|
000224  3070              ADDS     r0,r0,#0x70           ;2367
000226  6006              STR      r6,[r0,#0]            ;2367
000228  6800              LDR      r0,[r0,#0]            ;2370
00022a  f0000001          AND      r0,r0,#1              ;2370
00022e  b198              CBZ      r0,|L7.600|
000230  f7fffffe          BL       HAL_GetTick
000234  4605              MOV      r5,r0                 ;2373
000236  e008              B        |L7.586|
                  |L7.568|
000238  f7fffffe          BL       HAL_GetTick
00023c  1b40              SUBS     r0,r0,r5              ;2378
00023e  f2413188          MOV      r1,#0x1388            ;2378
000242  4288              CMP      r0,r1                 ;2378
000244  d901              BLS      |L7.586|
000246  2003              MOVS     r0,#3                 ;2380
000248  e6f4              B        |L7.52|
                  |L7.586|
00024a  481e              LDR      r0,|L7.708|
00024c  3070              ADDS     r0,r0,#0x70           ;2376
00024e  6800              LDR      r0,[r0,#0]            ;2376
000250  f3c00040          UBFX     r0,r0,#1,#1           ;2376
000254  2800              CMP      r0,#0                 ;2376
000256  d0ef              BEQ      |L7.568|
                  |L7.600|
000258  bf00              NOP                            ;2385
00025a  8d20              LDRH     r0,[r4,#0x28]         ;2385
00025c  f4007040          AND      r0,r0,#0x300          ;2385
000260  f5b07f40          CMP      r0,#0x300             ;2385
000264  d10c              BNE      |L7.640|
000266  4817              LDR      r0,|L7.708|
000268  3008              ADDS     r0,r0,#8              ;2385
00026a  6800              LDR      r0,[r0,#0]            ;2385
00026c  f42010f8          BIC      r0,r0,#0x1f0000       ;2385
000270  4a17              LDR      r2,|L7.720|
000272  6aa1              LDR      r1,[r4,#0x28]         ;2385
000274  4011              ANDS     r1,r1,r2              ;2385
000276  4308              ORRS     r0,r0,r1              ;2385
000278  4912              LDR      r1,|L7.708|
00027a  3108              ADDS     r1,r1,#8              ;2385
00027c  6008              STR      r0,[r1,#0]            ;2385
00027e  e007              B        |L7.656|
                  |L7.640|
000280  4810              LDR      r0,|L7.708|
000282  3008              ADDS     r0,r0,#8              ;2385
000284  6800              LDR      r0,[r0,#0]            ;2385
000286  f42010f8          BIC      r0,r0,#0x1f0000       ;2385
00028a  490e              LDR      r1,|L7.708|
00028c  3108              ADDS     r1,r1,#8              ;2385
00028e  6008              STR      r0,[r1,#0]            ;2385
                  |L7.656|
000290  480c              LDR      r0,|L7.708|
000292  3070              ADDS     r0,r0,#0x70           ;2385
000294  6800              LDR      r0,[r0,#0]            ;2385
000296  8d21              LDRH     r1,[r4,#0x28]         ;2385
000298  f3c1010b          UBFX     r1,r1,#0,#12          ;2385
00029c  4308              ORRS     r0,r0,r1              ;2385
00029e  4909              LDR      r1,|L7.708|
0002a0  3170              ADDS     r1,r1,#0x70           ;2385
0002a2  e000              B        |L7.678|
                  |L7.676|
0002a4  e001              B        |L7.682|
                  |L7.678|
0002a6  6008              STR      r0,[r1,#0]            ;2385
0002a8  bf00              NOP                            ;2385
                  |L7.682|
0002aa  7820              LDRB     r0,[r4,#0]            ;2390
0002ac  f0000010          AND      r0,r0,#0x10           ;2390
0002b0  2810              CMP      r0,#0x10              ;2390
0002b2  d103              BNE      |L7.700|
0002b4  f894002c          LDRB     r0,[r4,#0x2c]         ;2392
0002b8  4906              LDR      r1,|L7.724|
0002ba  6008              STR      r0,[r1,#0]            ;2392
                  |L7.700|
0002bc  2000              MOVS     r0,#0                 ;2394
0002be  e6b9              B        |L7.52|
;;;2396   
                          ENDP

                  |L7.704|
                          DCD      0x42470000
                  |L7.708|
                          DCD      0x40023800
                  |L7.712|
                          DCD      0x40007000
                  |L7.716|
                          DCD      0x42470e40
                  |L7.720|
                          DCD      0x0ffffcff
                  |L7.724|
                          DCD      0x424711e0

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;3148     */
;;;3149   HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;3150   {
;;;3151     uint32_t tickstart;
;;;3152   
;;;3153     /* Get Start Tick */
;;;3154     tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;3155   
;;;3156     /* Set HSION bit to the reset value */
;;;3157     SET_BIT(RCC->CR, RCC_CR_HSION);
000008  4868              LDR      r0,|L8.428|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  4966              LDR      r1,|L8.428|
000012  6008              STR      r0,[r1,#0]
;;;3158   
;;;3159     /* Wait till HSI is ready */
;;;3160     while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L8.36|
                  |L8.22|
;;;3161     {
;;;3162       if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L8.36|
;;;3163       {
;;;3164         return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L8.34|
;;;3165       }
;;;3166     }
;;;3167   
;;;3168     /* Set HSITRIM[4:0] bits to the reset value */
;;;3169     SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
;;;3170   
;;;3171     /* Get Start Tick */
;;;3172     tickstart = HAL_GetTick();
;;;3173   
;;;3174     /* Reset CFGR register */
;;;3175     CLEAR_REG(RCC->CFGR);
;;;3176   
;;;3177     /* Wait till clock switch is ready */
;;;3178     while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;3179     {
;;;3180       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;3181       {
;;;3182         return HAL_TIMEOUT;
;;;3183       }
;;;3184     }
;;;3185   
;;;3186     /* Get Start Tick */
;;;3187     tickstart = HAL_GetTick();
;;;3188   
;;;3189     /* Clear HSEON, HSEBYP and CSSON bits */
;;;3190     CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
;;;3191   
;;;3192     /* Wait till HSE is disabled */
;;;3193     while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;3194     {
;;;3195       if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;3196       {
;;;3197         return HAL_TIMEOUT;
;;;3198       }
;;;3199     }
;;;3200   
;;;3201     /* Get Start Tick */
;;;3202     tickstart = HAL_GetTick();
;;;3203   
;;;3204     /* Clear PLLON bit */
;;;3205     CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;3206   
;;;3207     /* Wait till PLL is disabled */
;;;3208     while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;3209     {
;;;3210       if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;3211       {
;;;3212         return HAL_TIMEOUT;
;;;3213       }
;;;3214     }
;;;3215   
;;;3216   #if defined(RCC_PLLI2S_SUPPORT)
;;;3217     /* Get Start Tick */
;;;3218     tickstart = HAL_GetTick();
;;;3219   
;;;3220     /* Reset PLLI2SON bit */
;;;3221     CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
;;;3222   
;;;3223     /* Wait till PLLI2S is disabled */
;;;3224     while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
;;;3225     {
;;;3226       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;3227       {
;;;3228         return HAL_TIMEOUT;
;;;3229       }
;;;3230     }
;;;3231   #endif /* RCC_PLLI2S_SUPPORT */
;;;3232   
;;;3233   #if defined(RCC_PLLSAI_SUPPORT)
;;;3234     /* Get Start Tick */
;;;3235     tickstart = HAL_GetTick();
;;;3236   
;;;3237     /* Reset PLLSAI bit */
;;;3238     CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
;;;3239   
;;;3240     /* Wait till PLLSAI is disabled */
;;;3241     while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
;;;3242     {
;;;3243       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;3244       {
;;;3245         return HAL_TIMEOUT;
;;;3246       }
;;;3247     }
;;;3248   #endif /* RCC_PLLSAI_SUPPORT */
;;;3249   
;;;3250     /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
;;;3251   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3252       defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3253     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
;;;3254   #elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
;;;3255     RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
;;;3256   #else
;;;3257     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
;;;3258   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */
;;;3259   
;;;3260     /* Reset PLLI2SCFGR register to default value */
;;;3261   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3262       defined(STM32F423xx) || defined(STM32F446xx)
;;;3263     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3264   #elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
;;;3265     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3266   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3267     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3268   #elif defined(STM32F411xE)
;;;3269     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3270   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */
;;;3271   
;;;3272     /* Reset PLLSAICFGR register */
;;;3273   #if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3274     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
;;;3275   #elif defined(STM32F446xx)
;;;3276     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
;;;3277   #endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */
;;;3278   
;;;3279     /* Disable all interrupts */
;;;3280     CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
;;;3281   
;;;3282   #if defined(RCC_CIR_PLLI2SRDYIE)
;;;3283     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
;;;3284   #endif /* RCC_CIR_PLLI2SRDYIE */
;;;3285   
;;;3286   #if defined(RCC_CIR_PLLSAIRDYIE)
;;;3287     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
;;;3288   #endif /* RCC_CIR_PLLSAIRDYIE */
;;;3289   
;;;3290     /* Clear all interrupt flags */
;;;3291     SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
;;;3292   
;;;3293   #if defined(RCC_CIR_PLLI2SRDYC)
;;;3294     SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
;;;3295   #endif /* RCC_CIR_PLLI2SRDYC */
;;;3296   
;;;3297   #if defined(RCC_CIR_PLLSAIRDYC)
;;;3298     SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
;;;3299   #endif /* RCC_CIR_PLLSAIRDYC */
;;;3300   
;;;3301     /* Clear LSION bit */
;;;3302     CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
;;;3303   
;;;3304     /* Reset all CSR flags */
;;;3305     SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;3306   
;;;3307     /* Update the SystemCoreClock global variable */
;;;3308     SystemCoreClock = HSI_VALUE;
;;;3309   
;;;3310     /* Adapt Systick interrupt period */
;;;3311     if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
;;;3312     {
;;;3313       return HAL_ERROR;
;;;3314     }
;;;3315     else
;;;3316     {
;;;3317       return HAL_OK;
;;;3318     }
;;;3319   }
000022  bd10              POP      {r4,pc}
                  |L8.36|
000024  4861              LDR      r0,|L8.428|
000026  6800              LDR      r0,[r0,#0]            ;3160
000028  f0000002          AND      r0,r0,#2              ;3160
00002c  2800              CMP      r0,#0                 ;3160
00002e  d0f2              BEQ      |L8.22|
000030  485e              LDR      r0,|L8.428|
000032  6800              LDR      r0,[r0,#0]            ;3169
000034  f0400080          ORR      r0,r0,#0x80           ;3169
000038  495c              LDR      r1,|L8.428|
00003a  6008              STR      r0,[r1,#0]            ;3169
00003c  f7fffffe          BL       HAL_GetTick
000040  4604              MOV      r4,r0                 ;3172
000042  2000              MOVS     r0,#0                 ;3175
000044  4959              LDR      r1,|L8.428|
000046  3108              ADDS     r1,r1,#8              ;3175
000048  6008              STR      r0,[r1,#0]            ;3175
00004a  e008              B        |L8.94|
                  |L8.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  1b00              SUBS     r0,r0,r4              ;3180
000052  f2413188          MOV      r1,#0x1388            ;3180
000056  4288              CMP      r0,r1                 ;3180
000058  d901              BLS      |L8.94|
00005a  2003              MOVS     r0,#3                 ;3182
00005c  e7e1              B        |L8.34|
                  |L8.94|
00005e  4853              LDR      r0,|L8.428|
000060  3008              ADDS     r0,r0,#8              ;3178
000062  6800              LDR      r0,[r0,#0]            ;3178
000064  f000000c          AND      r0,r0,#0xc            ;3178
000068  2800              CMP      r0,#0                 ;3178
00006a  d1ef              BNE      |L8.76|
00006c  f7fffffe          BL       HAL_GetTick
000070  4604              MOV      r4,r0                 ;3187
000072  484e              LDR      r0,|L8.428|
000074  6800              LDR      r0,[r0,#0]            ;3190
000076  f4202050          BIC      r0,r0,#0xd0000        ;3190
00007a  494c              LDR      r1,|L8.428|
00007c  6008              STR      r0,[r1,#0]            ;3190
00007e  e006              B        |L8.142|
                  |L8.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1b00              SUBS     r0,r0,r4              ;3195
000086  2864              CMP      r0,#0x64              ;3195
000088  d901              BLS      |L8.142|
00008a  2003              MOVS     r0,#3                 ;3197
00008c  e7c9              B        |L8.34|
                  |L8.142|
00008e  4847              LDR      r0,|L8.428|
000090  6800              LDR      r0,[r0,#0]            ;3193
000092  f4003000          AND      r0,r0,#0x20000        ;3193
000096  2800              CMP      r0,#0                 ;3193
000098  d1f2              BNE      |L8.128|
00009a  f7fffffe          BL       HAL_GetTick
00009e  4604              MOV      r4,r0                 ;3202
0000a0  4842              LDR      r0,|L8.428|
0000a2  6800              LDR      r0,[r0,#0]            ;3205
0000a4  f0207080          BIC      r0,r0,#0x1000000      ;3205
0000a8  4940              LDR      r1,|L8.428|
0000aa  6008              STR      r0,[r1,#0]            ;3205
0000ac  e006              B        |L8.188|
                  |L8.174|
0000ae  f7fffffe          BL       HAL_GetTick
0000b2  1b00              SUBS     r0,r0,r4              ;3210
0000b4  2802              CMP      r0,#2                 ;3210
0000b6  d901              BLS      |L8.188|
0000b8  2003              MOVS     r0,#3                 ;3212
0000ba  e7b2              B        |L8.34|
                  |L8.188|
0000bc  483b              LDR      r0,|L8.428|
0000be  6800              LDR      r0,[r0,#0]            ;3208
0000c0  f0007000          AND      r0,r0,#0x2000000      ;3208
0000c4  2800              CMP      r0,#0                 ;3208
0000c6  d1f2              BNE      |L8.174|
0000c8  f7fffffe          BL       HAL_GetTick
0000cc  4604              MOV      r4,r0                 ;3218
0000ce  4837              LDR      r0,|L8.428|
0000d0  6800              LDR      r0,[r0,#0]            ;3221
0000d2  f0206080          BIC      r0,r0,#0x4000000      ;3221
0000d6  4935              LDR      r1,|L8.428|
0000d8  6008              STR      r0,[r1,#0]            ;3221
0000da  e006              B        |L8.234|
                  |L8.220|
0000dc  f7fffffe          BL       HAL_GetTick
0000e0  1b00              SUBS     r0,r0,r4              ;3226
0000e2  2802              CMP      r0,#2                 ;3226
0000e4  d901              BLS      |L8.234|
0000e6  2003              MOVS     r0,#3                 ;3228
0000e8  e79b              B        |L8.34|
                  |L8.234|
0000ea  4830              LDR      r0,|L8.428|
0000ec  6800              LDR      r0,[r0,#0]            ;3224
0000ee  f0006000          AND      r0,r0,#0x8000000      ;3224
0000f2  2800              CMP      r0,#0                 ;3224
0000f4  d1f2              BNE      |L8.220|
0000f6  f7fffffe          BL       HAL_GetTick
0000fa  4604              MOV      r4,r0                 ;3235
0000fc  482b              LDR      r0,|L8.428|
0000fe  6800              LDR      r0,[r0,#0]            ;3238
000100  f0205080          BIC      r0,r0,#0x10000000     ;3238
000104  4929              LDR      r1,|L8.428|
000106  6008              STR      r0,[r1,#0]            ;3238
000108  e006              B        |L8.280|
                  |L8.266|
00010a  f7fffffe          BL       HAL_GetTick
00010e  1b00              SUBS     r0,r0,r4              ;3243
000110  2802              CMP      r0,#2                 ;3243
000112  d901              BLS      |L8.280|
000114  2003              MOVS     r0,#3                 ;3245
000116  e784              B        |L8.34|
                  |L8.280|
000118  4824              LDR      r0,|L8.428|
00011a  6800              LDR      r0,[r0,#0]            ;3241
00011c  f0005000          AND      r0,r0,#0x20000000     ;3241
000120  2800              CMP      r0,#0                 ;3241
000122  d1f2              BNE      |L8.266|
000124  4822              LDR      r0,|L8.432|
000126  4921              LDR      r1,|L8.428|
000128  1d09              ADDS     r1,r1,#4              ;3257
00012a  6008              STR      r0,[r1,#0]            ;3257
00012c  4821              LDR      r0,|L8.436|
00012e  491f              LDR      r1,|L8.428|
000130  3184              ADDS     r1,r1,#0x84           ;3267
000132  6008              STR      r0,[r1,#0]            ;3267
000134  1d09              ADDS     r1,r1,#4              ;3274
000136  6008              STR      r0,[r1,#0]            ;3274
000138  481c              LDR      r0,|L8.428|
00013a  300c              ADDS     r0,r0,#0xc            ;3280
00013c  6800              LDR      r0,[r0,#0]            ;3280
00013e  f42050f8          BIC      r0,r0,#0x1f00         ;3280
000142  491a              LDR      r1,|L8.428|
000144  310c              ADDS     r1,r1,#0xc            ;3280
000146  6008              STR      r0,[r1,#0]            ;3280
000148  4608              MOV      r0,r1                 ;3283
00014a  6800              LDR      r0,[r0,#0]            ;3283
00014c  f4205000          BIC      r0,r0,#0x2000         ;3283
000150  6008              STR      r0,[r1,#0]            ;3283
000152  4608              MOV      r0,r1                 ;3287
000154  6800              LDR      r0,[r0,#0]            ;3287
000156  f4204080          BIC      r0,r0,#0x4000         ;3287
00015a  6008              STR      r0,[r1,#0]            ;3287
00015c  4608              MOV      r0,r1                 ;3291
00015e  6800              LDR      r0,[r0,#0]            ;3291
000160  f440001f          ORR      r0,r0,#0x9f0000       ;3291
000164  6008              STR      r0,[r1,#0]            ;3291
000166  4608              MOV      r0,r1                 ;3294
000168  6800              LDR      r0,[r0,#0]            ;3294
00016a  f4401000          ORR      r0,r0,#0x200000       ;3294
00016e  6008              STR      r0,[r1,#0]            ;3294
000170  4608              MOV      r0,r1                 ;3298
000172  6800              LDR      r0,[r0,#0]            ;3298
000174  f4400080          ORR      r0,r0,#0x400000       ;3298
000178  6008              STR      r0,[r1,#0]            ;3298
00017a  480c              LDR      r0,|L8.428|
00017c  3074              ADDS     r0,r0,#0x74           ;3302
00017e  6800              LDR      r0,[r0,#0]            ;3302
000180  f0200001          BIC      r0,r0,#1              ;3302
000184  4909              LDR      r1,|L8.428|
000186  3174              ADDS     r1,r1,#0x74           ;3302
000188  6008              STR      r0,[r1,#0]            ;3302
00018a  4608              MOV      r0,r1                 ;3305
00018c  6800              LDR      r0,[r0,#0]            ;3305
00018e  f0407080          ORR      r0,r0,#0x1000000      ;3305
000192  6008              STR      r0,[r1,#0]            ;3305
000194  4808              LDR      r0,|L8.440|
000196  4909              LDR      r1,|L8.444|
000198  6008              STR      r0,[r1,#0]            ;3308  ; SystemCoreClock
00019a  2000              MOVS     r0,#0                 ;3311
00019c  f7fffffe          BL       HAL_InitTick
0001a0  b108              CBZ      r0,|L8.422|
0001a2  2001              MOVS     r0,#1                 ;3313
0001a4  e73d              B        |L8.34|
                  |L8.422|
0001a6  2000              MOVS     r0,#0                 ;3317
0001a8  e73b              B        |L8.34|
;;;3320   
                          ENDP

0001aa  0000              DCW      0x0000
                  |L8.428|
                          DCD      0x40023800
                  |L8.432|
                          DCD      0x04003010
                  |L8.436|
                          DCD      0x24003000
                  |L8.440|
                          DCD      0x00f42400
                  |L8.444|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX|
#line 587
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
