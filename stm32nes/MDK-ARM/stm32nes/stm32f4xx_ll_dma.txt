; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_dma.o --depend=stm32nes\stm32f4xx_ll_dma.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_dma.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_dma.c]
                          THUMB

                          AREA ||i.LL_AHB1_GRP1_ForceReset||, CODE, READONLY, ALIGN=2

                  LL_AHB1_GRP1_ForceReset PROC
;;;599    */
;;;600    __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
000000  4902              LDR      r1,|L1.12|
;;;601    {
;;;602      SET_BIT(RCC->AHB1RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L1.12|
000008  6011              STR      r1,[r2,#0]
;;;603    }
00000a  4770              BX       lr
;;;604    
                          ENDP

                  |L1.12|
                          DCD      0x40023810

                          AREA ||i.LL_AHB1_GRP1_ReleaseReset||, CODE, READONLY, ALIGN=2

                  LL_AHB1_GRP1_ReleaseReset PROC
;;;648    */
;;;649    __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
000000  4902              LDR      r1,|L2.12|
;;;650    {
;;;651      CLEAR_BIT(RCC->AHB1RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  6011              STR      r1,[r2,#0]
;;;652    }
00000a  4770              BX       lr
;;;653    
                          ENDP

                  |L2.12|
                          DCD      0x40023810

                          AREA ||i.LL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  LL_DMA_DeInit PROC
;;;171      */
;;;172    uint32_t LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Stream)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;173    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;174      DMA_Stream_TypeDef *tmp = (DMA_Stream_TypeDef *)DMA1_Stream0;
000008  4e72              LDR      r6,|L3.468|
;;;175      ErrorStatus status = SUCCESS;
00000a  2701              MOVS     r7,#1
;;;176    
;;;177      /* Check the DMA Instance DMAx and Stream parameters*/
;;;178      assert_param(IS_LL_DMA_ALL_STREAM_INSTANCE(DMAx, Stream));
;;;179    
;;;180      if (Stream == LL_DMA_STREAM_ALL)
00000c  f5153f80          CMN      r5,#0x10000
000010  d118              BNE      |L3.68|
;;;181      {
;;;182        if (DMAx == DMA1)
000012  4870              LDR      r0,|L3.468|
000014  3810              SUBS     r0,r0,#0x10
000016  4284              CMP      r4,r0
000018  d106              BNE      |L3.40|
;;;183        {
;;;184          /* Force reset of DMA clock */
;;;185          LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_DMA1);
00001a  0578              LSLS     r0,r7,#21
00001c  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;186    
;;;187          /* Release reset of DMA clock */
;;;188          LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_DMA1);
000020  0578              LSLS     r0,r7,#21
000022  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
000026  e0d2              B        |L3.462|
                  |L3.40|
;;;189        }
;;;190        else if (DMAx == DMA2)
000028  486b              LDR      r0,|L3.472|
00002a  4284              CMP      r4,r0
00002c  d108              BNE      |L3.64|
;;;191        {
;;;192          /* Force reset of DMA clock */
;;;193          LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_DMA2);
00002e  f44f0080          MOV      r0,#0x400000
000032  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;194    
;;;195          /* Release reset of DMA clock */
;;;196          LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_DMA2);
000036  f44f0080          MOV      r0,#0x400000
00003a  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
00003e  e0c6              B        |L3.462|
                  |L3.64|
;;;197        }
;;;198        else
;;;199        {
;;;200          status = ERROR;
000040  2700              MOVS     r7,#0
000042  e0c4              B        |L3.462|
                  |L3.68|
;;;201        }
;;;202      }
;;;203      else
;;;204      {
;;;205        /* Disable the selected Stream */
;;;206        LL_DMA_DisableStream(DMAx,Stream);
000044  bf00              NOP      
000046  4865              LDR      r0,|L3.476|
000048  5d40              LDRB     r0,[r0,r5]
00004a  5820              LDR      r0,[r4,r0]
00004c  f0200001          BIC      r0,r0,#1
000050  4962              LDR      r1,|L3.476|
000052  5d49              LDRB     r1,[r1,r5]
000054  5060              STR      r0,[r4,r1]
000056  bf00              NOP      
;;;207    
;;;208        /* Get the DMA Stream Instance */
;;;209        tmp = (DMA_Stream_TypeDef *)(__LL_DMA_GET_STREAM_INSTANCE(DMAx, Stream));
000058  485e              LDR      r0,|L3.468|
00005a  3810              SUBS     r0,r0,#0x10
00005c  4284              CMP      r4,r0
00005e  d102              BNE      |L3.102|
000060  b90d              CBNZ     r5,|L3.102|
000062  485c              LDR      r0,|L3.468|
000064  e077              B        |L3.342|
                  |L3.102|
000066  485c              LDR      r0,|L3.472|
000068  4284              CMP      r4,r0
00006a  d103              BNE      |L3.116|
00006c  b915              CBNZ     r5,|L3.116|
00006e  485a              LDR      r0,|L3.472|
000070  3010              ADDS     r0,r0,#0x10
000072  e070              B        |L3.342|
                  |L3.116|
000074  4857              LDR      r0,|L3.468|
000076  3810              SUBS     r0,r0,#0x10
000078  4284              CMP      r4,r0
00007a  d104              BNE      |L3.134|
00007c  2d01              CMP      r5,#1
00007e  d102              BNE      |L3.134|
000080  4854              LDR      r0,|L3.468|
000082  3018              ADDS     r0,r0,#0x18
000084  e067              B        |L3.342|
                  |L3.134|
000086  4854              LDR      r0,|L3.472|
000088  4284              CMP      r4,r0
00008a  d104              BNE      |L3.150|
00008c  2d01              CMP      r5,#1
00008e  d102              BNE      |L3.150|
000090  4851              LDR      r0,|L3.472|
000092  3028              ADDS     r0,r0,#0x28
000094  e05f              B        |L3.342|
                  |L3.150|
000096  484f              LDR      r0,|L3.468|
000098  3810              SUBS     r0,r0,#0x10
00009a  4284              CMP      r4,r0
00009c  d104              BNE      |L3.168|
00009e  2d02              CMP      r5,#2
0000a0  d102              BNE      |L3.168|
0000a2  484c              LDR      r0,|L3.468|
0000a4  3030              ADDS     r0,r0,#0x30
0000a6  e056              B        |L3.342|
                  |L3.168|
0000a8  484b              LDR      r0,|L3.472|
0000aa  4284              CMP      r4,r0
0000ac  d104              BNE      |L3.184|
0000ae  2d02              CMP      r5,#2
0000b0  d102              BNE      |L3.184|
0000b2  4849              LDR      r0,|L3.472|
0000b4  3040              ADDS     r0,r0,#0x40
0000b6  e04e              B        |L3.342|
                  |L3.184|
0000b8  4846              LDR      r0,|L3.468|
0000ba  3810              SUBS     r0,r0,#0x10
0000bc  4284              CMP      r4,r0
0000be  d104              BNE      |L3.202|
0000c0  2d03              CMP      r5,#3
0000c2  d102              BNE      |L3.202|
0000c4  4843              LDR      r0,|L3.468|
0000c6  3048              ADDS     r0,r0,#0x48
0000c8  e045              B        |L3.342|
                  |L3.202|
0000ca  4843              LDR      r0,|L3.472|
0000cc  4284              CMP      r4,r0
0000ce  d104              BNE      |L3.218|
0000d0  2d03              CMP      r5,#3
0000d2  d102              BNE      |L3.218|
0000d4  4840              LDR      r0,|L3.472|
0000d6  3058              ADDS     r0,r0,#0x58
0000d8  e03d              B        |L3.342|
                  |L3.218|
0000da  483e              LDR      r0,|L3.468|
0000dc  3810              SUBS     r0,r0,#0x10
0000de  4284              CMP      r4,r0
0000e0  d104              BNE      |L3.236|
0000e2  2d04              CMP      r5,#4
0000e4  d102              BNE      |L3.236|
0000e6  483b              LDR      r0,|L3.468|
0000e8  3060              ADDS     r0,r0,#0x60
0000ea  e034              B        |L3.342|
                  |L3.236|
0000ec  483a              LDR      r0,|L3.472|
0000ee  4284              CMP      r4,r0
0000f0  d104              BNE      |L3.252|
0000f2  2d04              CMP      r5,#4
0000f4  d102              BNE      |L3.252|
0000f6  4838              LDR      r0,|L3.472|
0000f8  3070              ADDS     r0,r0,#0x70
0000fa  e02c              B        |L3.342|
                  |L3.252|
0000fc  4835              LDR      r0,|L3.468|
0000fe  3810              SUBS     r0,r0,#0x10
000100  4284              CMP      r4,r0
000102  d104              BNE      |L3.270|
000104  2d05              CMP      r5,#5
000106  d102              BNE      |L3.270|
000108  4832              LDR      r0,|L3.468|
00010a  3078              ADDS     r0,r0,#0x78
00010c  e023              B        |L3.342|
                  |L3.270|
00010e  4832              LDR      r0,|L3.472|
000110  4284              CMP      r4,r0
000112  d104              BNE      |L3.286|
000114  2d05              CMP      r5,#5
000116  d102              BNE      |L3.286|
000118  482f              LDR      r0,|L3.472|
00011a  3088              ADDS     r0,r0,#0x88
00011c  e01b              B        |L3.342|
                  |L3.286|
00011e  482d              LDR      r0,|L3.468|
000120  3810              SUBS     r0,r0,#0x10
000122  4284              CMP      r4,r0
000124  d104              BNE      |L3.304|
000126  2d06              CMP      r5,#6
000128  d102              BNE      |L3.304|
00012a  482a              LDR      r0,|L3.468|
00012c  3090              ADDS     r0,r0,#0x90
00012e  e012              B        |L3.342|
                  |L3.304|
000130  4829              LDR      r0,|L3.472|
000132  4284              CMP      r4,r0
000134  d104              BNE      |L3.320|
000136  2d06              CMP      r5,#6
000138  d102              BNE      |L3.320|
00013a  4827              LDR      r0,|L3.472|
00013c  30a0              ADDS     r0,r0,#0xa0
00013e  e00a              B        |L3.342|
                  |L3.320|
000140  4824              LDR      r0,|L3.468|
000142  3810              SUBS     r0,r0,#0x10
000144  4284              CMP      r4,r0
000146  d104              BNE      |L3.338|
000148  2d07              CMP      r5,#7
00014a  d102              BNE      |L3.338|
00014c  4821              LDR      r0,|L3.468|
00014e  30a8              ADDS     r0,r0,#0xa8
000150  e001              B        |L3.342|
                  |L3.338|
000152  4821              LDR      r0,|L3.472|
000154  30b8              ADDS     r0,r0,#0xb8
                  |L3.342|
000156  4606              MOV      r6,r0
;;;210    
;;;211        /* Reset DMAx_Streamy configuration register */
;;;212        LL_DMA_WriteReg(tmp, CR, 0U);
000158  2000              MOVS     r0,#0
00015a  6030              STR      r0,[r6,#0]
;;;213    
;;;214        /* Reset DMAx_Streamy remaining bytes register */
;;;215        LL_DMA_WriteReg(tmp, NDTR, 0U);
00015c  6070              STR      r0,[r6,#4]
;;;216    
;;;217        /* Reset DMAx_Streamy peripheral address register */
;;;218        LL_DMA_WriteReg(tmp, PAR, 0U);
00015e  60b0              STR      r0,[r6,#8]
;;;219    
;;;220        /* Reset DMAx_Streamy memory address register */
;;;221        LL_DMA_WriteReg(tmp, M0AR, 0U);
000160  60f0              STR      r0,[r6,#0xc]
;;;222    
;;;223        /* Reset DMAx_Streamy memory address register */
;;;224        LL_DMA_WriteReg(tmp, M1AR, 0U);
000162  6130              STR      r0,[r6,#0x10]
;;;225    
;;;226        /* Reset DMAx_Streamy FIFO control register */
;;;227        LL_DMA_WriteReg(tmp, FCR, 0x00000021U);
000164  2021              MOVS     r0,#0x21
000166  6170              STR      r0,[r6,#0x14]
;;;228    
;;;229        /* Reset Channel register field for DMAx Stream*/
;;;230        LL_DMA_SetChannelSelection(DMAx, Stream, LL_DMA_CHANNEL_0);
000168  2200              MOVS     r2,#0
00016a  4629              MOV      r1,r5
00016c  4620              MOV      r0,r4
00016e  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;231    
;;;232        if(Stream == LL_DMA_STREAM_0)
000172  b915              CBNZ     r5,|L3.378|
;;;233        {
;;;234           /* Reset the Stream0 pending flags */
;;;235           DMAx->LIFCR = 0x0000003FU;
000174  203f              MOVS     r0,#0x3f
000176  60a0              STR      r0,[r4,#8]
000178  e029              B        |L3.462|
                  |L3.378|
;;;236        }
;;;237        else if(Stream == LL_DMA_STREAM_1)
00017a  2d01              CMP      r5,#1
00017c  d103              BNE      |L3.390|
;;;238        {
;;;239           /* Reset the Stream1 pending flags */
;;;240           DMAx->LIFCR = 0x00000F40U;
00017e  f44f6074          MOV      r0,#0xf40
000182  60a0              STR      r0,[r4,#8]
000184  e023              B        |L3.462|
                  |L3.390|
;;;241        }
;;;242        else if(Stream == LL_DMA_STREAM_2)
000186  2d02              CMP      r5,#2
000188  d103              BNE      |L3.402|
;;;243        {
;;;244           /* Reset the Stream2 pending flags */
;;;245           DMAx->LIFCR = 0x003F0000U;
00018a  f44f107c          MOV      r0,#0x3f0000
00018e  60a0              STR      r0,[r4,#8]
000190  e01d              B        |L3.462|
                  |L3.402|
;;;246        }
;;;247        else if(Stream == LL_DMA_STREAM_3)
000192  2d03              CMP      r5,#3
000194  d103              BNE      |L3.414|
;;;248        {
;;;249           /* Reset the Stream3 pending flags */
;;;250           DMAx->LIFCR = 0x0F400000U;
000196  f04f6074          MOV      r0,#0xf400000
00019a  60a0              STR      r0,[r4,#8]
00019c  e017              B        |L3.462|
                  |L3.414|
;;;251        }
;;;252        else if(Stream == LL_DMA_STREAM_4)
00019e  2d04              CMP      r5,#4
0001a0  d102              BNE      |L3.424|
;;;253        {
;;;254           /* Reset the Stream4 pending flags */
;;;255           DMAx->HIFCR = 0x0000003FU;
0001a2  203f              MOVS     r0,#0x3f
0001a4  60e0              STR      r0,[r4,#0xc]
0001a6  e012              B        |L3.462|
                  |L3.424|
;;;256        }
;;;257        else if(Stream == LL_DMA_STREAM_5)
0001a8  2d05              CMP      r5,#5
0001aa  d103              BNE      |L3.436|
;;;258        {
;;;259           /* Reset the Stream5 pending flags */
;;;260           DMAx->HIFCR = 0x00000F40U;
0001ac  f44f6074          MOV      r0,#0xf40
0001b0  60e0              STR      r0,[r4,#0xc]
0001b2  e00c              B        |L3.462|
                  |L3.436|
;;;261        }
;;;262        else if(Stream == LL_DMA_STREAM_6)
0001b4  2d06              CMP      r5,#6
0001b6  d103              BNE      |L3.448|
;;;263        {
;;;264           /* Reset the Stream6 pending flags */
;;;265           DMAx->HIFCR = 0x003F0000U;
0001b8  f44f107c          MOV      r0,#0x3f0000
0001bc  60e0              STR      r0,[r4,#0xc]
0001be  e006              B        |L3.462|
                  |L3.448|
;;;266        }
;;;267        else if(Stream == LL_DMA_STREAM_7)
0001c0  2d07              CMP      r5,#7
0001c2  d103              BNE      |L3.460|
;;;268        {
;;;269           /* Reset the Stream7 pending flags */
;;;270           DMAx->HIFCR = 0x0F400000U;
0001c4  f04f6074          MOV      r0,#0xf400000
0001c8  60e0              STR      r0,[r4,#0xc]
0001ca  e000              B        |L3.462|
                  |L3.460|
;;;271        }
;;;272        else
;;;273        {
;;;274          status = ERROR;
0001cc  2700              MOVS     r7,#0
                  |L3.462|
;;;275        }
;;;276      }
;;;277    
;;;278      return status;
0001ce  4638              MOV      r0,r7
;;;279    }
0001d0  e8bd81f0          POP      {r4-r8,pc}
;;;280    
                          ENDP

                  |L3.468|
                          DCD      0x40026010
                  |L3.472|
                          DCD      0x40026400
                  |L3.476|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_Init||, CODE, READONLY, ALIGN=2

                  LL_DMA_Init PROC
;;;300      */
;;;301    uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
000000  b570              PUSH     {r4-r6,lr}
;;;302    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;303      /* Check the DMA Instance DMAx and Stream parameters*/
;;;304      assert_param(IS_LL_DMA_ALL_STREAM_INSTANCE(DMAx, Stream));
;;;305    
;;;306      /* Check the DMA parameters from DMA_InitStruct */
;;;307      assert_param(IS_LL_DMA_DIRECTION(DMA_InitStruct->Direction));
;;;308      assert_param(IS_LL_DMA_MODE(DMA_InitStruct->Mode));
;;;309      assert_param(IS_LL_DMA_PERIPHINCMODE(DMA_InitStruct->PeriphOrM2MSrcIncMode));
;;;310      assert_param(IS_LL_DMA_MEMORYINCMODE(DMA_InitStruct->MemoryOrM2MDstIncMode));
;;;311      assert_param(IS_LL_DMA_PERIPHDATASIZE(DMA_InitStruct->PeriphOrM2MSrcDataSize));
;;;312      assert_param(IS_LL_DMA_MEMORYDATASIZE(DMA_InitStruct->MemoryOrM2MDstDataSize));
;;;313      assert_param(IS_LL_DMA_NBDATA(DMA_InitStruct->NbData));
;;;314      assert_param(IS_LL_DMA_CHANNEL(DMA_InitStruct->Channel));
;;;315      assert_param(IS_LL_DMA_PRIORITY(DMA_InitStruct->Priority));
;;;316      assert_param(IS_LL_DMA_FIFO_MODE_STATE(DMA_InitStruct->FIFOMode));
;;;317      /* Check the memory burst, peripheral burst and FIFO threshold parameters only
;;;318         when FIFO mode is enabled */
;;;319      if(DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
000008  6af0              LDR      r0,[r6,#0x2c]
00000a  b100              CBZ      r0,|L4.14|
;;;320      {
;;;321        assert_param(IS_LL_DMA_FIFO_THRESHOLD(DMA_InitStruct->FIFOThreshold));
;;;322        assert_param(IS_LL_DMA_MEMORY_BURST(DMA_InitStruct->MemBurst));
;;;323        assert_param(IS_LL_DMA_PERIPHERAL_BURST(DMA_InitStruct->PeriphBurst));
00000c  bf00              NOP      
                  |L4.14|
;;;324      }
;;;325    
;;;326      /*---------------------------- DMAx SxCR Configuration ------------------------
;;;327       * Configure DMAx_Streamy: data transfer direction, data transfer mode,
;;;328       *                          peripheral and memory increment mode,
;;;329       *                          data size alignment and  priority level with parameters :
;;;330       * - Direction:      DMA_SxCR_DIR[1:0] bits
;;;331       * - Mode:           DMA_SxCR_CIRC bit
;;;332       * - PeriphOrM2MSrcIncMode:  DMA_SxCR_PINC bit
;;;333       * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
;;;334       * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
;;;335       * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
;;;336       * - Priority:               DMA_SxCR_PL[1:0] bits
;;;337       */
;;;338      LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
00000e  e9d61202          LDRD     r1,r2,[r6,#8]
000012  4311              ORRS     r1,r1,r2
000014  6932              LDR      r2,[r6,#0x10]
000016  4311              ORRS     r1,r1,r2
000018  6972              LDR      r2,[r6,#0x14]
00001a  4311              ORRS     r1,r1,r2
00001c  69b2              LDR      r2,[r6,#0x18]
00001e  4311              ORRS     r1,r1,r2
000020  69f2              LDR      r2,[r6,#0x1c]
000022  4311              ORRS     r1,r1,r2
000024  6ab2              LDR      r2,[r6,#0x28]
000026  ea410002          ORR      r0,r1,r2
00002a  4929              LDR      r1,|L4.208|
00002c  5d49              LDRB     r1,[r1,r5]
00002e  5861              LDR      r1,[r4,r1]
000030  4a28              LDR      r2,|L4.212|
000032  4011              ANDS     r1,r1,r2
000034  4301              ORRS     r1,r1,r0
000036  4a26              LDR      r2,|L4.208|
000038  5d52              LDRB     r2,[r2,r5]
00003a  50a1              STR      r1,[r4,r2]
00003c  bf00              NOP      
;;;339                            DMA_InitStruct->Mode                    | \
;;;340                            DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
;;;341                            DMA_InitStruct->MemoryOrM2MDstIncMode   | \
;;;342                            DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
;;;343                            DMA_InitStruct->MemoryOrM2MDstDataSize  | \
;;;344                            DMA_InitStruct->Priority
;;;345                            );
;;;346    
;;;347      if(DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
00003e  6af0              LDR      r0,[r6,#0x2c]
000040  b330              CBZ      r0,|L4.144|
;;;348      {
;;;349        /*---------------------------- DMAx SxFCR Configuration ------------------------
;;;350         * Configure DMAx_Streamy:  fifo mode and fifo threshold with parameters :
;;;351         * - FIFOMode:                DMA_SxFCR_DMDIS bit
;;;352         * - FIFOThreshold:           DMA_SxFCR_FTH[1:0] bits
;;;353         */
;;;354        LL_DMA_ConfigFifo(DMAx, Stream, DMA_InitStruct->FIFOMode, DMA_InitStruct->FIFOThreshold);   
000042  e9d6010b          LDRD     r0,r1,[r6,#0x2c]
000046  4a22              LDR      r2,|L4.208|
000048  5d52              LDRB     r2,[r2,r5]
00004a  4422              ADD      r2,r2,r4
00004c  6952              LDR      r2,[r2,#0x14]
00004e  f0220207          BIC      r2,r2,#7
000052  ea400301          ORR      r3,r0,r1
000056  431a              ORRS     r2,r2,r3
000058  4b1d              LDR      r3,|L4.208|
00005a  5d5b              LDRB     r3,[r3,r5]
00005c  4423              ADD      r3,r3,r4
00005e  615a              STR      r2,[r3,#0x14]
000060  bf00              NOP      
;;;355    
;;;356        /*---------------------------- DMAx SxCR Configuration --------------------------
;;;357         * Configure DMAx_Streamy:  memory burst transfer with parameters :
;;;358         * - MemBurst:                DMA_SxCR_MBURST[1:0] bits
;;;359         */
;;;360        LL_DMA_SetMemoryBurstxfer(DMAx,Stream,DMA_InitStruct->MemBurst); 
000062  6b70              LDR      r0,[r6,#0x34]
000064  491a              LDR      r1,|L4.208|
000066  5d49              LDRB     r1,[r1,r5]
000068  5861              LDR      r1,[r4,r1]
00006a  f02171c0          BIC      r1,r1,#0x1800000
00006e  4301              ORRS     r1,r1,r0
000070  4a17              LDR      r2,|L4.208|
000072  5d52              LDRB     r2,[r2,r5]
000074  50a1              STR      r1,[r4,r2]
000076  bf00              NOP      
;;;361    
;;;362        /*---------------------------- DMAx SxCR Configuration --------------------------
;;;363         * Configure DMAx_Streamy:  peripheral burst transfer with parameters :
;;;364         * - PeriphBurst:             DMA_SxCR_PBURST[1:0] bits
;;;365         */
;;;366        LL_DMA_SetPeriphBurstxfer(DMAx,Stream,DMA_InitStruct->PeriphBurst);
000078  6bb0              LDR      r0,[r6,#0x38]
00007a  4915              LDR      r1,|L4.208|
00007c  5d49              LDRB     r1,[r1,r5]
00007e  5861              LDR      r1,[r4,r1]
000080  f42101c0          BIC      r1,r1,#0x600000
000084  4301              ORRS     r1,r1,r0
000086  4a12              LDR      r2,|L4.208|
000088  5d52              LDRB     r2,[r2,r5]
00008a  50a1              STR      r1,[r4,r2]
00008c  bf00              NOP      
00008e  bf00              NOP      
                  |L4.144|
;;;367      }
;;;368    
;;;369      /*-------------------------- DMAx SxM0AR Configuration --------------------------
;;;370       * Configure the memory or destination base address with parameter :
;;;371       * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
;;;372       */
;;;373      LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
000090  6870              LDR      r0,[r6,#4]
000092  490f              LDR      r1,|L4.208|
000094  5d49              LDRB     r1,[r1,r5]
000096  4421              ADD      r1,r1,r4
000098  60c8              STR      r0,[r1,#0xc]
00009a  bf00              NOP      
;;;374    
;;;375      /*-------------------------- DMAx SxPAR Configuration ---------------------------
;;;376       * Configure the peripheral or source base address with parameter :
;;;377       * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
;;;378       */
;;;379      LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
00009c  6830              LDR      r0,[r6,#0]
00009e  490c              LDR      r1,|L4.208|
0000a0  5d49              LDRB     r1,[r1,r5]
0000a2  4421              ADD      r1,r1,r4
0000a4  6088              STR      r0,[r1,#8]
0000a6  bf00              NOP      
;;;380    
;;;381      /*--------------------------- DMAx SxNDTR Configuration -------------------------
;;;382       * Configure the peripheral base address with parameter :
;;;383       * - NbData:                    DMA_SxNDT[15:0] bits
;;;384       */
;;;385      LL_DMA_SetDataLength(DMAx, Stream, DMA_InitStruct->NbData);
0000a8  6a30              LDR      r0,[r6,#0x20]
0000aa  4909              LDR      r1,|L4.208|
0000ac  5d49              LDRB     r1,[r1,r5]
0000ae  4421              ADD      r1,r1,r4
0000b0  6849              LDR      r1,[r1,#4]
0000b2  f36f010f          BFC      r1,#0,#16
0000b6  4301              ORRS     r1,r1,r0
0000b8  4a05              LDR      r2,|L4.208|
0000ba  5d52              LDRB     r2,[r2,r5]
0000bc  4422              ADD      r2,r2,r4
0000be  6051              STR      r1,[r2,#4]
0000c0  bf00              NOP      
;;;386    
;;;387      /*--------------------------- DMA SxCR_CHSEL Configuration ----------------------
;;;388       * Configure the peripheral base address with parameter :
;;;389       * - PeriphRequest:             DMA_SxCR_CHSEL[2:0] bits
;;;390       */
;;;391      LL_DMA_SetChannelSelection(DMAx, Stream, DMA_InitStruct->Channel);
0000c2  4629              MOV      r1,r5
0000c4  4620              MOV      r0,r4
0000c6  6a72              LDR      r2,[r6,#0x24]
0000c8  f7fffffe          BL       LL_DMA_SetChannelSelection
;;;392    
;;;393      return SUCCESS;
0000cc  2001              MOVS     r0,#1
;;;394    }
0000ce  bd70              POP      {r4-r6,pc}
;;;395    
                          ENDP

                  |L4.208|
                          DCD      STREAM_OFFSET_TAB
                  |L4.212|
                          DCD      0xfffc801f

                          AREA ||i.LL_DMA_SetChannelSelection||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetChannelSelection PROC
;;;1025     */
;;;1026   __STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
000000  b510              PUSH     {r4,lr}
;;;1027   {
;;;1028     MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
000002  4b05              LDR      r3,|L5.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f0236360          BIC      r3,r3,#0xe000000
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L5.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;1029   }
000014  bd10              POP      {r4,pc}
;;;1030   
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.LL_DMA_StructInit||, CODE, READONLY, ALIGN=1

                  LL_DMA_StructInit PROC
;;;400      */
;;;401    void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;402    {
;;;403      /* Set DMA_InitStruct fields to default values */
;;;404      DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
000002  6001              STR      r1,[r0,#0]
;;;405      DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
000004  6041              STR      r1,[r0,#4]
;;;406      DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
000006  6081              STR      r1,[r0,#8]
;;;407      DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
000008  60c1              STR      r1,[r0,#0xc]
;;;408      DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
00000a  6101              STR      r1,[r0,#0x10]
;;;409      DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
00000c  6141              STR      r1,[r0,#0x14]
;;;410      DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
00000e  6181              STR      r1,[r0,#0x18]
;;;411      DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
000010  61c1              STR      r1,[r0,#0x1c]
;;;412      DMA_InitStruct->NbData                 = 0x00000000U;
000012  6201              STR      r1,[r0,#0x20]
;;;413      DMA_InitStruct->Channel                = LL_DMA_CHANNEL_0;
000014  6241              STR      r1,[r0,#0x24]
;;;414      DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
000016  6281              STR      r1,[r0,#0x28]
;;;415      DMA_InitStruct->FIFOMode               = LL_DMA_FIFOMODE_DISABLE;
000018  62c1              STR      r1,[r0,#0x2c]
;;;416      DMA_InitStruct->FIFOThreshold          = LL_DMA_FIFOTHRESHOLD_1_4;
00001a  6301              STR      r1,[r0,#0x30]
;;;417      DMA_InitStruct->MemBurst               = LL_DMA_MBURST_SINGLE;
00001c  6341              STR      r1,[r0,#0x34]
;;;418      DMA_InitStruct->PeriphBurst            = LL_DMA_PBURST_SINGLE;
00001e  6381              STR      r1,[r0,#0x38]
;;;419    }
000020  4770              BX       lr
;;;420    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REVSH|
#line 402
|__asm___18_stm32f4xx_ll_dma_c_fc5381f7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_ll_dma_c_fc5381f7____RRX|
#line 587
|__asm___18_stm32f4xx_ll_dma_c_fc5381f7____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
