; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\adc.o --depend=stm32nes\adc.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\adc.crf ../Src/adc.c]
                          THUMB

                          AREA ||i.LL_ADC_REG_SetSequencerRanks||, CODE, READONLY, ALIGN=1

                  LL_ADC_REG_SetSequencerRanks PROC
;;;2399     */
;;;2400   __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
000000  b570              PUSH     {r4-r6,lr}
;;;2401   {
;;;2402     /* Set bits with content of parameter "Channel" with bits position          */
;;;2403     /* in register and register position depending on parameter "Rank".         */
;;;2404     /* Parameters "Rank" and "Channel" are used with masks because containing   */
;;;2405     /* other bits reserved for other purpose.                                   */
;;;2406     register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
000002  f4017440          AND      r4,r1,#0x300
000006  f44f7540          MOV      r5,#0x300
00000a  fa95f5a5          RBIT     r5,r5
00000e  fab5f585          CLZ      r5,r5
000012  40ec              LSRS     r4,r4,r5
000014  f100052c          ADD      r5,r0,#0x2c
000018  eb050384          ADD      r3,r5,r4,LSL #2
;;;2407     
;;;2408     MODIFY_REG(*preg,
00001c  f001061f          AND      r6,r1,#0x1f
000020  251f              MOVS     r5,#0x1f
000022  40b5              LSLS     r5,r5,r6
000024  681c              LDR      r4,[r3,#0]
000026  43ac              BICS     r4,r4,r5
000028  f002051f          AND      r5,r2,#0x1f
00002c  f001061f          AND      r6,r1,#0x1f
000030  40b5              LSLS     r5,r5,r6
000032  432c              ORRS     r4,r4,r5
000034  601c              STR      r4,[r3,#0]
;;;2409                ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
;;;2410                (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
;;;2411   }
000036  bd70              POP      {r4-r6,pc}
;;;2412   
                          ENDP


                          AREA ||i.LL_ADC_SetChannelSamplingTime||, CODE, READONLY, ALIGN=1

                  LL_ADC_SetChannelSamplingTime PROC
;;;3185     */
;;;3186   __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
000000  b570              PUSH     {r4-r6,lr}
;;;3187   {
;;;3188     /* Set bits with content of parameter "SamplingTime" with bits position     */
;;;3189     /* in register and register position depending on parameter "Channel".      */
;;;3190     /* Parameter "Channel" is used with masks because containing                */
;;;3191     /* other bits reserved for other purpose.                                   */
;;;3192     register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
000002  f0017400          AND      r4,r1,#0x2000000
000006  f04f7500          MOV      r5,#0x2000000
00000a  fa95f5a5          RBIT     r5,r5
00000e  fab5f585          CLZ      r5,r5
000012  40ec              LSRS     r4,r4,r5
000014  f100050c          ADD      r5,r0,#0xc
000018  eb050384          ADD      r3,r5,r4,LSL #2
;;;3193     
;;;3194     MODIFY_REG(*preg,
00001c  f00175f8          AND      r5,r1,#0x1f00000
000020  f04f76f8          MOV      r6,#0x1f00000
000024  fa96f6a6          RBIT     r6,r6
000028  fab6f686          CLZ      r6,r6
00002c  40f5              LSRS     r5,r5,r6
00002e  2607              MOVS     r6,#7
000030  40ae              LSLS     r6,r6,r5
000032  681c              LDR      r4,[r3,#0]
000034  43b4              BICS     r4,r4,r6
000036  f00175f8          AND      r5,r1,#0x1f00000
00003a  f04f76f8          MOV      r6,#0x1f00000
00003e  fa96f6a6          RBIT     r6,r6
000042  fab6f686          CLZ      r6,r6
000046  40f5              LSRS     r5,r5,r6
000048  fa02f505          LSL      r5,r2,r5
00004c  432c              ORRS     r4,r4,r5
00004e  601c              STR      r4,[r3,#0]
;;;3195                ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
;;;3196                SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
;;;3197   }
000050  bd70              POP      {r4-r6,pc}
;;;3198   
                          ENDP


                          AREA ||i.LL_DMA_SetMode||, CODE, READONLY, ALIGN=2

                  LL_DMA_SetMode PROC
;;;649      */
;;;650    __STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
000000  b510              PUSH     {r4,lr}
;;;651    {
;;;652      MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
000002  4b05              LDR      r3,|L3.24|
000004  5c5b              LDRB     r3,[r3,r1]
000006  58c3              LDR      r3,[r0,r3]
000008  f4237390          BIC      r3,r3,#0x120
00000c  4313              ORRS     r3,r3,r2
00000e  4c02              LDR      r4,|L3.24|
000010  5c64              LDRB     r4,[r4,r1]
000012  5103              STR      r3,[r0,r4]
;;;653    }
000014  bd10              POP      {r4,pc}
;;;654    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      STREAM_OFFSET_TAB

                          AREA ||i.MX_ADC1_Init||, CODE, READONLY, ALIGN=2

                  MX_ADC1_Init PROC
;;;47     /* ADC1 init function */
;;;48     void MX_ADC1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;49     {
000002  b094              SUB      sp,sp,#0x50
;;;50       LL_ADC_InitTypeDef ADC_InitStruct = {0};
000004  2000              MOVS     r0,#0
000006  9011              STR      r0,[sp,#0x44]
000008  9012              STR      r0,[sp,#0x48]
00000a  9013              STR      r0,[sp,#0x4c]
;;;51       LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
00000c  2114              MOVS     r1,#0x14
00000e  a80c              ADD      r0,sp,#0x30
000010  f7fffffe          BL       __aeabi_memclr4
;;;52       LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
000014  2000              MOVS     r0,#0
000016  9008              STR      r0,[sp,#0x20]
000018  9009              STR      r0,[sp,#0x24]
00001a  900a              STR      r0,[sp,#0x28]
00001c  900b              STR      r0,[sp,#0x2c]
;;;53     
;;;54       LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
00001e  2118              MOVS     r1,#0x18
000020  a802              ADD      r0,sp,#8
000022  f7fffffe          BL       __aeabi_memclr4
;;;55       /* Peripheral clock enable */
;;;56       LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
000026  f44f7080          MOV      r0,#0x100
00002a  4974              LDR      r1,|L4.508|
00002c  6809              LDR      r1,[r1,#0]
00002e  4301              ORRS     r1,r1,r0
000030  4a72              LDR      r2,|L4.508|
000032  6011              STR      r1,[r2,#0]
000034  4611              MOV      r1,r2
000036  6809              LDR      r1,[r1,#0]
000038  4001              ANDS     r1,r1,r0
00003a  9101              STR      r1,[sp,#4]
00003c  bf00              NOP      
00003e  bf00              NOP      
;;;57       
;;;58       LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
000040  2001              MOVS     r0,#1
000042  496e              LDR      r1,|L4.508|
000044  3914              SUBS     r1,r1,#0x14
000046  6809              LDR      r1,[r1,#0]
000048  4301              ORRS     r1,r1,r0
00004a  4a6c              LDR      r2,|L4.508|
00004c  3a14              SUBS     r2,r2,#0x14
00004e  6011              STR      r1,[r2,#0]
000050  4611              MOV      r1,r2
000052  6809              LDR      r1,[r1,#0]
000054  4001              ANDS     r1,r1,r0
000056  9101              STR      r1,[sp,#4]
000058  bf00              NOP      
00005a  bf00              NOP      
;;;59       /**ADC1 GPIO Configuration  
;;;60       PA0-WKUP   ------> ADC1_IN0
;;;61       PA1   ------> ADC1_IN1
;;;62       PA2   ------> ADC1_IN2
;;;63       PA3   ------> ADC1_IN3 
;;;64       */
;;;65       GPIO_InitStruct.Pin = Joy1Y_Pin|Joy1X_Pin|Joy2X_Pin|Joy2Y_Pin;
00005c  200f              MOVS     r0,#0xf
00005e  9002              STR      r0,[sp,#8]
;;;66       GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
000060  2003              MOVS     r0,#3
000062  9003              STR      r0,[sp,#0xc]
;;;67       GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
000064  2000              MOVS     r0,#0
000066  9006              STR      r0,[sp,#0x18]
;;;68       LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000068  a902              ADD      r1,sp,#8
00006a  4865              LDR      r0,|L4.512|
00006c  f7fffffe          BL       LL_GPIO_Init
;;;69     
;;;70       /* ADC1 DMA Init */
;;;71       
;;;72       /* ADC1 Init */
;;;73       LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
000070  4864              LDR      r0,|L4.516|
000072  2100              MOVS     r1,#0
000074  460a              MOV      r2,r1
000076  4b64              LDR      r3,|L4.520|
000078  5c5b              LDRB     r3,[r3,r1]
00007a  58c3              LDR      r3,[r0,r3]
00007c  f0236360          BIC      r3,r3,#0xe000000
000080  4313              ORRS     r3,r3,r2
000082  4c61              LDR      r4,|L4.520|
000084  5c64              LDRB     r4,[r4,r1]
000086  5103              STR      r3,[r0,r4]
000088  bf00              NOP      
;;;74     
;;;75       LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
00008a  bf00              NOP      
00008c  4b5e              LDR      r3,|L4.520|
00008e  5c5b              LDRB     r3,[r3,r1]
000090  58c3              LDR      r3,[r0,r3]
000092  f02303c0          BIC      r3,r3,#0xc0
000096  4313              ORRS     r3,r3,r2
000098  4c5b              LDR      r4,|L4.520|
00009a  5c64              LDRB     r4,[r4,r1]
00009c  5103              STR      r3,[r0,r4]
00009e  bf00              NOP      
;;;76     
;;;77       LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
0000a0  bf00              NOP      
0000a2  4b59              LDR      r3,|L4.520|
0000a4  5c5b              LDRB     r3,[r3,r1]
0000a6  58c3              LDR      r3,[r0,r3]
0000a8  f4233340          BIC      r3,r3,#0x30000
0000ac  4313              ORRS     r3,r3,r2
0000ae  4c56              LDR      r4,|L4.520|
0000b0  5c64              LDRB     r4,[r4,r1]
0000b2  5103              STR      r3,[r0,r4]
0000b4  bf00              NOP      
;;;78     
;;;79       LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_NORMAL);
0000b6  2200              MOVS     r2,#0
0000b8  4611              MOV      r1,r2
0000ba  f7fffffe          BL       LL_DMA_SetMode
;;;80     
;;;81       LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
0000be  4851              LDR      r0,|L4.516|
0000c0  2100              MOVS     r1,#0
0000c2  460a              MOV      r2,r1
0000c4  4b50              LDR      r3,|L4.520|
0000c6  5c5b              LDRB     r3,[r3,r1]
0000c8  58c3              LDR      r3,[r0,r3]
0000ca  f4237300          BIC      r3,r3,#0x200
0000ce  4313              ORRS     r3,r3,r2
0000d0  4c4d              LDR      r4,|L4.520|
0000d2  5c64              LDRB     r4,[r4,r1]
0000d4  5103              STR      r3,[r0,r4]
0000d6  bf00              NOP      
;;;82     
;;;83       LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
0000d8  1502              ASRS     r2,r0,#20
0000da  4b4b              LDR      r3,|L4.520|
0000dc  5c5b              LDRB     r3,[r3,r1]
0000de  58c3              LDR      r3,[r0,r3]
0000e0  f4236380          BIC      r3,r3,#0x400
0000e4  4313              ORRS     r3,r3,r2
0000e6  4c48              LDR      r4,|L4.520|
0000e8  5c64              LDRB     r4,[r4,r1]
0000ea  5103              STR      r3,[r0,r4]
0000ec  bf00              NOP      
;;;84     
;;;85       LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
0000ee  14c2              ASRS     r2,r0,#19
0000f0  4b45              LDR      r3,|L4.520|
0000f2  5c5b              LDRB     r3,[r3,r1]
0000f4  58c3              LDR      r3,[r0,r3]
0000f6  f42353c0          BIC      r3,r3,#0x1800
0000fa  4313              ORRS     r3,r3,r2
0000fc  4c42              LDR      r4,|L4.520|
0000fe  5c64              LDRB     r4,[r4,r1]
000100  5103              STR      r3,[r0,r4]
000102  bf00              NOP      
;;;86     
;;;87       LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
000104  0092              LSLS     r2,r2,#2
000106  4b40              LDR      r3,|L4.520|
000108  5c5b              LDRB     r3,[r3,r1]
00010a  58c3              LDR      r3,[r0,r3]
00010c  f42343c0          BIC      r3,r3,#0x6000
000110  4313              ORRS     r3,r3,r2
000112  4c3d              LDR      r4,|L4.520|
000114  5c64              LDRB     r4,[r4,r1]
000116  5103              STR      r3,[r0,r4]
000118  bf00              NOP      
;;;88     
;;;89       LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
00011a  bf00              NOP      
00011c  4a3a              LDR      r2,|L4.520|
00011e  5c52              LDRB     r2,[r2,r1]
000120  4402              ADD      r2,r2,r0
000122  6952              LDR      r2,[r2,#0x14]
000124  f0220204          BIC      r2,r2,#4
000128  4b37              LDR      r3,|L4.520|
00012a  5c5b              LDRB     r3,[r3,r1]
00012c  4403              ADD      r3,r3,r0
00012e  615a              STR      r2,[r3,#0x14]
000130  bf00              NOP      
;;;90     
;;;91       /**Common config 
;;;92       */
;;;93       ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
000132  2000              MOVS     r0,#0
000134  9011              STR      r0,[sp,#0x44]
;;;94       ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
000136  9012              STR      r0,[sp,#0x48]
;;;95       ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
000138  f44f7080          MOV      r0,#0x100
00013c  9013              STR      r0,[sp,#0x4c]
;;;96       LL_ADC_Init(ADC1, &ADC_InitStruct);
00013e  a911              ADD      r1,sp,#0x44
000140  4832              LDR      r0,|L4.524|
000142  f7fffffe          BL       LL_ADC_Init
;;;97       ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
000146  2000              MOVS     r0,#0
000148  900c              STR      r0,[sp,#0x30]
;;;98       ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
00014a  f44f1040          MOV      r0,#0x300000
00014e  900d              STR      r0,[sp,#0x34]
;;;99       ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
000150  2000              MOVS     r0,#0
000152  900e              STR      r0,[sp,#0x38]
;;;100      ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
000154  2002              MOVS     r0,#2
000156  900f              STR      r0,[sp,#0x3c]
;;;101      ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
000158  f44f7040          MOV      r0,#0x300
00015c  9010              STR      r0,[sp,#0x40]
;;;102      LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
00015e  a90c              ADD      r1,sp,#0x30
000160  482a              LDR      r0,|L4.524|
000162  f7fffffe          BL       LL_ADC_REG_Init
;;;103      LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
000166  f44f6080          MOV      r0,#0x400
00016a  4928              LDR      r1,|L4.524|
00016c  6889              LDR      r1,[r1,#8]
00016e  f4216180          BIC      r1,r1,#0x400
000172  4301              ORRS     r1,r1,r0
000174  4a25              LDR      r2,|L4.524|
000176  6091              STR      r1,[r2,#8]
000178  bf00              NOP      
;;;104      LL_ADC_DisableIT_EOCS(ADC1);
00017a  bf00              NOP      
00017c  4610              MOV      r0,r2
00017e  6840              LDR      r0,[r0,#4]
000180  f0200020          BIC      r0,r0,#0x20
000184  4611              MOV      r1,r2
000186  6048              STR      r0,[r1,#4]
000188  bf00              NOP      
;;;105      ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
00018a  f44f3080          MOV      r0,#0x10000
00018e  9008              STR      r0,[sp,#0x20]
;;;106      ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
000190  2000              MOVS     r0,#0
000192  9009              STR      r0,[sp,#0x24]
;;;107      LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
000194  a908              ADD      r1,sp,#0x20
000196  481e              LDR      r0,|L4.528|
000198  f7fffffe          BL       LL_ADC_CommonInit
;;;108      /**Configure Regular Channel 
;;;109      */
;;;110      LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
00019c  f04f7200          MOV      r2,#0x2000000
0001a0  1411              ASRS     r1,r2,#16
0001a2  481a              LDR      r0,|L4.524|
0001a4  f7fffffe          BL       LL_ADC_REG_SetSequencerRanks
;;;111      LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_480CYCLES);
0001a8  2207              MOVS     r2,#7
0001aa  f04f7100          MOV      r1,#0x2000000
0001ae  4817              LDR      r0,|L4.524|
0001b0  f7fffffe          BL       LL_ADC_SetChannelSamplingTime
;;;112      /**Configure Regular Channel 
;;;113      */
;;;114      LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_1);
0001b4  4a17              LDR      r2,|L4.532|
0001b6  f2402105          MOV      r1,#0x205
0001ba  4814              LDR      r0,|L4.524|
0001bc  f7fffffe          BL       LL_ADC_REG_SetSequencerRanks
;;;115      LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_480CYCLES);
0001c0  2207              MOVS     r2,#7
0001c2  4914              LDR      r1,|L4.532|
0001c4  4811              LDR      r0,|L4.524|
0001c6  f7fffffe          BL       LL_ADC_SetChannelSamplingTime
;;;116      /**Configure Regular Channel 
;;;117      */
;;;118      LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_2);
0001ca  4a13              LDR      r2,|L4.536|
0001cc  f240210a          MOV      r1,#0x20a
0001d0  480e              LDR      r0,|L4.524|
0001d2  f7fffffe          BL       LL_ADC_REG_SetSequencerRanks
;;;119      LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_480CYCLES);
0001d6  2207              MOVS     r2,#7
0001d8  490f              LDR      r1,|L4.536|
0001da  480c              LDR      r0,|L4.524|
0001dc  f7fffffe          BL       LL_ADC_SetChannelSamplingTime
;;;120      /**Configure Regular Channel 
;;;121      */
;;;122      LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_3);
0001e0  4a0e              LDR      r2,|L4.540|
0001e2  f240210f          MOV      r1,#0x20f
0001e6  4809              LDR      r0,|L4.524|
0001e8  f7fffffe          BL       LL_ADC_REG_SetSequencerRanks
;;;123      LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_480CYCLES);
0001ec  2207              MOVS     r2,#7
0001ee  490b              LDR      r1,|L4.540|
0001f0  4806              LDR      r0,|L4.524|
0001f2  f7fffffe          BL       LL_ADC_SetChannelSamplingTime
;;;124    
;;;125    }
0001f6  b014              ADD      sp,sp,#0x50
0001f8  bd10              POP      {r4,pc}
;;;126    
                          ENDP

0001fa  0000              DCW      0x0000
                  |L4.508|
                          DCD      0x40023844
                  |L4.512|
                          DCD      0x40020000
                  |L4.516|
                          DCD      0x40026400
                  |L4.520|
                          DCD      STREAM_OFFSET_TAB
                  |L4.524|
                          DCD      0x40012000
                  |L4.528|
                          DCD      0x40012300
                  |L4.532|
                          DCD      0x02300001
                  |L4.536|
                          DCD      0x02600002
                  |L4.540|
                          DCD      0x02900003

                          AREA ||i.joystick_init||, CODE, READONLY, ALIGN=2

                  joystick_init PROC
;;;128    Joysticks joys = {0};
;;;129    void joystick_init(void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;130      LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
000004  f44f7040          MOV      r0,#0x300
000008  492b              LDR      r1,|L5.184|
00000a  6889              LDR      r1,[r1,#8]
00000c  f4217140          BIC      r1,r1,#0x300
000010  4301              ORRS     r1,r1,r0
000012  4a29              LDR      r2,|L5.184|
000014  6091              STR      r1,[r2,#8]
000016  bf00              NOP      
;;;131      LL_DMA_SetMode(DMA2,LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
000018  1592              ASRS     r2,r2,#22
00001a  2100              MOVS     r1,#0
00001c  4827              LDR      r0,|L5.188|
00001e  f7fffffe          BL       LL_DMA_SetMode
;;;132      LL_DMA_SetDataLength(DMA2,LL_DMA_STREAM_0, 4);
000022  4826              LDR      r0,|L5.188|
000024  2100              MOVS     r1,#0
000026  2204              MOVS     r2,#4
000028  4b25              LDR      r3,|L5.192|
00002a  5c5b              LDRB     r3,[r3,r1]
00002c  4403              ADD      r3,r3,r0
00002e  685b              LDR      r3,[r3,#4]
000030  f36f030f          BFC      r3,#0,#16
000034  4313              ORRS     r3,r3,r2
000036  4c22              LDR      r4,|L5.192|
000038  5c64              LDRB     r4,[r4,r1]
00003a  4404              ADD      r4,r4,r0
00003c  6063              STR      r3,[r4,#4]
00003e  bf00              NOP      
;;;133      LL_DMA_ConfigAddresses(DMA2,LL_DMA_STREAM_0,
000040  4d1d              LDR      r5,|L5.184|
000042  460e              MOV      r6,r1
000044  2700              MOVS     r7,#0
000046  b916              CBNZ     r6,|L5.78|
000048  f105074c          ADD      r7,r5,#0x4c
00004c  e000              B        |L5.80|
                  |L5.78|
00004e  4f1d              LDR      r7,|L5.196|
                  |L5.80|
000050  463a              MOV      r2,r7
000052  4b1d              LDR      r3,|L5.200|
000054  2400              MOVS     r4,#0
000056  2c40              CMP      r4,#0x40
000058  d108              BNE      |L5.108|
00005a  4d19              LDR      r5,|L5.192|
00005c  5c6d              LDRB     r5,[r5,r1]
00005e  4405              ADD      r5,r5,r0
000060  60ea              STR      r2,[r5,#0xc]
000062  4d17              LDR      r5,|L5.192|
000064  5c6d              LDRB     r5,[r5,r1]
000066  4405              ADD      r5,r5,r0
000068  60ab              STR      r3,[r5,#8]
00006a  e007              B        |L5.124|
                  |L5.108|
00006c  4d14              LDR      r5,|L5.192|
00006e  5c6d              LDRB     r5,[r5,r1]
000070  4405              ADD      r5,r5,r0
000072  60aa              STR      r2,[r5,#8]
000074  4d12              LDR      r5,|L5.192|
000076  5c6d              LDRB     r5,[r5,r1]
000078  4405              ADD      r5,r5,r0
00007a  60eb              STR      r3,[r5,#0xc]
                  |L5.124|
00007c  bf00              NOP      
;;;134        LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
;;;135        (uint32_t)&joys,
;;;136        LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
;;;137      LL_DMA_EnableStream(DMA2,LL_DMA_STREAM_0);
00007e  480f              LDR      r0,|L5.188|
000080  2100              MOVS     r1,#0
000082  4a0f              LDR      r2,|L5.192|
000084  5c52              LDRB     r2,[r2,r1]
000086  5882              LDR      r2,[r0,r2]
000088  f0420201          ORR      r2,r2,#1
00008c  4b0c              LDR      r3,|L5.192|
00008e  5c5b              LDRB     r3,[r3,r1]
000090  50c2              STR      r2,[r0,r3]
000092  bf00              NOP      
;;;138      LL_ADC_Enable(ADC1);
000094  bf00              NOP      
000096  4808              LDR      r0,|L5.184|
000098  6880              LDR      r0,[r0,#8]
00009a  f0400001          ORR      r0,r0,#1
00009e  4906              LDR      r1,|L5.184|
0000a0  6088              STR      r0,[r1,#8]
0000a2  bf00              NOP      
;;;139      LL_ADC_REG_StartConversionSWStart(ADC1);
0000a4  bf00              NOP      
0000a6  4608              MOV      r0,r1
0000a8  6880              LDR      r0,[r0,#8]
0000aa  f0404080          ORR      r0,r0,#0x40000000
0000ae  6088              STR      r0,[r1,#8]
0000b0  bf00              NOP      
;;;140    }
0000b2  e8bd81f0          POP      {r4-r8,pc}
;;;141    /* USER CODE END 1 */
                          ENDP

0000b6  0000              DCW      0x0000
                  |L5.184|
                          DCD      0x40012000
                  |L5.188|
                          DCD      0x40026400
                  |L5.192|
                          DCD      STREAM_OFFSET_TAB
                  |L5.196|
                          DCD      0x40012308
                  |L5.200|
                          DCD      joys

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  STREAM_OFFSET_TAB
000000  10284058          DCB      0x10,0x28,0x40,0x58
000004  7088a0b8          DCB      0x70,0x88,0xa0,0xb8
                  aRCC_PLLSAIDIVRPrescTable
000008  02040810          DCB      0x02,0x04,0x08,0x10
                  OFFSET_TAB_CCMRx
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  040404            DCB      0x04,0x04,0x04
                  SHIFT_TAB_OCxx
000013  00                DCB      0x00
000014  00080000          DCB      0x00,0x08,0x00,0x00
000018  0008              DCB      0x00,0x08
                  SHIFT_TAB_ICxx
00001a  0000              DCB      0x00,0x00
00001c  08000000          DCB      0x08,0x00,0x00,0x00
000020  08                DCB      0x08
                  SHIFT_TAB_CCxP
000021  000204            DCB      0x00,0x02,0x04
000024  06080a0c          DCB      0x06,0x08,0x0a,0x0c
                  SHIFT_TAB_OISx
000028  00010203          DCB      0x00,0x01,0x02,0x03
00002c  040506            DCB      0x04,0x05,0x06

                          AREA ||.data||, DATA, ALIGN=1

                  joys
000000  00000000          DCW      0x0000,0x0000
000004  00000000          DCW      0x0000,0x0000

;*** Start embedded assembler ***

#line 1 "../Src/adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_7cc13d26____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___5_adc_c_7cc13d26____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_7cc13d26____REVSH|
#line 402
|__asm___5_adc_c_7cc13d26____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_7cc13d26____RRX|
#line 587
|__asm___5_adc_c_7cc13d26____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
