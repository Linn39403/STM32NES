; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal.o --depend=stm32nes\stm32f4xx_hal.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c]
                          THUMB

                          AREA ||i.HAL_DBGMCU_DisableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGSleepMode PROC
;;;480      */
;;;481    void HAL_DBGMCU_DisableDBGSleepMode(void)
000000  4803              LDR      r0,|L1.16|
;;;482    {
;;;483      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200001          BIC      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  6048              STR      r0,[r1,#4]
;;;484    }
00000c  4770              BX       lr
;;;485    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStandbyMode PROC
;;;516      */
;;;517    void HAL_DBGMCU_DisableDBGStandbyMode(void)
000000  4803              LDR      r0,|L2.16|
;;;518    {
;;;519      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0200004          BIC      r0,r0,#4
000008  4901              LDR      r1,|L2.16|
00000a  6048              STR      r0,[r1,#4]
;;;520    }
00000c  4770              BX       lr
;;;521    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_DisableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_DisableDBGStopMode PROC
;;;498      */
;;;499    void HAL_DBGMCU_DisableDBGStopMode(void)
000000  4803              LDR      r0,|L3.16|
;;;500    {
;;;501      CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0200002          BIC      r0,r0,#2
000008  4901              LDR      r1,|L3.16|
00000a  6048              STR      r0,[r1,#4]
;;;502    }
00000c  4770              BX       lr
;;;503    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGSleepMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGSleepMode PROC
;;;471      */
;;;472    void HAL_DBGMCU_EnableDBGSleepMode(void)
000000  4803              LDR      r0,|L4.16|
;;;473    {
;;;474      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L4.16|
00000a  6048              STR      r0,[r1,#4]
;;;475    }
00000c  4770              BX       lr
;;;476    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStandbyMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStandbyMode PROC
;;;507      */
;;;508    void HAL_DBGMCU_EnableDBGStandbyMode(void)
000000  4803              LDR      r0,|L5.16|
;;;509    {
;;;510      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
000002  6840              LDR      r0,[r0,#4]
000004  f0400004          ORR      r0,r0,#4
000008  4901              LDR      r1,|L5.16|
00000a  6048              STR      r0,[r1,#4]
;;;511    }
00000c  4770              BX       lr
;;;512    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DBGMCU_EnableDBGStopMode||, CODE, READONLY, ALIGN=2

                  HAL_DBGMCU_EnableDBGStopMode PROC
;;;489      */
;;;490    void HAL_DBGMCU_EnableDBGStopMode(void)
000000  4803              LDR      r0,|L6.16|
;;;491    {
;;;492      SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
000002  6840              LDR      r0,[r0,#4]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L6.16|
00000a  6048              STR      r0,[r1,#4]
;;;493    }
00000c  4770              BX       lr
;;;494    
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      0xe0042000

                          AREA ||i.HAL_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DeInit PROC
;;;205      */
;;;206    HAL_StatusTypeDef HAL_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;207    {
;;;208      /* Reset of all peripherals */
;;;209      __HAL_RCC_APB1_FORCE_RESET();
000002  f04f30ff          MOV      r0,#0xffffffff
000006  490e              LDR      r1,|L7.64|
000008  6008              STR      r0,[r1,#0]
;;;210      __HAL_RCC_APB1_RELEASE_RESET();
00000a  2000              MOVS     r0,#0
00000c  6008              STR      r0,[r1,#0]
;;;211    
;;;212      __HAL_RCC_APB2_FORCE_RESET();
00000e  1e40              SUBS     r0,r0,#1
000010  1d09              ADDS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;213      __HAL_RCC_APB2_RELEASE_RESET();
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]
;;;214    
;;;215      __HAL_RCC_AHB1_FORCE_RESET();
000018  1e40              SUBS     r0,r0,#1
00001a  4909              LDR      r1,|L7.64|
00001c  3910              SUBS     r1,r1,#0x10
00001e  6008              STR      r0,[r1,#0]
;;;216      __HAL_RCC_AHB1_RELEASE_RESET();
000020  2000              MOVS     r0,#0
000022  6008              STR      r0,[r1,#0]
;;;217    
;;;218      __HAL_RCC_AHB2_FORCE_RESET();
000024  1e40              SUBS     r0,r0,#1
000026  1d09              ADDS     r1,r1,#4
000028  6008              STR      r0,[r1,#0]
;;;219      __HAL_RCC_AHB2_RELEASE_RESET();
00002a  2000              MOVS     r0,#0
00002c  6008              STR      r0,[r1,#0]
;;;220    
;;;221      __HAL_RCC_AHB3_FORCE_RESET();
00002e  1e40              SUBS     r0,r0,#1
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;222      __HAL_RCC_AHB3_RELEASE_RESET();
000034  2000              MOVS     r0,#0
000036  6008              STR      r0,[r1,#0]
;;;223    
;;;224      /* De-Init the low level hardware */
;;;225      HAL_MspDeInit();
000038  f7fffffe          BL       HAL_MspDeInit
;;;226        
;;;227      /* Return function status */
;;;228      return HAL_OK;
00003c  2000              MOVS     r0,#0
;;;229    }
00003e  bd10              POP      {r4,pc}
;;;230    
                          ENDP

                  |L7.64|
                          DCD      0x40023820

                          AREA ||i.HAL_Delay||, CODE, READONLY, ALIGN=2

                  HAL_Delay PROC
;;;392      */
;;;393    __weak void HAL_Delay(uint32_t Delay)
000000  b570              PUSH     {r4-r6,lr}
;;;394    {
000002  4604              MOV      r4,r0
;;;395      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4606              MOV      r6,r0
;;;396      uint32_t wait = Delay;
00000a  4625              MOV      r5,r4
;;;397    
;;;398      /* Add a freq to guarantee minimum wait */
;;;399      if (wait < HAL_MAX_DELAY)
00000c  1c68              ADDS     r0,r5,#1
00000e  b110              CBZ      r0,|L8.22|
;;;400      {
;;;401        wait += (uint32_t)(uwTickFreq);
000010  4804              LDR      r0,|L8.36|
000012  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000014  4405              ADD      r5,r5,r0
                  |L8.22|
;;;402      }
;;;403    
;;;404      while((HAL_GetTick() - tickstart) < wait)
000016  bf00              NOP      
                  |L8.24|
000018  f7fffffe          BL       HAL_GetTick
00001c  1b80              SUBS     r0,r0,r6
00001e  42a8              CMP      r0,r5
000020  d3fa              BCC      |L8.24|
;;;405      {
;;;406      }
;;;407    }
000022  bd70              POP      {r4-r6,pc}
;;;408    
                          ENDP

                  |L8.36|
                          DCD      uwTickFreq

                          AREA ||i.HAL_DisableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_DisableCompensationCell PROC
;;;538      */
;;;539    void HAL_DisableCompensationCell(void)
000000  2000              MOVS     r0,#0
;;;540    {
;;;541      *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L9.8|
000004  6008              STR      r0,[r1,#0]
;;;542    }
000006  4770              BX       lr
;;;543    
                          ENDP

                  |L9.8|
                          DCD      0x42270400

                          AREA ||i.HAL_DisableMemorySwappingBank||, CODE, READONLY, ALIGN=2

                  HAL_DisableMemorySwappingBank PROC
;;;582      */
;;;583    void HAL_DisableMemorySwappingBank(void)
000000  2000              MOVS     r0,#0
;;;584    {
;;;585      *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L10.8|
000004  6208              STR      r0,[r1,#0x20]
;;;586    }
000006  4770              BX       lr
;;;587    #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */
                          ENDP

                  |L10.8|
                          DCD      0x42270000

                          AREA ||i.HAL_EnableCompensationCell||, CODE, READONLY, ALIGN=2

                  HAL_EnableCompensationCell PROC
;;;527      */
;;;528    void HAL_EnableCompensationCell(void)
000000  2001              MOVS     r0,#1
;;;529    {
;;;530      *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L11.8|
000004  6008              STR      r0,[r1,#0]
;;;531    }
000006  4770              BX       lr
;;;532    
                          ENDP

                  |L11.8|
                          DCD      0x42270400

                          AREA ||i.HAL_EnableMemorySwappingBank||, CODE, READONLY, ALIGN=2

                  HAL_EnableMemorySwappingBank PROC
;;;567      */
;;;568    void HAL_EnableMemorySwappingBank(void)
000000  2001              MOVS     r0,#1
;;;569    {
;;;570      *(__IO uint32_t *)UFB_MODE_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L12.8|
000004  6208              STR      r0,[r1,#0x20]
;;;571    }
000006  4770              BX       lr
;;;572    
                          ENDP

                  |L12.8|
                          DCD      0x42270000

                          AREA ||i.HAL_GetDEVID||, CODE, READONLY, ALIGN=2

                  HAL_GetDEVID PROC
;;;462      */
;;;463    uint32_t HAL_GetDEVID(void)
000000  4802              LDR      r0,|L13.12|
;;;464    {
;;;465      return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;466    }
000008  4770              BX       lr
;;;467    
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetHalVersion||, CODE, READONLY, ALIGN=2

                  HAL_GetHalVersion PROC
;;;444      */
;;;445    uint32_t HAL_GetHalVersion(void)
000000  4800              LDR      r0,|L14.4|
;;;446    {
;;;447      return __STM32F4xx_HAL_VERSION;
;;;448    }
000002  4770              BX       lr
;;;449    
                          ENDP

                  |L14.4|
                          DCD      0x01070400

                          AREA ||i.HAL_GetREVID||, CODE, READONLY, ALIGN=2

                  HAL_GetREVID PROC
;;;453      */
;;;454    uint32_t HAL_GetREVID(void)
000000  4801              LDR      r0,|L15.8|
;;;455    {
;;;456      return((DBGMCU->IDCODE) >> 16U);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;457    }
000006  4770              BX       lr
;;;458    
                          ENDP

                  |L15.8|
                          DCD      0xe0042000

                          AREA ||i.HAL_GetTick||, CODE, READONLY, ALIGN=2

                  HAL_GetTick PROC
;;;338      */
;;;339    __weak uint32_t HAL_GetTick(void)
000000  4801              LDR      r0,|L16.8|
;;;340    {
;;;341      return uwTick;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
;;;342    }
000004  4770              BX       lr
;;;343    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      uwTick

                          AREA ||i.HAL_GetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_GetTickFreq PROC
;;;376      */
;;;377    HAL_TickFreqTypeDef HAL_GetTickFreq(void)
000000  4801              LDR      r0,|L17.8|
;;;378    {
;;;379      return uwTickFreq;
000002  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
;;;380    }
000004  4770              BX       lr
;;;381    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      uwTickFreq

                          AREA ||i.HAL_GetTickPrio||, CODE, READONLY, ALIGN=2

                  HAL_GetTickPrio PROC
;;;347      */
;;;348    uint32_t HAL_GetTickPrio(void)
000000  4801              LDR      r0,|L18.8|
;;;349    {
;;;350      return uwTickPrio;
000002  6800              LDR      r0,[r0,#0]  ; uwTickPrio
;;;351    }
000004  4770              BX       lr
;;;352    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      uwTickPrio

                          AREA ||i.HAL_GetUID||, CODE, READONLY, ALIGN=2

                  HAL_GetUID PROC
;;;548      */
;;;549    void HAL_GetUID(uint32_t *UID)
000000  4905              LDR      r1,|L19.24|
;;;550    {
;;;551      UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
000002  6809              LDR      r1,[r1,#0]
000004  6001              STR      r1,[r0,#0]
;;;552      UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
000006  4904              LDR      r1,|L19.24|
000008  1d09              ADDS     r1,r1,#4
00000a  6809              LDR      r1,[r1,#0]
00000c  6041              STR      r1,[r0,#4]
;;;553      UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
00000e  4902              LDR      r1,|L19.24|
000010  3108              ADDS     r1,r1,#8
000012  6809              LDR      r1,[r1,#0]
000014  6081              STR      r1,[r0,#8]
;;;554    }
000016  4770              BX       lr
;;;555    
                          ENDP

                  |L19.24|
                          DCD      0x1fff7a10

                          AREA ||i.HAL_IncTick||, CODE, READONLY, ALIGN=2

                  HAL_IncTick PROC
;;;327      */
;;;328    __weak void HAL_IncTick(void)
000000  4803              LDR      r0,|L20.16|
;;;329    {
;;;330      uwTick += uwTickFreq;
000002  6800              LDR      r0,[r0,#0]  ; uwTick
000004  4903              LDR      r1,|L20.20|
000006  7809              LDRB     r1,[r1,#0]  ; uwTickFreq
000008  4408              ADD      r0,r0,r1
00000a  4901              LDR      r1,|L20.16|
00000c  6008              STR      r0,[r1,#0]  ; uwTick
;;;331    }
00000e  4770              BX       lr
;;;332    
                          ENDP

                  |L20.16|
                          DCD      uwTick
                  |L20.20|
                          DCD      uwTickFreq

                          AREA ||i.HAL_Init||, CODE, READONLY, ALIGN=2

                  HAL_Init PROC
;;;172      */
;;;173    HAL_StatusTypeDef HAL_Init(void)
000000  b510              PUSH     {r4,lr}
;;;174    {
;;;175      /* Configure Flash prefetch, Instruction cache, Data cache */ 
;;;176    #if (INSTRUCTION_CACHE_ENABLE != 0U)
;;;177      __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
000002  480d              LDR      r0,|L21.56|
000004  6800              LDR      r0,[r0,#0]
000006  f4407000          ORR      r0,r0,#0x200
00000a  490b              LDR      r1,|L21.56|
00000c  6008              STR      r0,[r1,#0]
;;;178    #endif /* INSTRUCTION_CACHE_ENABLE */
;;;179    
;;;180    #if (DATA_CACHE_ENABLE != 0U)
;;;181      __HAL_FLASH_DATA_CACHE_ENABLE();
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  f4406080          ORR      r0,r0,#0x400
000016  6008              STR      r0,[r1,#0]
;;;182    #endif /* DATA_CACHE_ENABLE */
;;;183    
;;;184    #if (PREFETCH_ENABLE != 0U)
;;;185      __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f4407080          ORR      r0,r0,#0x100
000020  6008              STR      r0,[r1,#0]
;;;186    #endif /* PREFETCH_ENABLE */
;;;187    
;;;188      /* Set Interrupt Group Priority */
;;;189      HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
000022  2003              MOVS     r0,#3
000024  f7fffffe          BL       HAL_NVIC_SetPriorityGrouping
;;;190    
;;;191      /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;192      HAL_InitTick(TICK_INT_PRIORITY);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       HAL_InitTick
;;;193    
;;;194      /* Init the low level hardware */
;;;195      HAL_MspInit();
00002e  f7fffffe          BL       HAL_MspInit
;;;196    
;;;197      /* Return function status */
;;;198      return HAL_OK;
000032  2000              MOVS     r0,#0
;;;199    }
000034  bd10              POP      {r4,pc}
;;;200    
                          ENDP

000036  0000              DCW      0x0000
                  |L21.56|
                          DCD      0x40023c00

                          AREA ||i.HAL_InitTick||, CODE, READONLY, ALIGN=2

                  HAL_InitTick PROC
;;;268      */
;;;269    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
000000  b570              PUSH     {r4-r6,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271      /* Configure the SysTick to have interrupt in 1ms time basis*/
;;;272      if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
000004  480e              LDR      r0,|L22.64|
000006  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
000008  f44f717a          MOV      r1,#0x3e8
00000c  fbb1f0f0          UDIV     r0,r1,r0
000010  490c              LDR      r1,|L22.68|
000012  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
000014  fbb1f5f0          UDIV     r5,r1,r0
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       HAL_SYSTICK_Config
00001e  b108              CBZ      r0,|L22.36|
;;;273      {
;;;274        return HAL_ERROR;
000020  2001              MOVS     r0,#1
                  |L22.34|
;;;275      }
;;;276    
;;;277      /* Configure the SysTick IRQ priority */
;;;278      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
;;;279      {
;;;280        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
;;;281        uwTickPrio = TickPriority;
;;;282      }
;;;283      else
;;;284      {
;;;285        return HAL_ERROR;
;;;286      }
;;;287    
;;;288      /* Return function status */
;;;289      return HAL_OK;
;;;290    }
000022  bd70              POP      {r4-r6,pc}
                  |L22.36|
000024  2c10              CMP      r4,#0x10              ;278
000026  d207              BCS      |L22.56|
000028  2200              MOVS     r2,#0                 ;280
00002a  4621              MOV      r1,r4                 ;280
00002c  1e50              SUBS     r0,r2,#1              ;280
00002e  f7fffffe          BL       HAL_NVIC_SetPriority
000032  4805              LDR      r0,|L22.72|
000034  6004              STR      r4,[r0,#0]            ;281  ; uwTickPrio
000036  e001              B        |L22.60|
                  |L22.56|
000038  2001              MOVS     r0,#1                 ;285
00003a  e7f2              B        |L22.34|
                  |L22.60|
00003c  2000              MOVS     r0,#0                 ;289
00003e  e7f0              B        |L22.34|
;;;291    
                          ENDP

                  |L22.64|
                          DCD      uwTickFreq
                  |L22.68|
                          DCD      SystemCoreClock
                  |L22.72|
                          DCD      uwTickPrio

                          AREA ||i.HAL_MspDeInit||, CODE, READONLY, ALIGN=1

                  HAL_MspDeInit PROC
;;;245      */
;;;246    __weak void HAL_MspDeInit(void)
000000  4770              BX       lr
;;;247    {
;;;248      /* NOTE : This function should not be modified, when the callback is needed,
;;;249                the HAL_MspDeInit could be implemented in the user file
;;;250       */ 
;;;251    }
;;;252    
                          ENDP


                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=1

                  HAL_MspInit PROC
;;;234      */
;;;235    __weak void HAL_MspInit(void)
000000  4770              BX       lr
;;;236    {
;;;237      /* NOTE : This function should not be modified, when the callback is needed,
;;;238                the HAL_MspInit could be implemented in the user file
;;;239       */
;;;240    }
;;;241    
                          ENDP


                          AREA ||i.HAL_ResumeTick||, CODE, READONLY, ALIGN=1

                  HAL_ResumeTick PROC
;;;434      */
;;;435    __weak void HAL_ResumeTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;436    {
;;;437      /* Enable SysTick Interrupt */
;;;438      SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0400002          ORR      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;439    }
000010  4770              BX       lr
;;;440    
                          ENDP


                          AREA ||i.HAL_SetTickFreq||, CODE, READONLY, ALIGN=2

                  HAL_SetTickFreq PROC
;;;356      */
;;;357    HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
000000  b570              PUSH     {r4-r6,lr}
;;;358    {
000002  4604              MOV      r4,r0
;;;359      HAL_StatusTypeDef status  = HAL_OK;
000004  2500              MOVS     r5,#0
;;;360      assert_param(IS_TICKFREQ(Freq));
;;;361    
;;;362      if (uwTickFreq != Freq)
000006  4806              LDR      r0,|L26.32|
000008  7800              LDRB     r0,[r0,#0]  ; uwTickFreq
00000a  42a0              CMP      r0,r4
00000c  d006              BEQ      |L26.28|
;;;363      {
;;;364        uwTickFreq = Freq;
00000e  4804              LDR      r0,|L26.32|
000010  7004              STRB     r4,[r0,#0]
;;;365    
;;;366        /* Apply the new tick Freq  */
;;;367        status = HAL_InitTick(uwTickPrio);
000012  4804              LDR      r0,|L26.36|
000014  6800              LDR      r0,[r0,#0]  ; uwTickPrio
000016  f7fffffe          BL       HAL_InitTick
00001a  4605              MOV      r5,r0
                  |L26.28|
;;;368      }
;;;369    
;;;370      return status;
00001c  4628              MOV      r0,r5
;;;371    }
00001e  bd70              POP      {r4-r6,pc}
;;;372    
                          ENDP

                  |L26.32|
                          DCD      uwTickFreq
                  |L26.36|
                          DCD      uwTickPrio

                          AREA ||i.HAL_SuspendTick||, CODE, READONLY, ALIGN=1

                  HAL_SuspendTick PROC
;;;418      */
;;;419    __weak void HAL_SuspendTick(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;420    {
;;;421      /* Disable SysTick Interrupt */
;;;422      SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
000004  6900              LDR      r0,[r0,#0x10]
000006  f0200002          BIC      r0,r0,#2
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;423    }
000010  4770              BX       lr
;;;424    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  uwTick
                          DCD      0x00000000
                  uwTickPrio
                          DCD      0x00000010
                  uwTickFreq
000008  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_hal_c_3da258af____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___15_stm32f4xx_hal_c_3da258af____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_hal_c_3da258af____REVSH|
#line 402
|__asm___15_stm32f4xx_hal_c_3da258af____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_hal_c_3da258af____RRX|
#line 587
|__asm___15_stm32f4xx_hal_c_3da258af____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
