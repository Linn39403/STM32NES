; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_hal_flash_ex.o --depend=stm32nes\stm32f4xx_hal_flash_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O3 -Otime --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_hal_flash_ex.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_Erase_Sector||, CODE, READONLY, ALIGN=2

                  FLASH_Erase_Sector PROC
;;;601      */
;;;602    void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
000000  2200              MOVS     r2,#0
;;;603    {
000002  b151              CBZ      r1,|L1.26|
;;;604      uint32_t tmp_psize = 0U;
;;;605    
;;;606      /* Check the parameters */
;;;607      assert_param(IS_FLASH_SECTOR(Sector));
;;;608      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;609      
;;;610      if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
;;;611      {
;;;612         tmp_psize = FLASH_PSIZE_BYTE;
;;;613      }
;;;614      else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
000004  2901              CMP      r1,#1
;;;615      {
;;;616        tmp_psize = FLASH_PSIZE_HALF_WORD;
000006  bf08              IT       EQ
000008  f44f7280          MOVEQ    r2,#0x100
00000c  d005              BEQ      |L1.26|
;;;617      }
;;;618      else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
00000e  2902              CMP      r1,#2
;;;619      {
;;;620        tmp_psize = FLASH_PSIZE_WORD;
000010  bf0c              ITE      EQ
000012  f44f7200          MOVEQ    r2,#0x200
;;;621      }
;;;622      else
;;;623      {
;;;624        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000016  f44f7240          MOVNE    r2,#0x300
                  |L1.26|
;;;625      }
;;;626    
;;;627      /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
;;;628      if(Sector > FLASH_SECTOR_11) 
00001a  280b              CMP      r0,#0xb
00001c  bf88              IT       HI
00001e  1d00              ADDHI    r0,r0,#4
;;;629      {
;;;630        Sector += 4U;
;;;631      }
;;;632      /* If the previous operation is completed, proceed to erase the sector */
;;;633      CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
000020  490b              LDR      r1,|L1.80|
000022  680b              LDR      r3,[r1,#0]
000024  f4237340          BIC      r3,r3,#0x300
000028  600b              STR      r3,[r1,#0]
;;;634      FLASH->CR |= tmp_psize;
00002a  680b              LDR      r3,[r1,#0]
00002c  431a              ORRS     r2,r2,r3
00002e  600a              STR      r2,[r1,#0]
;;;635      CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
000030  680a              LDR      r2,[r1,#0]
000032  f02202f8          BIC      r2,r2,#0xf8
000036  600a              STR      r2,[r1,#0]
;;;636      FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
000038  680a              LDR      r2,[r1,#0]
00003a  2302              MOVS     r3,#2
00003c  ea4300c0          ORR      r0,r3,r0,LSL #3
000040  4310              ORRS     r0,r0,r2
000042  6008              STR      r0,[r1,#0]
;;;637      FLASH->CR |= FLASH_CR_STRT;
000044  6808              LDR      r0,[r1,#0]
000046  f4403080          ORR      r0,r0,#0x10000
00004a  6008              STR      r0,[r1,#0]
;;;638    }
00004c  4770              BX       lr
;;;639    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40023c10

                          AREA ||i.FLASH_FlushCaches||, CODE, READONLY, ALIGN=2

                  FLASH_FlushCaches PROC
;;;1326     */
;;;1327   void FLASH_FlushCaches(void)
000000  4815              LDR      r0,|L2.88|
;;;1328   {
;;;1329     /* Flush instruction cache  */
;;;1330     if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
000002  6801              LDR      r1,[r0,#0]
000004  f4117f00          TST      r1,#0x200
000008  d00f              BEQ      |L2.42|
;;;1331     {
;;;1332       /* Disable instruction cache  */
;;;1333       __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
00000a  6801              LDR      r1,[r0,#0]
00000c  f4217100          BIC      r1,r1,#0x200
000010  6001              STR      r1,[r0,#0]
;;;1334       /* Reset instruction cache */
;;;1335       __HAL_FLASH_INSTRUCTION_CACHE_RESET();
000012  6801              LDR      r1,[r0,#0]
000014  f4416100          ORR      r1,r1,#0x800
000018  6001              STR      r1,[r0,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  f4216100          BIC      r1,r1,#0x800
000020  6001              STR      r1,[r0,#0]
;;;1336       /* Enable instruction cache */
;;;1337       __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
000022  6801              LDR      r1,[r0,#0]
000024  f4417100          ORR      r1,r1,#0x200
000028  6001              STR      r1,[r0,#0]
                  |L2.42|
;;;1338     }
;;;1339     
;;;1340     /* Flush data cache */
;;;1341     if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
00002a  6801              LDR      r1,[r0,#0]
00002c  f4116f80          TST      r1,#0x400
;;;1342     {
;;;1343       /* Disable data cache  */
;;;1344       __HAL_FLASH_DATA_CACHE_DISABLE();
;;;1345       /* Reset data cache */
;;;1346       __HAL_FLASH_DATA_CACHE_RESET();
;;;1347       /* Enable data cache */
;;;1348       __HAL_FLASH_DATA_CACHE_ENABLE();
;;;1349     }
;;;1350   }
000030  bf08              IT       EQ
000032  4770              BXEQ     lr
000034  6801              LDR      r1,[r0,#0]            ;1344
000036  f4216180          BIC      r1,r1,#0x400          ;1344
00003a  6001              STR      r1,[r0,#0]            ;1344
00003c  6801              LDR      r1,[r0,#0]            ;1346
00003e  f4415180          ORR      r1,r1,#0x1000         ;1346
000042  6001              STR      r1,[r0,#0]            ;1346
000044  6801              LDR      r1,[r0,#0]            ;1346
000046  f4215180          BIC      r1,r1,#0x1000         ;1346
00004a  6001              STR      r1,[r0,#0]            ;1346
00004c  6801              LDR      r1,[r0,#0]            ;1348
00004e  f4416180          ORR      r1,r1,#0x400          ;1348
000052  6001              STR      r1,[r0,#0]            ;1348
000054  4770              BX       lr
;;;1351   
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      0x40023c00

                          AREA ||i.HAL_FLASHEx_AdvOBGetConfig||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_AdvOBGetConfig PROC
;;;445      */
;;;446    void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
000000  4904              LDR      r1,|L3.20|
;;;447    {
;;;448    #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
;;;449        defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
;;;450        defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
;;;451      /*Get Sector*/
;;;452      pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
;;;453    #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
;;;454      /*Get Sector for Bank1*/
;;;455      pAdvOBInit->SectorsBank1 = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000002  8809              LDRH     r1,[r1,#0]
000004  8181              STRH     r1,[r0,#0xc]
;;;456    
;;;457      /*Get Sector for Bank2*/
;;;458      pAdvOBInit->SectorsBank2 = (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
000006  4904              LDR      r1,|L3.24|
000008  8809              LDRH     r1,[r1,#0]
00000a  81c1              STRH     r1,[r0,#0xe]
;;;459    
;;;460      /*Get Boot config OB*/
;;;461      pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
00000c  4903              LDR      r1,|L3.28|
00000e  7809              LDRB     r1,[r1,#0]
000010  7401              STRB     r1,[r0,#0x10]
;;;462    #endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
;;;463              STM32F413xx || STM32F423xx */
;;;464    }
000012  4770              BX       lr
;;;465    
                          ENDP

                  |L3.20|
                          DCD      0x40023c16
                  |L3.24|
                          DCD      0x40023c1a
                  |L3.28|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASHEx_AdvOBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_AdvOBProgram PROC
;;;389      */
;;;390    HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram (FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;391    {
000004  4604              MOV      r4,r0
;;;392      HAL_StatusTypeDef status = HAL_ERROR;
000006  2001              MOVS     r0,#1
;;;393      
;;;394      /* Check the parameters */
;;;395      assert_param(IS_OBEX(pAdvOBInit->OptionType));
;;;396    
;;;397      /*Program PCROP option byte*/
;;;398      if(((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
000008  7821              LDRB     r1,[r4,#0]
00000a  f0110f01          TST      r1,#1
00000e  d046              BEQ      |L4.158|
000010  4e2f              LDR      r6,|L4.208|
;;;399      {
;;;400        /* Check the parameters */
;;;401        assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
;;;402        if((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
000012  6860              LDR      r0,[r4,#4]
000014  1d35              ADDS     r5,r6,#4
;;;403        {
;;;404          /*Enable of Write protection on the selected Sector*/
;;;405    #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
;;;406        defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
;;;407        defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
;;;408          status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
;;;409    #else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
;;;410          status = FLASH_OB_EnablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
;;;411    #endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
;;;412              STM32F413xx || STM32F423xx */
;;;413        }
;;;414        else
;;;415        {
;;;416          /*Disable of Write protection on the selected Sector*/
;;;417    #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
;;;418        defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
;;;419        defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
;;;420          status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
;;;421    #else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
;;;422          status = FLASH_OB_DisablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
000016  f8b4900c          LDRH     r9,[r4,#0xc]
00001a  2801              CMP      r0,#1                 ;402
00001c  d008              BEQ      |L4.48|
00001e  f8b4800e          LDRH     r8,[r4,#0xe]
000022  f24c3050          MOV      r0,#0xc350
000026  68a7              LDR      r7,[r4,#8]
000028  f7fffffe          BL       FLASH_WaitForLastOperation
00002c  b320              CBZ      r0,|L4.120|
00002e  e036              B        |L4.158|
                  |L4.48|
000030  89e7              LDRH     r7,[r4,#0xe]          ;410
000032  f24c3050          MOV      r0,#0xc350            ;410
000036  f8d48008          LDR      r8,[r4,#8]            ;410
00003a  f7fffffe          BL       FLASH_WaitForLastOperation
00003e  bb70              CBNZ     r0,|L4.158|
000040  f1b80f01          CMP      r8,#1                 ;410
000044  bf18              IT       NE                    ;410
000046  f1b80f03          CMPNE    r8,#3                 ;410
00004a  d004              BEQ      |L4.86|
00004c  8829              LDRH     r1,[r5,#0]            ;410
00004e  ea410107          ORR      r1,r1,r7              ;410
000052  8029              STRH     r1,[r5,#0]            ;410
000054  e023              B        |L4.158|
                  |L4.86|
000056  8831              LDRH     r1,[r6,#0]            ;410
000058  ea410109          ORR      r1,r1,r9              ;410
00005c  8031              STRH     r1,[r6,#0]            ;410
00005e  f1b80f03          CMP      r8,#3                 ;410
000062  d11c              BNE      |L4.158|
000064  f24c3050          MOV      r0,#0xc350            ;410
000068  f7fffffe          BL       FLASH_WaitForLastOperation
00006c  2800              CMP      r0,#0                 ;410
00006e  bf04              ITT      EQ                    ;410
000070  8829              LDRHEQ   r1,[r5,#0]            ;410
000072  4339              ORREQ    r1,r1,r7              ;410
000074  d113              BNE      |L4.158|
000076  e011              B        |L4.156|
                  |L4.120|
000078  2f01              CMP      r7,#1                 ;410
00007a  bf18              IT       NE                    ;410
00007c  2f03              CMPNE    r7,#3                 ;410
00007e  d10a              BNE      |L4.150|
000080  8831              LDRH     r1,[r6,#0]            ;410
000082  ea210109          BIC      r1,r1,r9              ;410
000086  8031              STRH     r1,[r6,#0]            ;410
000088  2f03              CMP      r7,#3                 ;410
00008a  d108              BNE      |L4.158|
00008c  f24c3050          MOV      r0,#0xc350            ;410
000090  f7fffffe          BL       FLASH_WaitForLastOperation
000094  b918              CBNZ     r0,|L4.158|
                  |L4.150|
000096  8829              LDRH     r1,[r5,#0]            ;410
000098  ea210108          BIC      r1,r1,r8              ;410
                  |L4.156|
00009c  8029              STRH     r1,[r5,#0]            ;410
                  |L4.158|
;;;423    #endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
;;;424              STM32F413xx || STM32F423xx */
;;;425        }
;;;426      }
;;;427       
;;;428    #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;429      /*Program BOOT config option byte*/
;;;430      if(((pAdvOBInit->OptionType) & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
00009e  7821              LDRB     r1,[r4,#0]
0000a0  f0110f02          TST      r1,#2
;;;431      {
;;;432        status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
;;;433      }
;;;434    #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */
;;;435    
;;;436      return status;
;;;437    }
0000a4  bf08              IT       EQ
0000a6  e8bd87f0          POPEQ    {r4-r10,pc}
0000aa  7c24              LDRB     r4,[r4,#0x10]         ;432
0000ac  f24c3050          MOV      r0,#0xc350            ;432
0000b0  f7fffffe          BL       FLASH_WaitForLastOperation
0000b4  2800              CMP      r0,#0                 ;432
0000b6  bf18              IT       NE
0000b8  e8bd87f0          POPNE    {r4-r10,pc}
0000bc  4905              LDR      r1,|L4.212|
0000be  780a              LDRB     r2,[r1,#0]
0000c0  f0220210          BIC      r2,r2,#0x10
0000c4  700a              STRB     r2,[r1,#0]
0000c6  780a              LDRB     r2,[r1,#0]
0000c8  4322              ORRS     r2,r2,r4
0000ca  700a              STRB     r2,[r1,#0]
0000cc  e8bd87f0          POP      {r4-r10,pc}
;;;438    
                          ENDP

                  |L4.208|
                          DCD      0x40023c16
                  |L4.212|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;177      */
;;;178    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;179    {
;;;180      HAL_StatusTypeDef status = HAL_ERROR;
;;;181      uint32_t index = 0U;
;;;182      
;;;183      /* Process Locked */
;;;184      __HAL_LOCK(&pFlash);
000004  4f58              LDR      r7,|L5.360|
000006  4606              MOV      r6,r0                 ;179
000008  4688              MOV      r8,r1                 ;179
00000a  7e38              LDRB     r0,[r7,#0x18]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  bf04              ITT      EQ
000010  2002              MOVEQ    r0,#2
;;;185    
;;;186      /* Check the parameters */
;;;187      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;188    
;;;189      /* Wait for last operation to be completed */
;;;190      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;191    
;;;192      if(status == HAL_OK)
;;;193      {
;;;194        /*Initialization of SectorError variable*/
;;;195        *SectorError = 0xFFFFFFFFU;
;;;196        
;;;197        if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;198        {
;;;199          /*Mass erase to be done*/
;;;200          FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
;;;201    
;;;202          /* Wait for last operation to be completed */
;;;203          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;204          
;;;205          /* if the erase operation is completed, disable the MER Bit */
;;;206          FLASH->CR &= (~FLASH_MER_BIT);
;;;207        }
;;;208        else
;;;209        {
;;;210          /* Check the parameters */
;;;211          assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;212    
;;;213          /* Erase by sector by sector to be done*/
;;;214          for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
;;;215          {
;;;216            FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
;;;217    
;;;218            /* Wait for last operation to be completed */
;;;219            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;220            
;;;221            /* If the erase operation is completed, disable the SER and SNB Bits */
;;;222            CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
;;;223    
;;;224            if(status != HAL_OK) 
;;;225            {
;;;226              /* In case of error, stop erase procedure and return the faulty sector*/
;;;227              *SectorError = index;
;;;228              break;
;;;229            }
;;;230          }
;;;231        }
;;;232        /* Flush the caches to be sure of the data consistency */
;;;233        FLASH_FlushCaches();    
;;;234      }
;;;235    
;;;236      /* Process Unlocked */
;;;237      __HAL_UNLOCK(&pFlash);
;;;238    
;;;239      return status;
;;;240    }
000012  e8bd87f0          POPEQ    {r4-r10,pc}
000016  2001              MOVS     r0,#1                 ;184
000018  7638              STRB     r0,[r7,#0x18]         ;184
00001a  f24c3050          MOV      r0,#0xc350            ;190
00001e  f7fffffe          BL       FLASH_WaitForLastOperation
000022  2800              CMP      r0,#0                 ;192
000024  d17e              BNE      |L5.292|
000026  1e41              SUBS     r1,r0,#1              ;195
000028  f8c81000          STR      r1,[r8,#0]            ;197
00002c  6831              LDR      r1,[r6,#0]            ;197
00002e  4c4f              LDR      r4,|L5.364|
000030  2901              CMP      r1,#1                 ;197
000032  d03c              BEQ      |L5.174|
000034  e9d65102          LDRD     r5,r1,[r6,#8]         ;197
000038  4429              ADD      r1,r1,r5              ;214
00003a  42a9              CMP      r1,r5                 ;214
00003c  bf88              IT       HI                    ;184
00003e  f04f0902          MOVHI    r9,#2                 ;184
000042  d962              BLS      |L5.266|
                  |L5.68|
000044  7c31              LDRB     r1,[r6,#0x10]         ;216
000046  4628              MOV      r0,r5                 ;216
000048  f01102ff          ANDS     r2,r1,#0xff           ;216
00004c  f04f0100          MOV      r1,#0                 ;216
000050  d00a              BEQ      |L5.104|
000052  2a01              CMP      r2,#1                 ;216
000054  bf08              IT       EQ                    ;216
000056  f44f7180          MOVEQ    r1,#0x100             ;216
00005a  d005              BEQ      |L5.104|
00005c  2a02              CMP      r2,#2                 ;216
00005e  bf0c              ITE      EQ                    ;216
000060  f44f7100          MOVEQ    r1,#0x200             ;216
000064  f44f7140          MOVNE    r1,#0x300             ;216
                  |L5.104|
000068  280b              CMP      r0,#0xb               ;216
00006a  bf88              IT       HI                    ;216
00006c  1d28              ADDHI    r0,r5,#4              ;216
00006e  6822              LDR      r2,[r4,#0]            ;216
000070  f4227240          BIC      r2,r2,#0x300          ;216
000074  6022              STR      r2,[r4,#0]            ;216
000076  6822              LDR      r2,[r4,#0]            ;216
000078  4311              ORRS     r1,r1,r2              ;216
00007a  6021              STR      r1,[r4,#0]            ;216
00007c  6821              LDR      r1,[r4,#0]            ;216
00007e  f02101f8          BIC      r1,r1,#0xf8           ;216
000082  6021              STR      r1,[r4,#0]            ;216
000084  6821              LDR      r1,[r4,#0]            ;216
000086  ea4900c0          ORR      r0,r9,r0,LSL #3       ;216
00008a  4308              ORRS     r0,r0,r1              ;216
00008c  6020              STR      r0,[r4,#0]            ;216
00008e  6820              LDR      r0,[r4,#0]            ;216
000090  f4403080          ORR      r0,r0,#0x10000        ;216
000094  6020              STR      r0,[r4,#0]            ;216
000096  f24c3050          MOV      r0,#0xc350            ;219
00009a  f7fffffe          BL       FLASH_WaitForLastOperation
00009e  6821              LDR      r1,[r4,#0]            ;222
0000a0  f02101fa          BIC      r1,r1,#0xfa           ;222
0000a4  6021              STR      r1,[r4,#0]            ;222
0000a6  b350              CBZ      r0,|L5.254|
0000a8  f8c85000          STR      r5,[r8,#0]            ;228
0000ac  e02d              B        |L5.266|
                  |L5.174|
0000ae  7c31              LDRB     r1,[r6,#0x10]         ;200
0000b0  6870              LDR      r0,[r6,#4]            ;200
0000b2  6822              LDR      r2,[r4,#0]            ;200
0000b4  f4227240          BIC      r2,r2,#0x300          ;200
0000b8  6022              STR      r2,[r4,#0]            ;200
0000ba  2803              CMP      r0,#3                 ;200
0000bc  d019              BEQ      |L5.242|
0000be  2801              CMP      r0,#1                 ;200
0000c0  6820              LDR      r0,[r4,#0]            ;200
0000c2  bf0c              ITE      EQ                    ;200
0000c4  f0400004          ORREQ    r0,r0,#4              ;200
0000c8  f4404000          ORRNE    r0,r0,#0x8000         ;200
0000cc  6020              STR      r0,[r4,#0]            ;200
                  |L5.206|
0000ce  6820              LDR      r0,[r4,#0]            ;200
0000d0  f44f3280          MOV      r2,#0x10000           ;200
0000d4  ea422101          ORR      r1,r2,r1,LSL #8       ;200
0000d8  4308              ORRS     r0,r0,r1              ;200
0000da  6020              STR      r0,[r4,#0]            ;200
0000dc  f24c3050          MOV      r0,#0xc350            ;203
0000e0  f7fffffe          BL       FLASH_WaitForLastOperation
0000e4  6821              LDR      r1,[r4,#0]            ;206
0000e6  f0210104          BIC      r1,r1,#4              ;206
0000ea  f4214100          BIC      r1,r1,#0x8000         ;206
0000ee  6021              STR      r1,[r4,#0]            ;206
0000f0  e00b              B        |L5.266|
                  |L5.242|
0000f2  6820              LDR      r0,[r4,#0]            ;206
0000f4  f2480204          MOV      r2,#0x8004            ;206
0000f8  4310              ORRS     r0,r0,r2              ;206
0000fa  6020              STR      r0,[r4,#0]            ;206
0000fc  e7e7              B        |L5.206|
                  |L5.254|
0000fe  e9d62102          LDRD     r2,r1,[r6,#8]         ;206
000102  4411              ADD      r1,r1,r2              ;228
000104  1c6d              ADDS     r5,r5,#1              ;228
000106  42a9              CMP      r1,r5                 ;228
000108  d89c              BHI      |L5.68|
                  |L5.266|
00010a  4919              LDR      r1,|L5.368|
00010c  680a              LDR      r2,[r1,#0]            ;228
00010e  f4127f00          TST      r2,#0x200             ;228
000112  d011              BEQ      |L5.312|
000114  680a              LDR      r2,[r1,#0]            ;228
000116  f4227200          BIC      r2,r2,#0x200          ;228
00011a  600a              STR      r2,[r1,#0]            ;228
00011c  680a              LDR      r2,[r1,#0]            ;228
00011e  f4426200          ORR      r2,r2,#0x800          ;228
000122  e000              B        |L5.294|
                  |L5.292|
000124  e01c              B        |L5.352|
                  |L5.294|
000126  600a              STR      r2,[r1,#0]            ;228
000128  680a              LDR      r2,[r1,#0]            ;228
00012a  f4226200          BIC      r2,r2,#0x800          ;228
00012e  600a              STR      r2,[r1,#0]            ;228
000130  680a              LDR      r2,[r1,#0]            ;228
000132  f4427200          ORR      r2,r2,#0x200          ;228
000136  600a              STR      r2,[r1,#0]            ;228
                  |L5.312|
000138  680a              LDR      r2,[r1,#0]            ;228
00013a  f4126f80          TST      r2,#0x400             ;228
00013e  d00f              BEQ      |L5.352|
000140  680a              LDR      r2,[r1,#0]            ;228
000142  f4226280          BIC      r2,r2,#0x400          ;228
000146  600a              STR      r2,[r1,#0]            ;228
000148  680a              LDR      r2,[r1,#0]            ;228
00014a  f4425280          ORR      r2,r2,#0x1000         ;228
00014e  600a              STR      r2,[r1,#0]            ;228
000150  680a              LDR      r2,[r1,#0]            ;228
000152  f4225280          BIC      r2,r2,#0x1000         ;228
000156  600a              STR      r2,[r1,#0]            ;228
000158  680a              LDR      r2,[r1,#0]            ;228
00015a  f4426280          ORR      r2,r2,#0x400          ;228
00015e  600a              STR      r2,[r1,#0]            ;228
                  |L5.352|
000160  2100              MOVS     r1,#0                 ;237
000162  7639              STRB     r1,[r7,#0x18]         ;237
000164  e8bd87f0          POP      {r4-r10,pc}
;;;241    
                          ENDP

                  |L5.360|
                          DCD      pFlash
                  |L5.364|
                          DCD      0x40023c10
                  |L5.368|
                          DCD      0x40023c00

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;248      */
;;;249    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  4a36              LDR      r2,|L6.220|
;;;250    {
;;;251      HAL_StatusTypeDef status = HAL_OK;
000002  f04f0c00          MOV      r12,#0
;;;252    
;;;253      /* Process Locked */
;;;254      __HAL_LOCK(&pFlash);
000006  7e11              LDRB     r1,[r2,#0x18]  ; pFlash
000008  2901              CMP      r1,#1
00000a  bf04              ITT      EQ
00000c  2002              MOVEQ    r0,#2
;;;255    
;;;256      /* Check the parameters */
;;;257      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;258    
;;;259      /* Enable End of FLASH Operation interrupt */
;;;260      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
;;;261      
;;;262      /* Enable Error source interrupt */
;;;263      __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
;;;264      
;;;265      /* Clear pending flags (if any) */  
;;;266      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
;;;267                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
;;;268      
;;;269      if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;270      {
;;;271        /*Mass erase to be done*/
;;;272        pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
;;;273        pFlash.Bank = pEraseInit->Banks;
;;;274        FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
;;;275      }
;;;276      else
;;;277      {
;;;278        /* Erase by sector to be done*/
;;;279    
;;;280        /* Check the parameters */
;;;281        assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
;;;282    
;;;283        pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
;;;284        pFlash.NbSectorsToErase = pEraseInit->NbSectors;
;;;285        pFlash.Sector = pEraseInit->Sector;
;;;286        pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
;;;287    
;;;288        /*Erase 1st sector and wait for IT*/
;;;289        FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
;;;290      }
;;;291    
;;;292      return status;
;;;293    }
00000e  4770              BXEQ     lr
000010  b430              PUSH     {r4,r5}               ;250
000012  2301              MOVS     r3,#1                 ;254
000014  4932              LDR      r1,|L6.224|
000016  7613              STRB     r3,[r2,#0x18]         ;254
000018  680c              LDR      r4,[r1,#0]            ;260
00001a  f0447480          ORR      r4,r4,#0x1000000      ;260
00001e  600c              STR      r4,[r1,#0]            ;260
000020  680c              LDR      r4,[r1,#0]            ;263
000022  f0447400          ORR      r4,r4,#0x2000000      ;263
000026  600c              STR      r4,[r1,#0]            ;263
000028  24f3              MOVS     r4,#0xf3              ;266
00002a  1f0d              SUBS     r5,r1,#4              ;266
00002c  602c              STR      r4,[r5,#0]            ;266
00002e  6805              LDR      r5,[r0,#0]            ;269
000030  2402              MOVS     r4,#2                 ;254
000032  2d01              CMP      r5,#1                 ;269
000034  d032              BEQ      |L6.156|
000036  7013              STRB     r3,[r2,#0]            ;283
000038  68c3              LDR      r3,[r0,#0xc]          ;284
00003a  6053              STR      r3,[r2,#4]            ;284  ; pFlash
00003c  6883              LDR      r3,[r0,#8]            ;285
00003e  60d3              STR      r3,[r2,#0xc]          ;285  ; pFlash
000040  7c03              LDRB     r3,[r0,#0x10]         ;286
000042  7213              STRB     r3,[r2,#8]            ;286
000044  6882              LDR      r2,[r0,#8]            ;289
000046  7c00              LDRB     r0,[r0,#0x10]         ;289
000048  f01003ff          ANDS     r3,r0,#0xff           ;289
00004c  f04f0000          MOV      r0,#0                 ;289
000050  d00a              BEQ      |L6.104|
000052  2b01              CMP      r3,#1                 ;289
000054  bf08              IT       EQ                    ;289
000056  f44f7080          MOVEQ    r0,#0x100             ;289
00005a  d005              BEQ      |L6.104|
00005c  2b02              CMP      r3,#2                 ;289
00005e  bf0c              ITE      EQ                    ;289
000060  f44f7000          MOVEQ    r0,#0x200             ;289
000064  f44f7040          MOVNE    r0,#0x300             ;289
                  |L6.104|
000068  2a0b              CMP      r2,#0xb               ;289
00006a  bf88              IT       HI                    ;289
00006c  1d12              ADDHI    r2,r2,#4              ;289
00006e  680b              LDR      r3,[r1,#0]            ;289
000070  f4237340          BIC      r3,r3,#0x300          ;289
000074  600b              STR      r3,[r1,#0]            ;289
000076  680b              LDR      r3,[r1,#0]            ;289
000078  4318              ORRS     r0,r0,r3              ;289
00007a  6008              STR      r0,[r1,#0]            ;289
00007c  6808              LDR      r0,[r1,#0]            ;289
00007e  f02000f8          BIC      r0,r0,#0xf8           ;289
000082  6008              STR      r0,[r1,#0]            ;289
000084  6808              LDR      r0,[r1,#0]            ;289
000086  ea4402c2          ORR      r2,r4,r2,LSL #3       ;289
00008a  4310              ORRS     r0,r0,r2              ;289
00008c  6008              STR      r0,[r1,#0]            ;289
00008e  6808              LDR      r0,[r1,#0]            ;289
000090  f4403080          ORR      r0,r0,#0x10000        ;289
                  |L6.148|
000094  6008              STR      r0,[r1,#0]            ;289
000096  bc30              POP      {r4,r5}
000098  4660              MOV      r0,r12                ;292
00009a  4770              BX       lr
                  |L6.156|
00009c  7014              STRB     r4,[r2,#0]            ;272
00009e  6843              LDR      r3,[r0,#4]            ;273
0000a0  6113              STR      r3,[r2,#0x10]         ;273  ; pFlash
0000a2  7c02              LDRB     r2,[r0,#0x10]         ;274
0000a4  6840              LDR      r0,[r0,#4]            ;274
0000a6  680b              LDR      r3,[r1,#0]            ;274
0000a8  f4237340          BIC      r3,r3,#0x300          ;274
0000ac  600b              STR      r3,[r1,#0]            ;274
0000ae  2803              CMP      r0,#3                 ;274
0000b0  d00e              BEQ      |L6.208|
0000b2  2801              CMP      r0,#1                 ;274
0000b4  6808              LDR      r0,[r1,#0]            ;274
0000b6  bf0c              ITE      EQ                    ;274
0000b8  f0400004          ORREQ    r0,r0,#4              ;274
0000bc  f4404000          ORRNE    r0,r0,#0x8000         ;274
0000c0  6008              STR      r0,[r1,#0]            ;274
                  |L6.194|
0000c2  6808              LDR      r0,[r1,#0]            ;274
0000c4  f44f3380          MOV      r3,#0x10000           ;274
0000c8  ea432202          ORR      r2,r3,r2,LSL #8       ;274
0000cc  4310              ORRS     r0,r0,r2              ;274
0000ce  e7e1              B        |L6.148|
                  |L6.208|
0000d0  6808              LDR      r0,[r1,#0]            ;274
0000d2  f2480304          MOV      r3,#0x8004            ;274
0000d6  4318              ORRS     r0,r0,r3              ;274
0000d8  6008              STR      r0,[r1,#0]            ;274
0000da  e7f2              B        |L6.194|
;;;294    
                          ENDP

                  |L6.220|
                          DCD      pFlash
                  |L6.224|
                          DCD      0x40023c10

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBGetConfig PROC
;;;360      */
;;;361    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  210f              MOVS     r1,#0xf
000002  6001              STR      r1,[r0,#0]
000004  490c              LDR      r1,|L7.56|
000006  8809              LDRH     r1,[r1,#0]
000008  4a0c              LDR      r2,|L7.60|
00000a  6081              STR      r1,[r0,#8]
00000c  21aa              MOVS     r1,#0xaa
00000e  7813              LDRB     r3,[r2,#0]
000010  2bcc              CMP      r3,#0xcc
000012  bf08              IT       EQ
000014  21cc              MOVEQ    r1,#0xcc
;;;362    {
000016  d003              BEQ      |L7.32|
000018  7812              LDRB     r2,[r2,#0]
00001a  2a55              CMP      r2,#0x55
00001c  bf08              IT       EQ
00001e  2155              MOVEQ    r1,#0x55
                  |L7.32|
000020  6101              STR      r1,[r0,#0x10]
000022  4907              LDR      r1,|L7.64|
000024  680a              LDR      r2,[r1,#0]
000026  f00202e0          AND      r2,r2,#0xe0
;;;363      pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
;;;364    
;;;365      /*Get WRP*/
;;;366      pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
;;;367    
;;;368      /*Get RDP Level*/
;;;369      pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
;;;370    
;;;371      /*Get USER*/
;;;372      pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
00002a  7602              STRB     r2,[r0,#0x18]
00002c  7809              LDRB     r1,[r1,#0]
00002e  f001010c          AND      r1,r1,#0xc
;;;373    
;;;374      /*Get BOR Level*/
;;;375      pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
000032  6141              STR      r1,[r0,#0x14]
;;;376    }
000034  4770              BX       lr
;;;377    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      0x40023c16
                  |L7.60|
                          DCD      0x40023c15
                  |L7.64|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;301      */
;;;302    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;303    {
;;;304      HAL_StatusTypeDef status = HAL_ERROR;
;;;305      
;;;306      /* Process Locked */
;;;307      __HAL_LOCK(&pFlash);
000004  f8df815c          LDR      r8,|L8.356|
000008  4604              MOV      r4,r0                 ;303
00000a  2001              MOVS     r0,#1                 ;304
00000c  f8981018          LDRB     r1,[r8,#0x18]  ; pFlash
000010  2901              CMP      r1,#1
000012  bf04              ITT      EQ
000014  2002              MOVEQ    r0,#2
;;;308    
;;;309      /* Check the parameters */
;;;310      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;311    
;;;312      /*Write protection configuration*/
;;;313      if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
;;;314      {
;;;315        assert_param(IS_WRPSTATE(pOBInit->WRPState));
;;;316        if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
;;;317        {
;;;318          /*Enable of Write protection on the selected Sector*/
;;;319          status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
;;;320        }
;;;321        else
;;;322        {
;;;323          /*Disable of Write protection on the selected Sector*/
;;;324          status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
;;;325        }
;;;326      }
;;;327    
;;;328      /*Read protection configuration*/
;;;329      if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
;;;330      {
;;;331        status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
;;;332      }
;;;333    
;;;334      /*USER  configuration*/
;;;335      if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
;;;336      {
;;;337        status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
;;;338                                         pOBInit->USERConfig&OB_STOP_NO_RST,
;;;339                                         pOBInit->USERConfig&OB_STDBY_NO_RST);
;;;340      }
;;;341    
;;;342      /*BOR Level  configuration*/
;;;343      if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
;;;344      {
;;;345        status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
;;;346      }
;;;347    
;;;348      /* Process Unlocked */
;;;349      __HAL_UNLOCK(&pFlash);
;;;350    
;;;351      return status;
;;;352    }
000016  e8bd87f0          POPEQ    {r4-r10,pc}
00001a  2101              MOVS     r1,#1                 ;307
00001c  f8881018          STRB     r1,[r8,#0x18]         ;307
000020  7821              LDRB     r1,[r4,#0]            ;313
000022  f0110f01          TST      r1,#1                 ;313
000026  d063              BEQ      |L8.240|
000028  4d4f              LDR      r5,|L8.360|
00002a  6860              LDR      r0,[r4,#4]            ;316
00002c  1d2e              ADDS     r6,r5,#4              ;316
00002e  e9d47a02          LDRD     r7,r10,[r4,#8]        ;316
000032  f8df9138          LDR      r9,|L8.364|
000036  2801              CMP      r0,#1                 ;316
000038  f24c3050          MOV      r0,#0xc350            ;316
00003c  d003              BEQ      |L8.70|
00003e  f7fffffe          BL       FLASH_WaitForLastOperation
000042  b368              CBZ      r0,|L8.160|
000044  e054              B        |L8.240|
                  |L8.70|
000046  f7fffffe          BL       FLASH_WaitForLastOperation
00004a  2800              CMP      r0,#0                 ;316
00004c  d150              BNE      |L8.240|
00004e  454f              CMP      r7,r9                 ;316
000050  d106              BNE      |L8.96|
000052  f1ba0f01          CMP      r10,#1                ;316
000056  bf18              IT       NE                    ;316
000058  f1ba0f03          CMPNE    r10,#3                ;316
00005c  d106              BNE      |L8.108|
00005e  e00f              B        |L8.128|
                  |L8.96|
000060  f5b75f80          CMP      r7,#0x1000            ;316
000064  bf3c              ITT      CC                    ;316
000066  8829              LDRHCC   r1,[r5,#0]            ;316
000068  43b9              BICCC    r1,r1,r7              ;316
00006a  d328              BCC      |L8.190|
                  |L8.108|
00006c  8831              LDRH     r1,[r6,#0]            ;316
00006e  ea213117          BIC      r1,r1,r7,LSR #12      ;316
000072  8031              STRH     r1,[r6,#0]            ;316
000074  454f              CMP      r7,r9                 ;316
000076  d13b              BNE      |L8.240|
                  |L8.120|
000078  f1ba0f03          CMP      r10,#3                ;316
00007c  d138              BNE      |L8.240|
00007e  e004              B        |L8.138|
                  |L8.128|
000080  8829              LDRH     r1,[r5,#0]            ;316
000082  ea213117          BIC      r1,r1,r7,LSR #12      ;316
000086  8029              STRH     r1,[r5,#0]            ;316
000088  e7f6              B        |L8.120|
                  |L8.138|
00008a  f24c3050          MOV      r0,#0xc350            ;316
00008e  f7fffffe          BL       FLASH_WaitForLastOperation
000092  2800              CMP      r0,#0                 ;316
000094  bf04              ITT      EQ                    ;316
000096  8831              LDRHEQ   r1,[r6,#0]            ;316
000098  ea213117          BICEQ    r1,r1,r7,LSR #12      ;316
00009c  d128              BNE      |L8.240|
00009e  e026              B        |L8.238|
                  |L8.160|
0000a0  454f              CMP      r7,r9                 ;316
0000a2  d106              BNE      |L8.178|
0000a4  f1ba0f01          CMP      r10,#1                ;316
0000a8  bf18              IT       NE                    ;316
0000aa  f1ba0f03          CMPNE    r10,#3                ;316
0000ae  d10d              BNE      |L8.204|
0000b0  e007              B        |L8.194|
                  |L8.178|
0000b2  f5b75f80          CMP      r7,#0x1000            ;316
0000b6  bf3c              ITT      CC                    ;316
0000b8  8829              LDRHCC   r1,[r5,#0]            ;316
0000ba  4339              ORRCC    r1,r1,r7              ;316
0000bc  d206              BCS      |L8.204|
                  |L8.190|
0000be  8029              STRH     r1,[r5,#0]            ;316
0000c0  e016              B        |L8.240|
                  |L8.194|
0000c2  8829              LDRH     r1,[r5,#0]            ;316
0000c4  ea413117          ORR      r1,r1,r7,LSR #12      ;316
0000c8  8029              STRH     r1,[r5,#0]            ;316
0000ca  e005              B        |L8.216|
                  |L8.204|
0000cc  8831              LDRH     r1,[r6,#0]            ;316
0000ce  ea413117          ORR      r1,r1,r7,LSR #12      ;316
0000d2  8031              STRH     r1,[r6,#0]            ;316
0000d4  454f              CMP      r7,r9                 ;316
0000d6  d10b              BNE      |L8.240|
                  |L8.216|
0000d8  f1ba0f03          CMP      r10,#3                ;316
0000dc  d108              BNE      |L8.240|
0000de  f24c3050          MOV      r0,#0xc350            ;316
0000e2  f7fffffe          BL       FLASH_WaitForLastOperation
0000e6  b918              CBNZ     r0,|L8.240|
0000e8  8831              LDRH     r1,[r6,#0]            ;316
0000ea  ea413117          ORR      r1,r1,r7,LSR #12      ;316
                  |L8.238|
0000ee  8031              STRH     r1,[r6,#0]            ;316
                  |L8.240|
0000f0  7821              LDRB     r1,[r4,#0]            ;329
0000f2  f0110f02          TST      r1,#2                 ;329
0000f6  d008              BEQ      |L8.266|
0000f8  7c25              LDRB     r5,[r4,#0x10]         ;331
0000fa  f24c3050          MOV      r0,#0xc350            ;331
0000fe  f7fffffe          BL       FLASH_WaitForLastOperation
000102  2800              CMP      r0,#0                 ;331
000104  bf04              ITT      EQ                    ;331
000106  491a              LDREQ    r1,|L8.368|
000108  700d              STRBEQ   r5,[r1,#0]            ;331
                  |L8.266|
00010a  7821              LDRB     r1,[r4,#0]            ;335
00010c  4d19              LDR      r5,|L8.372|
00010e  f0110f04          TST      r1,#4                 ;335
000112  d013              BEQ      |L8.316|
000114  7e20              LDRB     r0,[r4,#0x18]         ;337
000116  f0000920          AND      r9,r0,#0x20           ;337
00011a  f0000740          AND      r7,r0,#0x40           ;337
00011e  f0000680          AND      r6,r0,#0x80           ;337
000122  f24c3050          MOV      r0,#0xc350            ;337
000126  f7fffffe          BL       FLASH_WaitForLastOperation
00012a  b938              CBNZ     r0,|L8.316|
00012c  7829              LDRB     r1,[r5,#0]            ;337
00012e  f001011f          AND      r1,r1,#0x1f           ;337
000132  4339              ORRS     r1,r1,r7              ;337
000134  4331              ORRS     r1,r1,r6              ;337
000136  ea410109          ORR      r1,r1,r9              ;337
00013a  7029              STRB     r1,[r5,#0]            ;337
                  |L8.316|
00013c  7821              LDRB     r1,[r4,#0]            ;343
00013e  f0110f08          TST      r1,#8                 ;343
000142  f04f0100          MOV      r1,#0                 ;343
000146  d008              BEQ      |L8.346|
000148  7d20              LDRB     r0,[r4,#0x14]         ;345
00014a  782a              LDRB     r2,[r5,#0]            ;345
00014c  f022020c          BIC      r2,r2,#0xc            ;345
000150  702a              STRB     r2,[r5,#0]            ;345
000152  782a              LDRB     r2,[r5,#0]            ;345
000154  4310              ORRS     r0,r0,r2              ;345
000156  7028              STRB     r0,[r5,#0]            ;345
000158  4608              MOV      r0,r1                 ;345
                  |L8.346|
00015a  f8881018          STRB     r1,[r8,#0x18]         ;349
00015e  e8bd87f0          POP      {r4-r10,pc}
;;;353    
                          ENDP

000162  0000              DCW      0x0000
                  |L8.356|
                          DCD      pFlash
                  |L8.360|
                          DCD      0x40023c16
                  |L8.364|
                          DCD      0x00fff000
                  |L8.368|
                          DCD      0x40023c15
                  |L8.372|
                          DCD      0x40023c14

                          AREA ||i.HAL_FLASHEx_OB_DeSelectPCROP||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OB_DeSelectPCROP PROC
;;;502      */
;;;503    HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
000000  4803              LDR      r0,|L9.16|
;;;504    {
;;;505      uint8_t optiontmp = 0xFF;
;;;506      
;;;507      /* Mask SPRMOD bit */
;;;508      optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
000002  7801              LDRB     r1,[r0,#0]
000004  f001017f          AND      r1,r1,#0x7f
;;;509      
;;;510      /* Update Option Byte */
;;;511      *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);  
000008  7001              STRB     r1,[r0,#0]
;;;512      
;;;513      return HAL_OK;
00000a  2000              MOVS     r0,#0
;;;514    }
00000c  4770              BX       lr
;;;515    #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F401xC || STM32F401xE || STM32F410xx ||\
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40023c17

                          AREA ||i.HAL_FLASHEx_OB_GetBank2WRP||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OB_GetBank2WRP PROC
;;;524      */
;;;525    uint16_t HAL_FLASHEx_OB_GetBank2WRP(void)
000000  4801              LDR      r0,|L10.8|
;;;526    {                            
;;;527      /* Return the FLASH write protection Register value */
;;;528      return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;529    }
000004  4770              BX       lr
;;;530    #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40023c1a

                          AREA ||i.HAL_FLASHEx_OB_SelectPCROP||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OB_SelectPCROP PROC
;;;477      */
;;;478    HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
000000  4804              LDR      r0,|L11.20|
;;;479    {
;;;480      uint8_t optiontmp = 0xFF;
;;;481    
;;;482      /* Mask SPRMOD bit */
;;;483      optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
000002  7801              LDRB     r1,[r0,#0]
000004  f001017f          AND      r1,r1,#0x7f
;;;484      
;;;485      /* Update Option Byte */
;;;486      *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp); 
000008  f0410180          ORR      r1,r1,#0x80
00000c  7001              STRB     r1,[r0,#0]
;;;487      
;;;488      return HAL_OK;
00000e  2000              MOVS     r0,#0
;;;489    }
000010  4770              BX       lr
;;;490    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40023c17

;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REVSH|
#line 402
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____RRX|
#line 587
|__asm___24_stm32f4xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
