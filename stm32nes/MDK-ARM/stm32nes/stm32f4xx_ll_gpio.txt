; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -ostm32nes\stm32f4xx_ll_gpio.o --depend=stm32nes\stm32f4xx_ll_gpio.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F4xx_HAL_Driver/Inc -I../Drivers/CMSIS/Device/ST/STM32F4xx/Include -I../Drivers/CMSIS/Include -I../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy -I.\RTE\_stm32nes -ID:\Keil_v5\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -ID:\Keil_v5\Arm\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__UVISION_VERSION=531 -D_RTE_ -DSTM32F429xx -D_RTE_ -DUSE_FULL_LL_DRIVER -DSTM32F429xx -DUSE_HAL_DRIVER --omf_browse=stm32nes\stm32f4xx_ll_gpio.crf ../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_gpio.c]
                          THUMB

                          AREA ||i.LL_AHB1_GRP1_ForceReset||, CODE, READONLY, ALIGN=2

                  LL_AHB1_GRP1_ForceReset PROC
;;;599    */
;;;600    __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
000000  4902              LDR      r1,|L1.12|
;;;601    {
;;;602      SET_BIT(RCC->AHB1RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L1.12|
000008  6011              STR      r1,[r2,#0]
;;;603    }
00000a  4770              BX       lr
;;;604    
                          ENDP

                  |L1.12|
                          DCD      0x40023810

                          AREA ||i.LL_AHB1_GRP1_ReleaseReset||, CODE, READONLY, ALIGN=2

                  LL_AHB1_GRP1_ReleaseReset PROC
;;;648    */
;;;649    __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
000000  4902              LDR      r1,|L2.12|
;;;650    {
;;;651      CLEAR_BIT(RCC->AHB1RSTR, Periphs);
000002  6809              LDR      r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  6011              STR      r1,[r2,#0]
;;;652    }
00000a  4770              BX       lr
;;;653    
                          ENDP

                  |L2.12|
                          DCD      0x40023810

                          AREA ||i.LL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  LL_GPIO_DeInit PROC
;;;119      */
;;;120    ErrorStatus LL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
000000  b570              PUSH     {r4-r6,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122      ErrorStatus status = SUCCESS;
000004  2501              MOVS     r5,#1
;;;123    
;;;124      /* Check the parameters */
;;;125      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;126    
;;;127      /* Force and Release reset on clock of GPIOx Port */
;;;128      if (GPIOx == GPIOA)
000006  4838              LDR      r0,|L3.232|
000008  4284              CMP      r4,r0
00000a  d106              BNE      |L3.26|
;;;129      {
;;;130        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;131        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
000018  e064              B        |L3.228|
                  |L3.26|
;;;132      }
;;;133      else if (GPIOx == GPIOB)
00001a  4834              LDR      r0,|L3.236|
00001c  4284              CMP      r4,r0
00001e  d106              BNE      |L3.46|
;;;134      {
;;;135        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;136        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
000026  2002              MOVS     r0,#2
000028  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
00002c  e05a              B        |L3.228|
                  |L3.46|
;;;137      }
;;;138      else if (GPIOx == GPIOC)
00002e  4830              LDR      r0,|L3.240|
000030  4284              CMP      r4,r0
000032  d106              BNE      |L3.66|
;;;139      {
;;;140        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
000034  2004              MOVS     r0,#4
000036  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;141        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
00003a  2004              MOVS     r0,#4
00003c  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
000040  e050              B        |L3.228|
                  |L3.66|
;;;142      }
;;;143    #if defined(GPIOD)
;;;144      else if (GPIOx == GPIOD)
000042  482c              LDR      r0,|L3.244|
000044  4284              CMP      r4,r0
000046  d106              BNE      |L3.86|
;;;145      {
;;;146        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
000048  2008              MOVS     r0,#8
00004a  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;147        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
00004e  2008              MOVS     r0,#8
000050  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
000054  e046              B        |L3.228|
                  |L3.86|
;;;148      }
;;;149    #endif /* GPIOD */
;;;150    #if defined(GPIOE)
;;;151      else if (GPIOx == GPIOE)
000056  4828              LDR      r0,|L3.248|
000058  4284              CMP      r4,r0
00005a  d106              BNE      |L3.106|
;;;152      {
;;;153        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
00005c  2010              MOVS     r0,#0x10
00005e  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;154        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
000062  2010              MOVS     r0,#0x10
000064  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
000068  e03c              B        |L3.228|
                  |L3.106|
;;;155      }
;;;156    #endif /* GPIOE */
;;;157    #if defined(GPIOF)
;;;158      else if (GPIOx == GPIOF)
00006a  4824              LDR      r0,|L3.252|
00006c  4284              CMP      r4,r0
00006e  d106              BNE      |L3.126|
;;;159      {
;;;160        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
000070  2020              MOVS     r0,#0x20
000072  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;161        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
000076  2020              MOVS     r0,#0x20
000078  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
00007c  e032              B        |L3.228|
                  |L3.126|
;;;162      }
;;;163    #endif /* GPIOF */
;;;164    #if defined(GPIOG)
;;;165      else if (GPIOx == GPIOG)
00007e  4820              LDR      r0,|L3.256|
000080  4284              CMP      r4,r0
000082  d106              BNE      |L3.146|
;;;166      {
;;;167        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
000084  2040              MOVS     r0,#0x40
000086  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;168        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
00008a  2040              MOVS     r0,#0x40
00008c  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
000090  e028              B        |L3.228|
                  |L3.146|
;;;169      }
;;;170    #endif /* GPIOG */
;;;171    #if defined(GPIOH)
;;;172      else if (GPIOx == GPIOH)
000092  481c              LDR      r0,|L3.260|
000094  4284              CMP      r4,r0
000096  d106              BNE      |L3.166|
;;;173      {
;;;174        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOH);
000098  2080              MOVS     r0,#0x80
00009a  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;175        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
00009e  2080              MOVS     r0,#0x80
0000a0  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
0000a4  e01e              B        |L3.228|
                  |L3.166|
;;;176      }
;;;177    #endif /* GPIOH */
;;;178    #if defined(GPIOI)
;;;179      else if (GPIOx == GPIOI)
0000a6  4818              LDR      r0,|L3.264|
0000a8  4284              CMP      r4,r0
0000aa  d106              BNE      |L3.186|
;;;180      {
;;;181        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOI);
0000ac  1580              ASRS     r0,r0,#22
0000ae  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;182        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOI);
0000b2  15a0              ASRS     r0,r4,#22
0000b4  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
0000b8  e014              B        |L3.228|
                  |L3.186|
;;;183      }
;;;184    #endif /* GPIOI */
;;;185    #if defined(GPIOJ)
;;;186      else if (GPIOx == GPIOJ)
0000ba  4814              LDR      r0,|L3.268|
0000bc  4284              CMP      r4,r0
0000be  d106              BNE      |L3.206|
;;;187      {
;;;188        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOJ);
0000c0  1540              ASRS     r0,r0,#21
0000c2  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;189        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOJ);
0000c6  1560              ASRS     r0,r4,#21
0000c8  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
0000cc  e00a              B        |L3.228|
                  |L3.206|
;;;190      }
;;;191    #endif /* GPIOJ */
;;;192    #if defined(GPIOK)
;;;193      else if (GPIOx == GPIOK)
0000ce  4810              LDR      r0,|L3.272|
0000d0  4284              CMP      r4,r0
0000d2  d106              BNE      |L3.226|
;;;194      {
;;;195        LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOK);
0000d4  1500              ASRS     r0,r0,#20
0000d6  f7fffffe          BL       LL_AHB1_GRP1_ForceReset
;;;196        LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOK);
0000da  1520              ASRS     r0,r4,#20
0000dc  f7fffffe          BL       LL_AHB1_GRP1_ReleaseReset
0000e0  e000              B        |L3.228|
                  |L3.226|
;;;197      }
;;;198    #endif /* GPIOK */
;;;199      else
;;;200      {
;;;201        status = ERROR;
0000e2  2500              MOVS     r5,#0
                  |L3.228|
;;;202      }
;;;203    
;;;204      return (status);
0000e4  4628              MOV      r0,r5
;;;205    }
0000e6  bd70              POP      {r4-r6,pc}
;;;206    
                          ENDP

                  |L3.232|
                          DCD      0x40020000
                  |L3.236|
                          DCD      0x40020400
                  |L3.240|
                          DCD      0x40020800
                  |L3.244|
                          DCD      0x40020c00
                  |L3.248|
                          DCD      0x40021000
                  |L3.252|
                          DCD      0x40021400
                  |L3.256|
                          DCD      0x40021800
                  |L3.260|
                          DCD      0x40021c00
                  |L3.264|
                          DCD      0x40022000
                  |L3.268|
                          DCD      0x40022400
                  |L3.272|
                          DCD      0x40022800

                          AREA ||i.LL_GPIO_Init||, CODE, READONLY, ALIGN=1

                  LL_GPIO_Init PROC
;;;215      */
;;;216    ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;217    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;218      uint32_t pinpos     = 0x00000000U;
000006  2400              MOVS     r4,#0
;;;219      uint32_t currentpin = 0x00000000U;
000008  2100              MOVS     r1,#0
;;;220    
;;;221      /* Check the parameters */
;;;222      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;223      assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
;;;224      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
;;;225      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
;;;226    
;;;227      /* ------------------------- Configure the port pins ---------------- */
;;;228      /* Initialize  pinpos on first pin set */
;;;229      pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
00000a  6810              LDR      r0,[r2,#0]
00000c  fa90f0a0          RBIT     r0,r0
000010  fab0f480          CLZ      r4,r0
;;;230    
;;;231      /* Configure the port pins */
;;;232      while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
000014  e07f              B        |L4.278|
                  |L4.22|
;;;233      {
;;;234        /* Get current io position */
;;;235        currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
000016  2501              MOVS     r5,#1
000018  40a5              LSLS     r5,r5,r4
00001a  6810              LDR      r0,[r2,#0]
00001c  ea000105          AND      r1,r0,r5
;;;236    
;;;237        if (currentpin)
000020  2900              CMP      r1,#0
000022  d077              BEQ      |L4.276|
;;;238        {
;;;239          /* Pin Mode configuration */
;;;240          LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
000024  6850              LDR      r0,[r2,#4]
000026  681d              LDR      r5,[r3,#0]
000028  fa91f6a1          RBIT     r6,r1
00002c  fab6f686          CLZ      r6,r6
000030  0077              LSLS     r7,r6,#1
000032  2603              MOVS     r6,#3
000034  40be              LSLS     r6,r6,r7
000036  43b5              BICS     r5,r5,r6
000038  fa91f6a1          RBIT     r6,r1
00003c  fab6f686          CLZ      r6,r6
000040  0076              LSLS     r6,r6,#1
000042  fa00f606          LSL      r6,r0,r6
000046  4335              ORRS     r5,r5,r6
000048  601d              STR      r5,[r3,#0]
00004a  bf00              NOP      
;;;241    
;;;242          if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
00004c  6850              LDR      r0,[r2,#4]
00004e  2801              CMP      r0,#1
000050  d002              BEQ      |L4.88|
000052  6850              LDR      r0,[r2,#4]
000054  2802              CMP      r0,#2
000056  d114              BNE      |L4.130|
                  |L4.88|
;;;243          {
;;;244            /* Check Speed mode parameters */
;;;245            assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
;;;246    
;;;247            /* Speed mode configuration */
;;;248            LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
000058  6890              LDR      r0,[r2,#8]
00005a  689d              LDR      r5,[r3,#8]
00005c  fa91f6a1          RBIT     r6,r1
000060  fab6f686          CLZ      r6,r6
000064  0077              LSLS     r7,r6,#1
000066  2603              MOVS     r6,#3
000068  40be              LSLS     r6,r6,r7
00006a  43b5              BICS     r5,r5,r6
00006c  fa91f6a1          RBIT     r6,r1
000070  fab6f686          CLZ      r6,r6
000074  0076              LSLS     r6,r6,#1
000076  fa00f606          LSL      r6,r0,r6
00007a  4335              ORRS     r5,r5,r6
00007c  609d              STR      r5,[r3,#8]
00007e  bf00              NOP      
000080  bf00              NOP      
                  |L4.130|
;;;249          }
;;;250    
;;;251          /* Pull-up Pull down resistor configuration*/
;;;252          LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
000082  6910              LDR      r0,[r2,#0x10]
000084  68dd              LDR      r5,[r3,#0xc]
000086  fa91f6a1          RBIT     r6,r1
00008a  fab6f686          CLZ      r6,r6
00008e  0077              LSLS     r7,r6,#1
000090  2603              MOVS     r6,#3
000092  40be              LSLS     r6,r6,r7
000094  43b5              BICS     r5,r5,r6
000096  fa91f6a1          RBIT     r6,r1
00009a  fab6f686          CLZ      r6,r6
00009e  0076              LSLS     r6,r6,#1
0000a0  fa00f606          LSL      r6,r0,r6
0000a4  4335              ORRS     r5,r5,r6
0000a6  60dd              STR      r5,[r3,#0xc]
0000a8  bf00              NOP      
;;;253    
;;;254          if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
0000aa  6850              LDR      r0,[r2,#4]
0000ac  2802              CMP      r0,#2
0000ae  d131              BNE      |L4.276|
;;;255          {
;;;256            /* Check Alternate parameter */
;;;257            assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
;;;258    
;;;259            /* Speed mode configuration */
;;;260            if (POSITION_VAL(currentpin) < 0x00000008U)
0000b0  fa91f0a1          RBIT     r0,r1
0000b4  fab0f080          CLZ      r0,r0
0000b8  2808              CMP      r0,#8
0000ba  d214              BCS      |L4.230|
;;;261            {
;;;262              LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
0000bc  6950              LDR      r0,[r2,#0x14]
0000be  6a1d              LDR      r5,[r3,#0x20]
0000c0  fa91f6a1          RBIT     r6,r1
0000c4  fab6f686          CLZ      r6,r6
0000c8  00b7              LSLS     r7,r6,#2
0000ca  260f              MOVS     r6,#0xf
0000cc  40be              LSLS     r6,r6,r7
0000ce  43b5              BICS     r5,r5,r6
0000d0  fa91f6a1          RBIT     r6,r1
0000d4  fab6f686          CLZ      r6,r6
0000d8  00b6              LSLS     r6,r6,#2
0000da  fa00f606          LSL      r6,r0,r6
0000de  4335              ORRS     r5,r5,r6
0000e0  621d              STR      r5,[r3,#0x20]
0000e2  bf00              NOP      
0000e4  e016              B        |L4.276|
                  |L4.230|
;;;263            }
;;;264            else
;;;265            {
;;;266              LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
0000e6  6950              LDR      r0,[r2,#0x14]
0000e8  6a5d              LDR      r5,[r3,#0x24]
0000ea  0a0e              LSRS     r6,r1,#8
0000ec  fa96f6a6          RBIT     r6,r6
0000f0  fab6f686          CLZ      r6,r6
0000f4  00b7              LSLS     r7,r6,#2
0000f6  260f              MOVS     r6,#0xf
0000f8  40be              LSLS     r6,r6,r7
0000fa  43b5              BICS     r5,r5,r6
0000fc  0a0e              LSRS     r6,r1,#8
0000fe  fa96f6a6          RBIT     r6,r6
000102  fab6f686          CLZ      r6,r6
000106  00b6              LSLS     r6,r6,#2
000108  fa00f606          LSL      r6,r0,r6
00010c  4335              ORRS     r5,r5,r6
00010e  625d              STR      r5,[r3,#0x24]
000110  bf00              NOP      
000112  bf00              NOP      
                  |L4.276|
;;;267            }
;;;268          }
;;;269        }
;;;270        pinpos++;
000114  1c64              ADDS     r4,r4,#1
                  |L4.278|
000116  6810              LDR      r0,[r2,#0]            ;232
000118  40e0              LSRS     r0,r0,r4              ;232
00011a  2800              CMP      r0,#0                 ;232
00011c  f47faf7b          BNE      |L4.22|
;;;271      }
;;;272    
;;;273      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
000120  6850              LDR      r0,[r2,#4]
000122  2801              CMP      r0,#1
000124  d002              BEQ      |L4.300|
000126  6850              LDR      r0,[r2,#4]
000128  2802              CMP      r0,#2
00012a  d109              BNE      |L4.320|
                  |L4.300|
;;;274      {
;;;275        /* Check Output mode parameters */
;;;276        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
;;;277    
;;;278        /* Output mode configuration*/
;;;279        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
00012c  68d5              LDR      r5,[r2,#0xc]
00012e  6810              LDR      r0,[r2,#0]
000130  685e              LDR      r6,[r3,#4]
000132  4386              BICS     r6,r6,r0
000134  fb00f705          MUL      r7,r0,r5
000138  433e              ORRS     r6,r6,r7
00013a  605e              STR      r6,[r3,#4]
00013c  bf00              NOP      
00013e  bf00              NOP      
                  |L4.320|
;;;280    
;;;281      }
;;;282      return (SUCCESS);
000140  2001              MOVS     r0,#1
;;;283    }
000142  bdf0              POP      {r4-r7,pc}
;;;284    
                          ENDP


                          AREA ||i.LL_GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  LL_GPIO_StructInit PROC
;;;291    
;;;292    void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;293    {
;;;294      /* Reset GPIO init structure parameters values */
;;;295      GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
000004  6001              STR      r1,[r0,#0]
;;;296      GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
000006  2103              MOVS     r1,#3
000008  6041              STR      r1,[r0,#4]
;;;297      GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
00000a  2100              MOVS     r1,#0
00000c  6081              STR      r1,[r0,#8]
;;;298      GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_PUSHPULL;
00000e  60c1              STR      r1,[r0,#0xc]
;;;299      GPIO_InitStruct->Pull       = LL_GPIO_PULL_NO;
000010  6101              STR      r1,[r0,#0x10]
;;;300      GPIO_InitStruct->Alternate  = LL_GPIO_AF_0;
000012  6141              STR      r1,[r0,#0x14]
;;;301    }
000014  4770              BX       lr
;;;302    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_ll_gpio_c_4040a040____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f4xx_ll_gpio_c_4040a040____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_ll_gpio_c_4040a040____REVSH|
#line 402
|__asm___19_stm32f4xx_ll_gpio_c_4040a040____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_ll_gpio_c_4040a040____RRX|
#line 587
|__asm___19_stm32f4xx_ll_gpio_c_4040a040____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
